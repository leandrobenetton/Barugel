/****** Object:  StoredProcedure [dbo].[ZWM_RFRecCons1Sp]    Script Date: 01/20/2015 15:14:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_RFRecCons1Sp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_RFRecCons1Sp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_RFRecCons1Sp]    Script Date: 01/20/2015 15:14:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ZWM_RFRecCons1Sp] (
    @Site		 SiteType
  , @UserName	 UserNameType	  = NULL
  , @IdRecCons	 ZwmIdRFConsType  = NULL
  , @Whse		 WhseType		  = NULL
  , @GrnNum      GrnNumType       = NULL
  , @VendNum	 VendNumType	  = NULL
  , @Infobar     InfobarType      = NULL OUTPUT
)
AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_RFRecCons1Sp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_RFRecCons1Sp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
			@Site
		  , @UserName
	      , @IdRecCons	
	      , @Whse
	      , @GrnNum
	      , @VendNum
		  , @Infobar         OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.

--Inicio de Sesion
DECLARE	@return_value int,
		@sessionId            RowPointerType

SET @UserName = isnull(@UserName,'sa')

EXEC	@return_value = [dbo].[InitSessionContextWithUserSp]
		@ContextName = 'ZWM',
		@UserName = @UserName,
		@SessionID = @SessionID OUTPUT,
		@Site = @Site

--Solo para implementacion Barugel Azulay
DECLARE @BAR FlagNyTYpe
IF (Select count(*) from zwm_parms where customer = 'BAR') > 0
	Set @BAR = 1 


DECLARE 
	@Severity int
	,@ExisteReg int

SET @Severity = 0

IF @IdRecCons IS NULL or len(rtrim(ltrim(@IdRecCons))) = 0
BEGIN
	SET @Infobar = 'No se ha recibido un Id correcto'
	SET @Severity = 16
	RETURN @severity
END

------------------------------ SET NULLs
IF LEN(LTRIM(@IdRecCons)) = 0 SET @IdRecCons = NULL
IF LEN(LTRIM(@Whse)) = 0 SET @Whse = NULL
IF LEN(LTRIM(@GrnNum)) = 0 SET @GrnNum = NULL
IF LEN(LTRIM(@VendNum)) = 0 SET @VendNum = NULL
------------------------------ SET NULLs

-- Si el parámetro de depósito es NULL, tomar el depósito principal, sino verifica que exista
IF @Whse IS NULL
		SELECT @Whse = def_whse FROM invparms
ELSE IF(SELECT Whse FROM Whse WHERE whse = @Whse) IS NULL
BEGIN
	SET @Infobar = 'El almacén no existe'
	SET @Severity = 16
	RETURN @severity
END

IF @VendNum is null
BEGIN
	IF ((SELECT COUNT(grn_hdr.grn_num) FROM grn_hdr WHERE grn_hdr.grn_num = @GrnNum) = 0)
	BEGIN
		SET @Severity = 16
		SET @Infobar = 'El número de NRM no existe'
	END
	ELSE IF ((SELECT COUNT(grn_hdr.grn_num) FROM grn_hdr WHERE grn_hdr.grn_num = @GrnNum) > 1)
	BEGIN
		SET @Severity = 16
		SET @Infobar = 'El número de NRM esta asociado a varios proveedores'
	END
	ELSE
	BEGIN
		SELECT @VendNum = grn.vend_num FROM grn_hdr grn where grn.grn_num = @GrnNum
	END
END
ELSE
BEGIN
	IF ((SELECT COUNT(grn_hdr.grn_num) FROM grn_hdr WHERE grn_hdr.grn_num = @GrnNum and grn_hdr.vend_num = @VendNum) = 0)
	BEGIN
		SET @Severity = 16
		SET @Infobar = 'El número de NRM y Proveedor no existe'
	END
END

IF ((SELECT COUNT(rf.grn_num) FROM zwm_rf_cons1_mst rf WHERE rf.grn_num = @GrnNum and rf.vend_num = @VendNum) > 0)
BEGIN
	SET @Severity = 16
	SET @Infobar = 'El número de NRM ya fue incorporado a otro Id de lectura'
END

IF ((SELECT COUNT(grn_hdr.grn_num) FROM grn_hdr WHERE grn_hdr.grn_num = @GrnNum and grn_hdr.vend_num = @VendNum and grn_hdr.stat = 'A') > 0)
BEGIN
	SET @Severity = 16
	SET @Infobar = 'El número de NRM se encuentra aprobado, no se puede efectuar el proceso'
END
	
IF @Severity = 0
BEGIN
			INSERT INTO zwm_rf_cons1_mst(id_rec_cons,grn_num,vend_num,whse)
			VALUES (@IdRecCons,@GrnNum,@VendNum,@Whse)
END 

EXEC dbo.CloseSessionContextSp @SessionID = @SessionID

RETURN @Severity
GO


