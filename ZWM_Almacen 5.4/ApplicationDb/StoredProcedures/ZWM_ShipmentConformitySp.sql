/****** Object:  StoredProcedure [dbo].[ZWM_ShipmentConformitySp]    Script Date: 01/09/2015 14:59:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_ShipmentConformitySp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_ShipmentConformitySp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_ShipmentConformitySp]    Script Date: 01/09/2015 14:59:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ZWM_ShipmentConformitySp] (
	@ShipmentId					ShipmentIDType
	,@Infobar					InfobarType OUTPUT
)as


 -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_ShipmentConformitySp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_ShipmentConformitySp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
		@ShipmentId		   
		,@Infobar		OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.

------------------------------------------------------------------------- declaraciones
DECLARE
 @TmpShipSessionID	RowPointer
,@QtyShipped					QtyUnitNoNegType
,@Severity			int
,@OnHandNeg			FlagNyType

declare
@PromptMsg					InfobarType
,@PromptButtons				InfobarType
,@RefNum					CoNumType
,@RefLineSuf				CoLineType
,@RefRelease				CoReleaseType
,@Loc						LocType
,@Lot						LotType
,@Qty						QtyUnitType
,@ShipmentLine				ShipmentLineType
,@ShipmentSeq				ShipmentSequenceType
,@CoitemDate				DateTime
,@CoitemRowPointer			RowPointerType
,@ShipmentSeqRowPointer		RowPointerType
,@Um						UMtype
,@Seq						int
,@WorkKey					varchar(MAX)
,@TmpSerID					UNIQUEIDENTIFIER
,@SerNum					SerNumType
,@SerTracked				ListYesNoType
,@Whse						WhseType
,@Item						ItemType
,@ItemDescription    		DescriptionType
,@ItemSerialTracked  		ListYesNoType
,@ItemLotTracked     		ListYesNoType
,@QtyOnHand	      			QtyUnitType
,@Curdate					DateTime
,@IgnoreLCR					ListYesNoType
,@IgnoreCount				ListYesNoType
,@ReasonCode				ReasonCodeType			
----------------------------------------------
, @FirstSequenceWithError	int
, @RecordsPosted			int
, @RsvdNum					RsvdNumType

SET @IgnoreLCR = isnull(@IgnoreLCR, 0)
SET @IgnoreCount = isnull(@IgnoreCount, 0)
SET @CurDate = isnull(@CurDate, dbo.GetSiteDate(getdate()))
SET @Severity = 0
SET @Seq = 0
------------------------------------------------------------------------- seteos
SET @TmpShipSessionID = dbo.SessionIDSp()
SELECT @OnHandNeg = neg_flag FROM invparms
SET @ReasonCode = 'INN'

DELETE FROM tmp_ship WHERE SessionID = @TmpShipSessionID

IF EXISTS (SELECT * FROM shipment_seq WHERE ZWM_UndeliveredQty > qty_shipped AND shipment_id = @ShipmentId)
BEGIN
	SET @Infobar = 'La cantidad no puede ser mayor a la despachada'
	SET @Severity = 16
	RETURN @Severity
END

DECLARE curs CURSOR LOCAL STATIC FOR
SELECT shipment.shipment_id
, shipment_line.shipment_line
, shipment_seq.shipment_seq
, pick_list_ref.ref_num
, pick_list_ref.ref_line_suf
, pick_list_ref.ref_release
, shipment_seq.loc
, shipment_seq.lot
, shipment_seq.ZWM_UndeliveredQty * (-1)
, coitem.recorddate
, coitem.u_m
, coitem.rowpointer
, item.serial_tracked
, shipment_seq.rowpointer
, shipment.whse
, coitem.item
FROM shipment
JOIN shipment_line ON shipment_line.shipment_id = shipment.shipment_id
JOIN shipment_seq ON shipment_seq.shipment_id = shipment_line.shipment_id AND shipment_seq.shipment_line = shipment_line.shipment_line
JOIN pick_list_ref ON pick_list_ref.pick_list_id = shipment_line.pick_list_id AND pick_list_ref.sequence = shipment_line.pick_list_ref_sequence
JOIN coitem ON coitem.co_num = pick_list_ref.ref_num AND coitem.co_line = pick_list_ref.ref_line_suf and coitem.co_release = pick_list_ref.ref_release
JOIN item ON item.item = coitem.item
WHERE shipment.shipment_id = @ShipmentId AND shipment_seq.ZWM_UndeliveredQty > 0
ORDER BY pick_list_ref.ref_num, pick_list_ref.ref_line_suf, pick_list_ref.ref_release

OPEN curs
WHILE 1 = 1
BEGIN
   FETCH curs INTO @ShipmentId, @ShipmentLine, @ShipmentSeq, @RefNum, @RefLineSuf, @RefRelease, @Loc, @Lot, @Qty, @CoitemDate, @Um, @CoitemRowPointer, @SerTracked, @ShipmentSeqRowPointer, @Whse, @Item
   IF @@FETCH_STATUS <> 0 BREAK

   -- Check LCR
   SELECT @Infobar = null
        , @PromptButtons = null
        , @PromptMsg = null
        , @Severity = 0

   EXEC @Severity =  ShipLcrSp
           @PCoNum        = @RefNum
         , @PTransDate    = @CurDate
         , @PMText        = 'Ship'
         , @PromptMsg     = @PromptMsg  OUTPUT
         , @PromptButtons = @PromptButtons OUTPUT
         , @Infobar       = @Infobar  OUTPUT

   IF @Severity = 16
      RETURN @Severity

   IF @Severity = 0 and @PromptMsg IS NOT NULL AND @IgnoreLCR = 0
      RETURN @Severity

   -- Check cycle count
   SELECT @Infobar = null
        , @PromptButtons = null
        , @PromptMsg = null
        , @Severity = 0

	EXEC @Severity = ItemwhseCheckCntInProcSp
	  @Whse
	, @Item
	, 0   --@CheckLotTracked
	, 0   --@CheckSerialTracked
	, ''  --@FormTitle
	, @ItemDescription OUTPUT
	, @UM OUTPUT
	, @ItemSerialTracked OUTPUT
	, @ItemLotTracked OUTPUT
	, @QtyOnHand OUTPUT
	, @Infobar OUTPUT
	, @PromptMsg OUTPUT
	, @PromptButtons OUTPUT	

   IF @Severity = 16
      RETURN @Severity

	IF @Severity = 0 and @PromptMsg IS NOT NULL AND @IgnoreCount = 0
	BEGIN
	   SET @Infobar = @PromptMsg
       IF EXISTS (SELECT 1 FROM tmp_ship WHERE SessionID = dbo.SessionIDSp() AND shipment_id = @ShipmentId )
			DELETE FROM tmp_ship  WHERE SessionID = dbo.SessionIDSp() AND shipment_id = @ShipmentId
	   RETURN @Severity
   END
		
   SET @WorkKey = null
   SET @WorkKey = 'ship' + cast(@ShipmentSeqRowPointer as varchar(MAX))
   SET @Severity = 0
--issue 164599 Set the MAX SEQ For ship same CO line but different shipment ID at one time.
   IF EXISTS (SELECT 1 FROM tmp_ship WHERE SessionID = dbo.SessionIDSp() 
                            AND co_num = @RefNum 
                            AND co_line = @RefLineSuf 
                            AND co_release = @RefRelease 
                            AND sequence = @Seq 
                            AND shipment_id <> @ShipmentId )
       BEGIN
          SELECT @Seq = MAX(sequence)+1 FROM tmp_ship WHERE SessionID = dbo.SessionIDSp() 
                                                            AND co_num = @RefNum 
                                                            AND co_line = @RefLineSuf 
                                                            AND co_release = @RefRelease
       END
       
   EXEC @Severity = COShippingPopulateTmpShpSP
        @CoNum              = @RefNum
      , @CoLine             = @RefLineSuf
      , @CoRelease          = @RefRelease
      , @UbDoNum            = null
      , @UbDoLine           = null
      , @UbQtyToShipConv    = @Qty
      , @UbQtyToShip        = @Qty
      , @UbLoc              = @Loc
      , @UbLot              = @Lot
      , @UbCrReturn         = 0
      , @UbRtnToStk         = 1
      , @UbByCons           = null
      , @UbReasonCode       = @ReasonCode
      , @UbWorkkey          = @WorkKey
      , @UbTransDate        = @CurDate
      , @RowPointer         = @CoitemRowPointer
      , @UbSequence         = @Seq
      , @UbOrigInvoice      = null
      , @UbReasonText       = null
      , @UbImportdocId      = null
      , @UbExportDocId      = null
      , @PackNum            = null
      , @ContainerNum       = null
      , @UM                 = @UM
      , @UbUserName         = null
      , @UbEsigReason       = null
      , @UbEsigRowPointer   = null
      , @UbEsigEncryptedPassword = null
      , @RecordDate         = @CoitemDate
      , @ShipmentId         = @ShipmentId

      IF @Severity <> 0
         RETURN @Severity

      set @Seq = @seq + 1

      if @SerTracked = 1
      begin
         declare ser_curs cursor local static for
         select ser_num
         from shipment_seq_serial ser
         where ser.shipment_id = @ShipmentId
           and ser.shipment_line = @ShipmentLine
           and ser.shipment_seq  = @ShipmentSeq
           
         OPEN ser_curs
         WHILE 1 = 1
         BEGIN
            FETCH ser_curs INTO @SerNum
            IF @@FETCH_STATUS <> 0 BREAK

		      -- Populate the tmp_ser to ship serial
		      EXEC SerialSaveSp @SerNum
					      , @TmpSerID
					      , @WorkKey
					      , @Infobar
      			
		   END
		   CLOSE ser_curs
		   DEALLOCATE ser_curs
      END -- SerTracked				
      			
END
CLOSE curs
DEALLOCATE curs


-------------------------------------------------------------------------- COShippingLoopSp

BEGIN TRANSACTION

EXECUTE @Severity = COShippingLoopSp
   @OnHandNeg
  ,@FirstSequenceWithError OUTPUT
  ,@RecordsPosted OUTPUT
  ,@Infobar OUTPUT
  ,@PromptButtons OUTPUT
  
     IF @Severity <> 0
	 OR @FirstSequenceWithError > 0
	 BEGIN
	    ROLLBACK

	    -- Elimiar cualquier registro que haya sido insertado hasta el momento
		  DELETE from tmp_ship WHERE tmp_ship.SessionID = dbo.SessionIDSp()
		RETURN @Severity
	 END

COMMIT 

DELETE from tmp_ship WHERE tmp_ship.SessionID = dbo.SessionIDSp()

-------------------------------------------------------------------------------------  AddResvSp

DECLARE curs CURSOR LOCAL STATIC FOR
SELECT shipment.shipment_id
, shipment_line.shipment_line
, shipment_seq.shipment_seq
, pick_list_ref.ref_num
, pick_list_ref.ref_line_suf
, pick_list_ref.ref_release
, shipment_seq.loc
, shipment_seq.lot
, shipment_seq.ZWM_UndeliveredQty
, coitem.recorddate
, coitem.u_m
, coitem.rowpointer
, item.serial_tracked
, shipment_seq.rowpointer
, shipment.whse
, coitem.item
FROM shipment
JOIN shipment_line on shipment_line.shipment_id = shipment.shipment_id
JOIN shipment_seq on shipment_seq.shipment_id = shipment_line.shipment_id and shipment_seq.shipment_line = shipment_line.shipment_line
JOIN pick_list_ref on pick_list_ref.pick_list_id = shipment_line.pick_list_id and pick_list_ref.sequence = shipment_line.pick_list_ref_sequence
JOIN coitem on coitem.co_num = pick_list_ref.ref_num and coitem.co_line = pick_list_ref.ref_line_suf and coitem.co_release = pick_list_ref.ref_release
JOIN item on item.item = coitem.item
WHERE shipment.shipment_id = @ShipmentId and shipment_seq.ZWM_UndeliveredQty > 0 and item.reservable = 1
ORDER BY pick_list_ref.ref_num, pick_list_ref.ref_line_suf, pick_list_ref.ref_release

OPEN curs
WHILE 1 = 1
BEGIN
   FETCH curs INTO @ShipmentId, @ShipmentLine, @ShipmentSeq, @RefNum, @RefLineSuf, @RefRelease, @Loc, @Lot, @Qty, @CoitemDate, @Um, @CoitemRowPointer, @SerTracked, @ShipmentSeqRowPointer, @Whse, @Item
   IF @@FETCH_STATUS <> 0 BREAK

	EXEC	@Severity = [dbo].[AddResvSp]
		@Item = @Item,
		@Whse = @Whse,
		@RefNum = @RefNum,
		@RefLine = @RefLineSuf,
		@RefRelease = @RefRelease,
		@Loc = @Loc,
		@Lot = @Lot,
		@Qty = @Qty,
		@ConvFactor = NULL,
		@UM = @Um,
		@AutoRsvd = 1,
		@ProgramName = NULL,
		@RsvdNum = @RsvdNum OUTPUT,
		@Infobar = @Infobar OUTPUT,
		@SessionID = NULL,
		@ImportDocId = NULL,
		@ParmsSite = NULL

END
CLOSE curs
DEALLOCATE curs



UPDATE shipment_seq SET 
ZWM_UndeliveredQtyProcessed = (isnull(ZWM_UndeliveredQtyProcessed,0) + isnull(ZWM_UndeliveredQty,0)) 
WHERE shipment_id = @ShipmentId

UPDATE shipment_seq SET ZWM_UndeliveredQty = 0 where shipment_id = @ShipmentId

RETURN @Severity
GO


