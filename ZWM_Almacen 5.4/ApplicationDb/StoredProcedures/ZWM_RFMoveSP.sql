/****** Object:  StoredProcedure [dbo].[ZWM_RFMoveSp]    Script Date: 01/20/2015 15:13:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_RFMoveSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_RFMoveSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_RFMoveSp]    Script Date: 01/20/2015 15:13:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ZWM_RFMoveSp](
     @Site			 SiteType
	,@UserName		 UserNameType	= NULL
	,@Item			 ItemType		= NULL
	,@QtyUMStd       QtyUnitType	= NULL
	,@QtyUMStk1      QtyUnitType	= NULL
	,@QtyUMStk2		 QtyUnitType	= NULL
	,@Whse			 WhseType		= NULL
	,@FromLoc		 LocType		= NULL
	,@ToLoc			 LocType		= NULL
	,@Lot			 LotType		= NULL
    ,@Emp			 EmpNumType		= NULL
    ,@CoNum			 CoNumType		= NULL
    ,@CoLine		 CoLineType		= NULL
    ,@CoRelease		 CoReleaseType	= NULL
	,@Infobar		 InfobarType	= NULL OUTPUT
)
AS


   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_RFMoveSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_RFMoveSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
		 @Site
		,@UserName
		,@Item
		,@QtyUMStd
		,@QtyUMStk1
		,@QtyUMStk2
		,@Whse
		,@FromLoc
		,@ToLoc
		,@Lot
		,@Emp
		,@CoNum
		,@CoLine
		,@CoRelease
		,@Infobar		 OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
   

--Inicio de Sesion
DECLARE	@return_value int,
		@sessionId            RowPointerType

SET @UserName = isnull(@UserName,'sa')

EXEC	@return_value = [dbo].[InitSessionContextWithUserSp]
		@ContextName = 'ZWM',
		@UserName = @UserName,
		@SessionID = @SessionID OUTPUT,
		@Site = @Site

--Solo para implementacion Barugel Azulay
DECLARE @BAR FlagNyTYpe
IF (Select count(*) from zwm_parms where customer = 'BAR') > 0
	Set @BAR = 1 


----------------------------------------------------------------------- VARIABLES
DECLARE @Severity int
SET @Severity = 0

DECLARE 
@QtyToMove				QtyUnitType			    -- cantidad a mover. 
,@LotTracked			ListYesNoType			-- controla lote
,@RecordProcessed		int

-- variables para la conversión de unidades
DECLARE
@UMItem               UMType
,@QtyStk1Converted     QtyUnitType
,@QtyStk2Converted     QtyUnitType
,@OutQty               int
,@UMStk1			   UMType
,@UMStk2			   UMType

SET @QtyStk1Converted = 0
SET @QtyStk2Converted = 0
SET @QtyUMStd = ISNULL(@QtyUMStd,0)
SET @QtyUMStk1 = ISNULL(@QtyUMStk1,0)
SET @QtyUMStk2 = ISNULL(@QtyUMStk2,0)

IF len(ltrim(@Lot)) = 0 SET @Lot = NULL
SET @Lot = dbo.ExpandKyByType('LotType',@Lot)

------------------------------------------------------------------------ SPs
--convierte las cantidades de Stk1 a UM estandar
IF @QtyUMStk1 > 0
BEGIN
	SET @UMStk1 = ( SELECT ZWM_UMStock1 FROM item WHERE item = @Item )
	EXEC @Severity = dbo.UMConvQtySp
		@UM               = @UMStk1
	  , @Item             = @Item
	  , @VendNum          = NULL
	  , @Area             = NULL
	  , @ConvertToBase    = 1
	  , @QtyToBeConverted = @QtyUMStk1
	  , @OutQty           = @QtyStk1Converted OUTPUT --devuelve la cantidad convertida
	  , @Infobar          = @Infobar       OUTPUT
END

--convierte las cantidades de Stk2 a UM estandar
IF @QtyUMStk2 > 0
BEGIN 
	SET @UMStk2 = ( SELECT ZWM_UMStock2 FROM item WHERE item = @Item )
	EXEC @Severity = dbo.UMConvQtySp
		@UM               = @UMStk2
	  , @Item             = @Item
	  , @VendNum          = NULL
	  , @Area             = NULL
	  , @ConvertToBase    = 1
	  , @QtyToBeConverted = @QtyUMStk2
	  , @OutQty           = @QtyStk2Converted OUTPUT --devuelve la cantidad convertida
	  , @Infobar          = @Infobar       OUTPUT
END

------------------------------------------------------------------------ Seteo de variables
--cantidad a mover.
SET @QtyToMove = @QtyUMStd + @QtyStk1Converted + @QtyStk2Converted 


-- Si el parámetro de depósito es NULL, tomar el depósito principal, sino verifica que exista
IF @Whse IS NULL
		SELECT @Whse = def_whse FROM invparms
ELSE IF(SELECT Whse FROM Whse WHERE whse = @Whse) IS NULL
BEGIN
	SET @Infobar = 'El almacén no existe'
	SET @Severity = 16
	RETURN @severity
END

-- Si el parámetro de ubicación es NULL, tomar la ubicación de recepcion; caso contrario verificar que la ubicación exista
IF @FromLoc IS NULL
	SELECT @FromLoc = loc FROM zwm_parms
ELSE IF(SELECT loc FROM location WHERE loc = @FromLoc) IS NULL
	BEGIN
		SET @Infobar = 'La ubicación no existe'
		SET @Severity = 16
		RETURN @severity
	END


--Verifica que el artículo exista
IF (SELECT count(item) FROM item WHERE item = @Item) = 0
BEGIN
	SET @Infobar = 'No existe el artículo'
	SET @Severity = 16
	RETURN @severity
END
--Verifica que la ubicacion destino exista
IF (SELECT count(loc) FROM location WHERE loc = @Toloc) = 0
BEGIN
	SET @Infobar = 'No existe la ubicacion destino'
	SET @Severity = 16
	RETURN @severity
END
--Verifica que la ubicacion origen exista
IF (SELECT count(loc) FROM location WHERE loc = @Fromloc) = 0
BEGIN
	SET @Infobar = 'No existe la ubicacion origen'
	SET @Severity = 16
	RETURN @severity
END

-- El articulo controla lote
SELECT @LotTracked = lot_tracked FROM item WHERE item = @Item

--Validación de lote y cantidad
IF @LotTracked = 0 AND (ISNULL((SELECT SUM(qty_on_hand) FROM itemloc WHERE item = @Item and loc = @FromLoc and whse = @Whse),0) < @QtyToMove)
BEGIN
	SET @Infobar = 'No existe cantidad suficiente para el movimiento'
	SET @Severity = 16
	RETURN @severity		
END
ELSE IF @LotTracked = 1 AND (ISNULL((SELECT SUM(qty_on_hand) FROM lot_loc WHERE item = @Item and loc = @FromLoc and whse = @Whse and lot = @Lot),0) < @QtyToMove)
BEGIN
	SET @Infobar = 'No existe cantidad suficiente para el movimiento'
	SET @Severity = 16
	RETURN @severity		
END



--Validaciones a incorporar en lo posible mediante Ext_Gen MVPostSp
--1- Verifico si permite multiples productos
IF ((SELECT ZWM_MultProd FROM location WHERE loc = @ToLoc) = 0) AND (ISNULL((SELECT sum(qty_on_hand) FROM itemloc WHERE loc = @ToLoc and whse = @whse and item != @Item),0) > 0)
BEGIN
	SET @Infobar = 'La localizacion no permite el movimiento dado que contiene otro artículo'
	SET @Severity = 16
	RETURN @severity		
END
--2- Verifico si permite multiples lotes
IF @LotTracked = 1 AND ((SELECT ZWM_MultLot FROM location WHERE loc = @ToLoc) = 0) AND (ISNULL((SELECT sum(qty_on_hand) FROM lot_loc WHERE loc = @ToLoc and whse = @whse and item = @Item and lot != @Lot),0) > 0)
BEGIN
	SET @Infobar = 'La localizacion no permite el movimiento dado que contiene otro lote'
	SET @Severity = 16
	RETURN @severity		
END
--3- Verifico estado no disponible
DECLARE
@FromItemLocMrbFlag			ListYesNoType
,@ToItemLocMrbFlag			ListYesNoType
,@FromLocMrbFlag			ListYesNoType
,@ToLocMrbFlag				ListYesNoType
,@QtyFromItemLoc			QtyUnitType
,@QtyToItemLoc				QtyUnitType

SELECT @FromItemLocMrbFlag = mrb_flag, @QtyFromItemLoc = qty_on_hand
FROM itemloc WHERE loc = @FromLoc and whse = @whse and item = @Item

SELECT @ToItemLocMrbFlag = mrb_flag, @QtyToItemLoc = qty_on_hand
FROM itemloc WHERE loc = @ToLoc and whse = @whse and item = @Item

SELECT @FromLocMrbFlag = mrb_flag FROM location WHERE loc = @FromLoc
SELECT @ToLocMrbFlag   = mrb_flag FROM location WHERE loc = @ToLoc

SET @ToLocMrbFlag = ISNULL(@ToLocMrbFlag,0)
SET @QtyToItemLoc = ISNULL(@QtyToItemLoc,0)

IF  @QtyToItemLoc > 0 AND @FromItemLocMrbFlag = 0 AND @ToItemLocMrbFlag = 1 AND @ToLocMrbFlag = 0
BEGIN
	SET @Infobar = 'Existe mercadería no disponible en el depósito destino'
	SET @Severity = 16
	RETURN @severity		
END
IF @QtyToItemLoc > 0 AND @FromItemLocMrbFlag = 1 AND @ToItemLocMrbFlag = 0 AND @ToLocMrbFlag = 0
BEGIN
	SET @Infobar = 'Intenta trasladar mercadería no disponible a una ubicacion con stock disponible'
	SET @Severity = 16
	RETURN @severity		
END
--4(ver abajo) - luego de realizar el movimiento debo asegurar el estado de disponibilidad

--Criterio de reservas (falta incorporar)


--Movimmiento

BEGIN TRANSACTION

	--Creo la relacion del item con ubicacion y deposito
	IF (SELECT TOP 1 Loc FROM ItemLoc WHERE ItemLoc.item = @Item and ItemLoc.whse = @whse and ItemLoc.loc = @ToLoc ) IS NULL
	BEGIN
		EXEC	@Severity = [dbo].[ItemWhstkSp]
				@PBegItem = @Item,
				@PEndItem = @Item,
				@PWhse = @whse,
				@PLoc = @ToLoc,
				@PMrbFlag = 0,
				@PPermFlag = 0,
				@RecordProcessed = @RecordProcessed OUTPUT,
				@Infobar = @Infobar OUTPUT
	END

	DECLARE
	@TransDate          DateTimeType
	, @PUnitCost                CostPrcType
	, @PMatlCost                CostPrcType
	, @PLbrCost                 CostPrcType
	, @PFovhdCost               CostPrcType
	, @PVovhdCost               CostPrcType
	, @POutCost                 CostPrcType
	, @PTotCost                 CostPrcType

	SET @TransDate = getdate()

	IF @Severity = 0
	BEGIN
	  EXEC @Severity = dbo.MvPostSp
	    'M'                 --@PType       DefaultCharType
	  , @TransDate			--@PDate       DateType
	  , @QtyToMove          --@PQty        QtyUnitType
	  , @Item		        --@PItem       ItemType
	  , @Whse		        --@FromWhse    WhseType
	  , @FromLoc			--@FromLoc     LocType
	  , @Lot				--@FromLot     LotType
	  , @Whse				--@ToWhse      WhseType
	  , @ToLoc				--@ToLoc       LocType
	  , @Lot				--@ToLot       LotType
	  , 0					--@PZeroCost   ListYesNoType
	  , NULL                --@PTrnNum     TrnNumType
	  , NULL                --@PTrnLine    TrnLineType
	  , NULL                --@PTransNum   HugeTransNumType
	  , NULL                --@PRsvdNum    RsvdNumType
	  , 'I'                 --@PStat       SerialStatusType
	  , NULL                --@PRefNum     EmpJobCoPoRmaProjPsTrnNumType
	  , NULL                --@PRefLineSuf VariousSmallRefLineType
	  , NULL                --@PRefRelease CoReleaseOperNumPoReleaseType
	  , NULL                --@RefStr      RefStrType  = NULL
	  , @PUnitCost  OUTPUT  --@PUnitCost   CostPrcType   OUTPUT
	  , @PMatlCost  OUTPUT  --@PMatlCost   CostPrcType   OUTPUT
	  , @PLbrCost   OUTPUT  --@PLbrCost    CostPrcType   OUTPUT
	  , @PFovhdCost OUTPUT  --@PFovhdCost  CostPrcType   OUTPUT
	  , @PVovhdCost OUTPUT  --@PVovhdCost  CostPrcType   OUTPUT
	  , @POutCost   OUTPUT  --@POutCost    CostPrcType   OUTPUT
	  , @PTotCost   OUTPUT  --@PTotCost    CostPrcType   OUTPUT
	  , @Infobar    OUTPUT  --@Infobar     InfobarType   OUTPUT
	  , NULL
	  , NULL                --@FromImportDocId
	  , NULL                --@ToImportDocId
	  , NULL                --@ReasonCode
	  , @Emp				--@EmpNum
	END

IF @Severity <> 0
BEGIN
	ROLLBACK TRANSACTION
	SET @Infobar = 'Se encontro un error en el proceso, verifique los datos ingresados no procesados'
	RETURN @Severity
END
ELSE
	COMMIT TRANSACTION

--4 - luego de realizar el movimiento debo asegurar el estado de disponibilidad
SELECT @FromItemLocMrbFlag = mrb_flag, @QtyFromItemLoc = qty_on_hand
FROM itemloc WHERE loc = @FromLoc and whse = @whse and item = @Item

SELECT @ToItemLocMrbFlag = mrb_flag,@QtyToItemLoc = qty_on_hand 
FROM itemloc WHERE loc = @ToLoc and whse = @whse and item = @Item

SELECT @FromLocMrbFlag = mrb_flag FROM location WHERE loc = @FromLoc
SELECT @ToLocMrbFlag = mrb_flag FROM location WHERE loc = @ToLoc

SET @ToLocMrbFlag = ISNULL(@ToLocMrbFlag,0)
SET @QtyToItemLoc = ISNULL(@QtyToItemLoc,0)

IF  @QtyToItemLoc > 0 AND (@FromItemLocMrbFlag != @ToItemLocMrbFlag)
BEGIN
	UPDATE itemloc SET mrb_flag = @FromItemLocMrbFlag WHERE loc = @ToLoc and whse = @whse and item = @Item
END
IF  @QtyFromItemLoc = 0 AND @FromItemLocMrbFlag = 1
BEGIN
	UPDATE itemloc SET mrb_flag = 0 WHERE loc = @FromLoc and whse = @whse and item = @Item
END

EXEC dbo.CloseSessionContextSp @SessionID = @SessionID

RETURN @Severity
GO


