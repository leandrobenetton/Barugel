/****** Object:  StoredProcedure [dbo].[EXTGEN_GenerateShipmentSp]    Script Date: 01/09/2015 15:03:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXTGEN_GenerateShipmentSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXTGEN_GenerateShipmentSp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_GenerateShipmentSp]    Script Date: 01/09/2015 15:03:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[EXTGEN_GenerateShipmentSp] (
     @ProcessId			RowPointerType
    ,@ShipLoc			Loctype
    ,@Packages			PackagesType
    ,@Weight			TotalWeightType
    ,@WeightUm			UMType
    ,@InfoBar			InfoBarType OUTPUT
    ,@ShipmentStatus	ShipmentStatusType  = NULL     
    )
AS
-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_GenerateShipmentSp') IS NOT NULL
BEGIN
    DECLARE @EXTGEN_SpName SYSNAME

    SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_GenerateShipmentSp'

    -- Invoke the ETP routine, passing in (and out) this routine's parameters:
    DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @ProcessId
        ,@Shiploc
        ,@Packages     
        ,@Weight       
        ,@WeightUm     
        ,@InfoBar  OUTPUT
        ,@ShipmentStatus       

    -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
END



-- Si el ZWM_RefType is null, significa que el pick list es de pedido, por lo cual sale del EXTGEN y ejecuta el 
--SP estandar
DECLARE 
@Severity int,
@PLRefType char(1)

SET @Severity = 0

SELECT top 1 @PLRefType = ZWM_RefType
FROM pick_list pl
JOIN tmp_pick_list tpl
ON pl.pick_list_id = tpl.pick_list_id
WHERE tpl.process_id = @ProcessId

IF @PLRefType is null OR @PLRefType = 'O'
BEGIN
	SET @Severity = 1
	RETURN @Severity
END



-- End of Generic External Touch Point code.
DECLARE 
    @PickListId PickListIdType,
    @ShipmentId ShipmentIdType,
    @Status PickListStatusType,
    @CustNum CustNumType,
    @CustSeq CustSeqType,
    @Whse WhseType,
    @Loc LocType,
    @Lot LotType,
    @QtyPicked AmountType,
    @ExistingQtyPicked AmountType,
    @ShipmentLine INT,
    @ShipmentSeq INT,
    @ExistingSeq INT,
    @Sequence INT,
    @Serial SerNumType,
    @HoldLot LotType,
    @First INT,
    @PackLoc LocType,
    @Packer UserNameType,
    @RsvdNum RsvdNumType,
    @RefNum EmpJobCoPoRmaProjPsTrnNumType,
    @RefLineSuf CoLineSuffixPoLineProjTaskRmaTrnLineType,
    @RefRelease CoReleaseOperNumPoReleaseType,
    @QtyRsvd QtyUnitNoNegType,
    @RemainderQtyPicked QtyUnitNoNegType,
    @AllShipmentSeqQtyPicked QtyUnitNoNegType,
    @StillAvailForRsvd QtyUnitNoNegType,
    @Group SmallInt,
    @Group2 SmallInt,
    @Item ItemType,
    @QtyToShip QtyUnitType,
    @HadAddedToShip ListYesNoType 

BEGIN TRANSACTION    
SET @Severity = 0
SET @Group2 = -1

DECLARE pickcurs CURSOR LOCAL STATIC
FOR
SELECT tpl.pick_list_id,
    tpl.cust_num,
    tpl.cust_seq,
    tpl.whse,
    pl.STATUS,
    pl.pack_loc,
    tpl.picker,     -- no Packer in schema, use Picker - pretty much same thing
    ISNULL(tpl.pick_group,0)
FROM tmp_pick_list tpl
JOIN pick_list pl ON tpl.pick_list_id = pl.pick_list_id
WHERE process_id = @ProcessId
ORDER BY cust_num, cust_seq, whse

OPEN pickcurs
WHILE 1 = 1
BEGIN
    FETCH pickcurs
    INTO @PickListId,
        @CustNum,
        @CustSeq,
        @Whse,
        @Status,
        @PackLoc,
        @Packer,
        @Group

    IF @@FETCH_STATUS = - 1
        BREAK

    IF @Status = 'P' -- Do not include tmp records that have changed status
        -- in the case one sits on the screen
    BEGIN
       IF @Group <> @Group2
       BEGIN
          SET @ShipmentLine = 1
          INSERT INTO shipment (
            STATUS,
            cust_num,
            cust_seq,
            whse,
            ship_loc,
            packer,
            qty_packages,
            weight,
            weight_u_m
            )
          VALUES (
            'O',
            @CustNum,
            @CustSeq,
            @Whse,
            @ShipLoc,
            @Packer,
            @Packages,
            @Weight,
            @WeightUm
            )

           SET @ShipmentId = @@IDENTITY

           UPDATE shipment
           SET consignee_name = ca.NAME,
               consignee_addr##1 = ca.addr##1,
               consignee_addr##2 = ca.addr##2,
               consignee_addr##3 = ca.addr##3,
               consignee_addr##4 = ca.addr##4,
               consignee_city = ca.city,
               consignee_state = ca.STATE,
               consignee_zip = ca.zip,
               consignee_county = ca.county,
               consignee_country = ca.country,
               consignee_contact = c.contact##2,
               consignee_phone = c.phone##2,
               consignee_fax = ca.fax_num,
               consignee_tax_reg_num = c.tax_reg_num1,
               ship_code = c.ship_code,
               carrier_code  = shipcode.carrier_code,
               consignor_name = whse.NAME,
               consignor_addr##1 = whse.addr##1,
               consignor_addr##2 = whse.addr##2,
               consignor_addr##3 = whse.addr##3,
               consignor_addr##4 = whse.addr##4,
               consignor_city = whse.city,
               consignor_state = whse.STATE,
               consignor_zip = whse.zip,
               consignor_country = whse.country,
               consignor_contact = whse.contact,
               consignor_phone = whse.phone,
               consignor_fax = whse.fax_num,
               invoicee_name = corpa.NAME,
               invoicee_addr##1 = corpa.addr##1,
               invoicee_addr##2 = corpa.addr##2,
               invoicee_addr##3 = corpa.addr##3,
               invoicee_addr##4 = corpa.addr##4,
               invoicee_city = corpa.city,
               invoicee_state = corpa.STATE,
               invoicee_zip = corpa.zip,
               invoicee_county = corpa.county,
               invoicee_country = corpa.country,
               invoicee_contact = corp.contact##3,
               invoicee_phone = corp.phone##3,
               invoicee_fax = corpa.fax_num,
               invoicee_tax_reg_num = corp.tax_reg_num1,
               producer_name = whse.NAME,
               producer_addr##1 = whse.addr##1,
               producer_addr##2 = whse.addr##2,
               producer_addr##3 = whse.addr##3,
               producer_addr##4 = whse.addr##4,
               producer_city = whse.city,
               producer_state = whse.STATE,
               producer_zip = whse.zip,
               producer_country = whse.country,
               producer_contact = whse.contact,
               producer_phone = whse.phone,
               producer_fax = whse.fax_num,
               producer_tax_reg_num = whse.tax_reg_num1,
               exporter_name = whse.NAME,
               exporter_addr##1 = whse.addr##1,
               exporter_addr##2 = whse.addr##2,
               exporter_addr##3 = whse.addr##3,
               exporter_addr##4 = whse.addr##4,
               exporter_city = whse.city,
               exporter_state = whse.STATE,
               exporter_zip = whse.zip,
               exporter_country = whse.country,
               exporter_contact = whse.contact,
               exporter_phone = whse.phone,
               exporter_fax = whse.fax_num,
               exporter_tax_reg_num = whse.tax_reg_num1
           FROM shipment
           JOIN customer c ON c.cust_num = shipment.cust_num
                 AND c.cust_seq = shipment.cust_seq
           JOIN custaddr ca ON ca.cust_num = shipment.cust_num
                  AND ca.cust_seq = shipment.cust_seq
           LEFT JOIN shipcode ON shipcode.ship_code = c.ship_code
           LEFT JOIN whse ON whse.whse = shipment.whse
           LEFT JOIN customer corp ON corp.cust_num = ISNULL(ca.corp_cust, ca.cust_num)
               AND corp.cust_seq = 0
           LEFT JOIN custaddr corpa ON corpa.cust_num = ISNULL(ca.corp_cust, ca.cust_num)
               AND corpa.cust_seq = 0
           WHERE shipment.shipment_id = @ShipmentId  
           
           IF @ShipmentStatus IS NOT NULL 
           BEGIN
              IF @ShipmentStatus = 'R'
               UPDATE shipment
                    SET STATUS = @ShipmentStatus
                    WHERE shipment.shipment_id = @ShipmentId
           END
 
        END /* Group <> Group2 */
        SET @group2 = @group
    

        DECLARE picklistRefCurs CURSOR LOCAL STATIC FOR
        SELECT pick_list_ref.sequence,
               pick_list_ref.ref_num,
               pick_list_ref.ref_line_suf,
               0,
               trnitem.item
        FROM pick_list_ref
        /*join coitem 
        on coitem.co_num = pick_list_ref.ref_num and coitem.co_line = pick_list_ref.ref_line_suf and co_release = pick_list_ref.ref_release*/
        join trnitem 
        on trnitem.trn_num = pick_list_ref.ref_num and trnitem.trn_line = pick_list_ref.ref_line_suf
        WHERE pick_list_ref.pick_list_id = @PickListID
        
        OPEN picklistRefCurs
        WHILE 1 = 1
        BEGIN
            FETCH pickListRefCurs
            INTO @Sequence,
                 @RefNum,
                 @RefLineSuf,
                 @RefRelease,
                 @Item

            IF @@FETCH_STATUS = - 1
                BREAK

            IF @ShipmentId IS NOT NULL
                INSERT INTO shipment_line (shipment_id, shipment_line, pick_list_id, pick_list_ref_sequence)
                                   VALUES (@ShipmentId, @ShipmentLine, @PickListId, @Sequence)
                                   
            SET @ShipmentSeq = 0


/**********************************************************************************************************/
            DECLARE picklistloccurs CURSOR LOCAL STATIC FOR
            SELECT  lot, sum(qty_picked)
            FROM pick_list_loc
            WHERE pick_list_id = @PickListId
                AND Sequence = @Sequence
            GROUP BY lot
            ORDER BY Lot
            
            OPEN picklistLocCurs
            WHILE 1 = 1
            BEGIN
                FETCH picklistloccurs
                INTO  @lot, @QtyPicked

                IF @@FETCH_STATUS = - 1
                    BREAK
                    
                -- Get the remaind quantity that havent add to shipment.  
                SET @QtyToShip = 0
                EXEC GetPickListDetailInformationSp   @PickListId       
                                                      ,@lot        
                                                      ,@PackLoc        
                                                      ,@Sequence     
                                                      ,@qtyPicked 
                                                      ,@QtyToShip       OUTPUT
                                                      ,@InfoBar         OUTPUT
                                                      
                SET @qtyPicked = @QtyToShip     
                 
                SET @QtyRsvd = 0
                SET @RsvdNum = NULL
                SET @ExistingSeq = 0
                
                   SELECT @RsvdNum = rsvd_num,
                          @QtyRsvd = qty_rsvd
                   FROM rsvd_inv
                   WHERE rsvd_inv.loc = @PackLoc
                     AND ISNULL(rsvd_inv.lot, 1) = ISNULL(@Lot, 1)
                     AND rsvd_inv.ref_num =     @RefNum
                     AND rsvd_inv.ref_line =    @RefLineSuf
                     AND rsvd_inv.ref_release = @RefRelease

                   IF @RsvdNum is not NULL
                   BEGIN
                      SET @AllShipmentSeqQtyPicked = 0
                      SELECT @AllShipmentSeqQtyPicked = @AllShipmentSeqQtyPicked + qty_picked
                      FROM shipment_seq
                      WHERE rsvd_num = @RsvdNum 

                      SELECT qty_picked
                      FROM shipment_seq
                      WHERE rsvd_num = @RsvdNum
         
                      IF @QtyRsvd - @AllShipmentSeqQtyPicked > 0
                      BEGIN
                         SET @StillAvailForRsvd = @QtyRsvd - @AllShipmentSeqQtyPicked
                         SET @RemainderQtyPicked = @QtyPicked - @StillAvailForRsvd
                      END
                      ELSE SET @RsvdNum = NULL  --Reservation is filled
                   END

                   IF @RsvdNum IS NOT NUll  --Create Shipment_Seq for Reservation amount
                   BEGIN
                      SELECT @ExistingSeq = shipment_seq
                            ,@ExistingQtyPicked = qty_picked
                      FROM shipment_seq
                      WHERE shipment_id = @ShipmentId
                       AND shipment_line = @ShipmentLine
                       AND ISNULL(lot,0) = ISNULL(@Lot,0)
                       AND rsvd_num = @RsvdNum
                      IF @ExistingSeq = 0
                      BEGIN
                         SET @ShipmentSeq = @ShipmentSeq + 1  
                         INSERT INTO shipment_seq (shipment_id, shipment_line, shipment_seq, qty_picked, loc, lot, rsvd_num)
                         VALUES (@ShipmentId, @ShipmentLine, @ShipmentSeq, @QtyPicked, @PackLoc, @Lot, @RsvdNum)
                      END
                      ELSE --@ExistingSeq <> 0
                      BEGIN
                         UPDATE shipment_seq
                         SET qty_picked = @ExistingQtyPicked + @QtyPicked
                         WHERE shipment_id = @ShipmentId
                           AND shipment_line = @ShipmentLine
                           AND ISNULL(lot,0) = ISNULL(@Lot,0)
                           AND shipment_seq = @ExistingSeq
                           AND rsvd_num = @RsvdNum
                      END
                      -- will sum Reserved and Non Reserved Quantity in one seq, so remove the rev_num condition when filter serial number               
                      DECLARE picklistSerialCurs CURSOR LOCAL STATIC FOR
                      SELECT pick_list_serial.ser_num
                      FROM pick_list_serial
                      JOIN serial on serial.ser_num = pick_list_serial.ser_num AND serial.item = @Item
                      WHERE pick_list_serial.pick_list_id = @PickListId    AND 
                            pick_list_serial.sequence = @Sequence AND                          
                            isnull(pick_list_serial.lot, '') = isnull(@lot,'')
                      OPEN picklistSerialCurs
                      WHILE 1 = 1
                      BEGIN
                         FETCH picklistSerialCurs
                         INTO @Serial

                         IF @@FETCH_STATUS = - 1
                            BREAK

                         SET @HadAddedToShip = 0
                         EXEC ValidateSerialonShipmentSp      @PickListId   
                                                             ,@Sequence
                                                             ,@Serial             
                                                             ,@HadAddedToShip    OUTPUT
                                                             ,@InfoBar           OUTPUT
                         IF ISNULL(@HadAddedToShip,0) = 0
                         BEGIN                            
                             INSERT INTO shipment_seq_serial (shipment_id, shipment_line, shipment_seq, ser_num)
                             VALUES (@ShipmentId, @ShipmentLine, @ShipmentSeq, @Serial)
                         END
                      END
                      CLOSE pickListSerialCurs
                      DEALLOCATE PickListSerialCurs    
                      
                      SET @RemainderQtyPicked = 0
                   END /* @RsvdNum IS NOT NUll */
                   ELSE SET @RemainderQtyPicked = @QtyPicked
                   
                   --reset the reserv number
                   SET @RsvdNum = NULL
                   
                   IF @RemainderQtyPicked > 0  --Create Shipment_Seq for Non Reserved Quantity
                   BEGIN
                      SELECT @ExistingSeq = shipment_seq
                            ,@ExistingQtyPicked = qty_picked
                      FROM shipment_seq
                      WHERE shipment_id = @ShipmentId
                       AND shipment_line = @ShipmentLine
                       AND ISNULL(lot,0) = ISNULL(@Lot,0)
                       AND ISNULL(rsvd_num,0) = ISNULL(@RsvdNum,0)
                      IF @ExistingSeq = 0
                      BEGIN
                         SET @ShipmentSeq = @ShipmentSeq + 1
                         INSERT INTO shipment_seq (shipment_id, shipment_line, shipment_seq, qty_picked, loc, lot)
                         VALUES (@ShipmentId, @ShipmentLine, @ShipmentSeq, @RemainderQtyPicked, @PackLoc, @Lot)
                      END
                      ELSE
                      BEGIN
                         UPDATE shipment_seq
                         SET qty_picked = @ExistingQtyPicked + @RemainderQtyPicked
                         WHERE shipment_id = @ShipmentId
                           AND shipment_line = @ShipmentLine
                           AND ISNULL(lot,0) = ISNULL(@Lot,0)
                           AND shipment_seq = @ExistingSeq
                           AND ISNULL(rsvd_num,0) = ISNULL(@RsvdNum,0)
                      END
                      DECLARE picklistSerialCurs CURSOR LOCAL STATIC FOR
                      SELECT pick_list_serial.ser_num
                      FROM pick_list_serial
                      JOIN serial on serial.ser_num = pick_list_serial.ser_num AND serial.rsvd_num Is NULL and serial.item = @Item
                      WHERE pick_list_serial.pick_list_id = @PickListId    AND 
                            pick_list_serial.sequence = @Sequence AND                            
                            isnull(pick_list_serial.lot, '') = isnull(@lot,'')
                      OPEN picklistSerialCurs
                      WHILE 1 = 1
                      BEGIN
                         FETCH picklistSerialCurs
                         INTO @Serial

                         IF @@FETCH_STATUS = - 1
                            BREAK

                         SET @HadAddedToShip = 0
                         EXEC ValidateSerialonShipmentSp      @PickListId   
                                                             ,@Sequence
                                                             ,@Serial             
                                                             ,@HadAddedToShip    OUTPUT
                                                             ,@InfoBar           OUTPUT
                         IF ISNULL(@HadAddedToShip,0) = 0
                         BEGIN   
                             INSERT INTO shipment_seq_serial (shipment_id, shipment_line, shipment_seq, ser_num)
                             VALUES (@ShipmentId, @ShipmentLine, @ShipmentSeq, @Serial)
                         END
                      END
                      CLOSE pickListSerialCurs
                      DEALLOCATE PickListSerialCurs    
   
                   END /* @RemainderQtyPicked > 0 */
            END
            
            SET @ShipmentLine = @ShipmentLine + 1
            
            CLOSE picklistLocCurs
            DEALLOCATE picklistLocCurs
            
        END
        CLOSE pickListRefCurs
        DEALLOCATE pickListRefCurs
        
        UPDATE pick_list
        SET pick_list.STATUS = 'A'
        FROM pick_list
        JOIN shipment_line sl ON sl.pick_list_id = pick_list.pick_list_id
        WHERE sl.shipment_id = @ShipmentId
    
    END  /* @Status = 'P' */
END
CLOSE pickcurs
DEALLOCATE pickcurs

DELETE
FROM tmp_pick_list
WHERE process_id = @ProcessId

SET @Severity = @@error

IF @severity = 0
BEGIN
    SET @infobar = NULL

    EXEC @Severity = MsgAppSp @Infobar OUTPUT,
        'I=CmdSucceeded',
        '@%generate'

   SET @Severity = 0
   COMMIT TRANSACTION
   RETURN @Severity
END
ELSE 
BEGIN
  EXEC dbo.RaiseErrorSp @Infobar, @Severity, 1
  ROLLBACK TRANSACTION
  RETURN @Severity
END
GO


