/****** Object:  StoredProcedure [dbo].[EXTGEN_PickConfirmationCompleteSp]    Script Date: 01/09/2015 15:02:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXTGEN_PickConfirmationCompleteSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXTGEN_PickConfirmationCompleteSp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_PickConfirmationCompleteSp]    Script Date: 01/09/2015 15:02:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[EXTGEN_PickConfirmationCompleteSp] (
   @ProcessId RowpointerType,
   @PPickListID PickListIDType,
   @RecordDiff ListYesNoType,
   @Infobar InfoBarType OUTPUT
   )
AS

-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_PickConfirmationCompleteSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_PickConfirmationCompleteSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @ProcessId
         , @PPickListID
         , @RecordDiff
         , @Infobar OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.




-- Si el ZWM_RefType is null, significa que el pick list es de pedido, por lo cual sale del EXTGEN y ejecuta el 
--SP estandar
DECLARE 
@Severity int,
@PLRefType char(1)

SET @Severity = 0

SELECT @PLRefType = ZWM_RefType FROM pick_list WHERE pick_list_id = @PPickListID
IF @PLRefType is null OR @PLRefType = 'O'
BEGIN
	SET @Severity = 1
	RETURN @Severity
END


-- ---------------------------------------------------------------------
-- Initialize variables.
-- ---------------------------------------------------------------------
DECLARE @PickListID PickListIDtype,
   @PickListSeq SequenceType,
   @PickRefNum CoJobProjTrnNumType,
   @PickRefLine CoLineSuffixProjTaskTrnLineType,
   @PickRefRelease CoReleaseOperNumType,
   @PickItem ItemType,
   @PickItemDesc DescriptionType,
   @PickQtyToPick QtyUnitType,
   @PickQtyPicked QtyUnitType,
   @PickLoc LocType,
   @PickLot LotType,
   @PickSerial SerNumType,
   @PickLotTracked ListYesNoType,
   @PickSerTracked ListYesNoType,
   @QtyRemain QtyUnitType,
   @RPCo CoNumType,
   @RPCoLine CoLineType,
   @RPPickLoc LocType,
   @RPQtyToPick QtyUnitType,
   @RPQtyPicked QtyUnitType,
   @RPPackLoc LocType,
   @RPRemToPick QtyUnitType,
   @RPRefRowPointer RowPointerType,
   @RPPickRowPointer RowPointerType,
   @PickSerRowPointer RowPointerType,
   @RPRefPickSeq PickListSequenceType,
   @RPRefQtyPicked QtyUnitType,
   @RPRefQtyToPick QtyUnitType,
   @RPRefRemToPick QtyUnitType,
   @RPWhse WhseType,
   @PType NVARCHAR(2),
   @PDate Datetype,
   @PQty QtyUnitType,
   @POverPick INT,
   @PResNum RsvdNumType,
   @PResQty QtyUnitType,
   @PickResFlag ListYesNoType,
   @PQtyOnHand QtyUnitType,
   @PTotalQtyRes QtyUnitType,
   @ItemlocRowPointer RowPointerType,
   @trnitemUM UMType,
   @trnitemRowPointer RowPointerType,
   @TmpSerID RowPointerType,
   @PickLocTotal QtyUnitType,
   @UserName LongListType,
   @AddQty QtyUnitType,
   @SubQty QtyUnitType,
   @PSerialResNum RsvdNumType,
   @ItemReservable ListYesNoType,
   @PickRowpointer RowPointerType,
   @PickGroup SequenceType,
   @NegFlag ListYesNoType

-- Set vars for routine
SET @PType = 'P' -- Pick/Pack/Ship Move Indicator
SET @PDate = dbo.GetSiteDate(getdate()) -- Posting Date
SET @POverPick = 0
SET @UserName = dbo.UserNameSp()

BEGIN TRANSACTION

IF @PLRefType = 'T'
BEGIN
	DECLARE TMP_PickCurs CURSOR LOCAL STATIC
	FOR
	SELECT tmp_pick_list_loc.pick_list_id,
		   pick_list_ref.sequence,
		   tmp_pick_list_loc.loc,
		   tmp_pick_list_loc.lot,
		   tmp_pick_list_loc.qty_pick,
		   tmp_pick_list_loc.qty_to_pick,
		   tmp_pick_list_loc.ser_num,
		   tmp_pick_list_loc.ser_tracked,
		   tmp_pick_List_loc.rowpointer,
		   tmp_pick_list_loc.pick_group,
		   tmp_pick_list_loc.item
	FROM tmp_pick_list_loc
	INNER join  pick_list_ref ON pick_list_ref.pick_list_id = tmp_pick_list_loc.pick_list_id
							AND (pick_list_ref.sequence = tmp_pick_list_loc.pick_group
								 OR tmp_pick_list_loc.pick_group IS NULL) 
	JOIN trnitem ON trnitem.trn_num = pick_list_ref.ref_num
	   AND trnitem.trn_line = pick_list_ref.ref_line_suf
	   --AND trnitem.co_release = pick_list_ref.ref_release
		AND trnitem.item = tmp_pick_list_loc.item
	where tmp_pick_list_loc.pick_list_id = @PPickListID
	   AND ISNULL(tmp_pick_list_loc.qty_pick, 0) > 0
END--@PLRefType = 'T'

-- -------------------------------------
-- Define and begin loop through cursor
-- -------------------------------------
OPEN TMP_PickCurs

WHILE 1 = 1
BEGIN
   FETCH TMP_PickCurs
   INTO @PickListID,
      @PickListSeq,
      @PickLoc,
      @PickLot,
      @PickQtyPicked,
      @PickQtyToPick,
      @PickSerial,
      @PickSerTracked,
      @PickRowpointer,
      @PickGroup,
      @PickItem
   IF @@FETCH_STATUS != 0
      BREAK

   IF @PickSerTracked = '1'
   BEGIN
      IF EXISTS (SELECT 1 FROM tmp_pick_list_loc
                 WHERE tmp_pick_list_loc.pick_list_id = @PickListID AND
                       tmp_pick_list_loc.loc = @PickLoc AND
                       ISNULL(tmp_pick_list_loc.lot,'') = ISNULL(@PickLot,'')AND
                       tmp_pick_list_loc.ser_num = @PickSerial AND
                       tmp_pick_list_loc.RowPointer <> @PickRowpointer AND 
                       tmp_pick_list_loc.item = @PickItem ) -- different item could use the same serial number
      BEGIN
         EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
          , 'E=Exist2'
          , '@Serial'
          , '@Item'
          , @PickItem
          , '@Serial'
          , @PickSerial

        GOTO ERROR_RETURN
      END
   END

   IF @PickGroup IS NULL
   BEGIN
      IF Exists (SELECT 1 FROM pick_list_loc
                 WHERE pick_list_loc.pick_list_id = @PickListID AND
                       pick_list_loc.sequence = @PickListSeq AND
                       pick_list_loc.loc = @PickLoc AND
                       ISNULL(pick_list_loc.lot,'') = ISNULL(@PickLot,''))
          UPDATE pick_list_loc
             SET qty_to_pick = qty_to_pick + @PickQtyPicked
          FROM pick_list_loc
          WHERE pick_list_loc.pick_list_id = @PickListID AND
                    pick_list_loc.sequence = @PickListSeq AND
                    pick_list_loc.loc = @PickLoc AND
                    ISNULL(pick_list_loc.lot,'') = ISNULL(@PickLot,'')
      ELSE
         INSERT INTO pick_list_loc (
               pick_list_id,
               sequence,
               loc,
               lot,
               qty_to_pick,
               qty_picked
               )
          VALUES (@PickListID, @PickListSeq, @PickLoc, @PickLot, @PickQtyPicked, 0)
    END /* @PickGroup IS NULL */

    IF @PickGroup IS NOT NULL
    BEGIN
      IF NOT Exists (SELECT 1 FROM pick_list_loc
                 WHERE pick_list_loc.pick_list_id = @PickListID AND
                       pick_list_loc.sequence = @PickListSeq AND
                       pick_list_loc.loc = @PickLoc AND
                       ISNULL(pick_list_loc.lot,'') = ISNULL(@PickLot,''))
         INSERT INTO pick_list_loc (
               pick_list_id,
               sequence,
               loc,
               lot,
               qty_to_pick,
               qty_picked
               )
          VALUES (@PickListID, @PickListSeq, @PickLoc, @PickLot, @PickQtyToPick, 0)
   END /* @PickGroup IS NOT NULL And Assign Location is unhecked*/
END
CLOSE TMP_PickCurs
DEALLOCATE TMP_PickCurs

-- -------------------------------------
-- Define cursor for items in temp table
-- -------------------------------------
DECLARE TMP_PickCurs CURSOR LOCAL STATIC
FOR
SELECT pick_list_id,
   pick_group,
   ref_num,
   ref_line_suf,
   ref_release,
   item,
   description,
   qty_to_pick,
   qty_pick,
   loc,
   lot,
   ser_num,
   lot_tracked,
   ser_tracked
FROM tmp_pick_list_loc
WHERE process_id = @ProcessId
   AND pick_list_id = @PPickListID
   AND ISNULL(qty_pick, 0) > 0

-- -------------------------------------
-- Define and begin loop through cursor
-- -------------------------------------
OPEN TMP_PickCurs

WHILE 1 = 1
BEGIN
   FETCH TMP_PickCurs
   INTO @PickListID,
      @PickListSeq,
      @PickRefNum,
      @PickRefLine,
      @PickRefRelease,
      @PickItem,
      @PickItemDesc,
      @PickQtyToPick,
      @PickQtyPicked,
      @PickLoc,
      @PickLot,
      @PickSerial,
      @PickLotTracked,
      @PickSerTracked

   IF @@FETCH_STATUS != 0
      BREAK

   SET @POverPick = 0
   SET @QtyRemain = @PickQtyPicked
   SET @ItemReservable = 0
   select @ItemReservable = item.reservable
   from item
   where item.item = @PickItem

   -- New Recs need to have sequences aligned
   IF @PickListSeq IS NULL
   BEGIN
      SET @PickListSeq = (
            SELECT TOP 1 pick_list_ref.sequence
            FROM pick_list_ref
            LEFT OUTER JOIN trnitem ON trnitem.trn_num = pick_list_ref.ref_num
               AND trnitem.trn_line = pick_list_ref.ref_line_suf
               --AND trnitem.co_release = pick_list_ref.ref_release
            WHERE pick_list_ref.pick_list_id = @PickListID
               AND trnitem.item = @PickItem
               --AND ((pick_list_ref.qty_to_pick - pick_list_ref.qty_picked) > 0)
            )
   END

   -- To process all transactions for this Record
   WHILE @QtyRemain > 0
   BEGIN
      -- To Process only the pick_list_loc records
     WHILE @QtyRemain > 0
      BEGIN
         -- Look for matching pick_list_loc's
        IF @PLRefType = 'T'
		BEGIN
			SELECT TOP 1 @RPRefRowPointer = pick_list_ref.RowPointer,
				@RPPickRowPointer = pick_list_loc.RowPointer,
				@RPQtyToPick = pick_list_loc.qty_to_pick,
				@RPQtyPicked = pick_list_loc.qty_picked,
				@RPRefQtyToPick = pick_list_ref.qty_to_pick,
				@RPRefQtyPicked = pick_list_ref.qty_picked,
				@RPPickLoc = pick_list_loc.loc,
				@RPPackLoc = pick_list.pack_loc,
				@RPRemToPick = (pick_list_loc.qty_to_pick - pick_list_loc.qty_picked),
				@RPWhse = pick_list.whse,
				@PickRefNum = pick_list_ref.ref_num,
				@PickRefLine = pick_list_ref.ref_line_suf,
				@PickRefRelease = pick_list_ref.ref_release
			 FROM pick_list_ref
			 RIGHT OUTER JOIN pick_list_loc
			 LEFT OUTER JOIN pick_list ON pick_list_loc.pick_list_id = pick_list.pick_list_id ON pick_list_ref.pick_list_id = pick_list_loc.pick_list_id
				AND pick_list_ref.sequence = pick_list_loc.sequence LEFT OUTER JOIN item
			 RIGHT OUTER JOIN trnitem ON item.item = trnitem.item ON pick_list_ref.ref_num = trnitem.trn_num
				AND pick_list_ref.ref_line_suf = trnitem.trn_line
				--AND pick_list_ref.ref_release = trnitem.co_release
			 WHERE pick_list_loc.pick_list_id = @PickListID
			   AND pick_list_loc.sequence = ISNULL(@PickListSeq, pick_list_loc.sequence)
				AND trnitem.item = @PickItem
				AND (
				   (
					  pick_list_loc.loc = @PickLoc
					  AND ISNULL(@PickLotTracked, 0) = 0
					  )
				   OR (
					  pick_list_loc.loc = @PickLoc
					  AND pick_list_loc.lot = @PickLot
					  AND ISNULL(@PickLotTracked, 0) = 1
					  )
				   )
				AND (
				   (
					  (pick_list_loc.qty_to_pick - pick_list_loc.qty_picked) > 0
					  AND @POverPick = 0
					  )
				   OR (@POverPick = 1)
				   )
         END --@PLRefType = 'T'

         -- If no additional records found and @QtyRemain > 0 BREAK out of loop
         IF @RPRefRowPointer IS NULL
            OR @RPPickRowPointer IS NULL
            BREAK

         -- Calculate the amount of pick to be posted
         IF @RPRemToPick >= @QtyRemain
            OR @POverPick = 1
         BEGIN
            SET @PQty = @QtyRemain
            SET @QtyRemain = 0
         END
         ELSE
         BEGIN
            SET @PQty = @RPRemToPick
            SET @QtyRemain = @QtyRemain - @RPRemToPick
         END

         SET @Severity = 0
         -- Check for Inventory Location
         SET @ItemlocRowPointer = NULL

         IF @RPWhse IS NULL
            SELECT @RPWhse = invparms.def_whse
            FROM invparms with (readuncommitted)

         --  If the TO loc does not exist for this item and whse, add it.
         SELECT @ItemlocRowPointer = itemloc.RowPointer
         FROM itemloc WITH (READUNCOMMITTED)
         WHERE whse = @RPWhse
            AND item = @PickItem
            AND loc = @RPPickLoc

         -- Add location if it does not exist
         IF @ItemlocRowPointer IS NULL
         BEGIN
            EXEC @Severity = dbo.ItemLocAddSp @Whse = @RPWhse,
               @Item = @PickItem,
               @Loc = @RPPickLoc,
               @UcFlag = 0,
               @UnitCost = 0,
               @MatlCost = 0,
               @LbrCost = 0,
               @FovhdCost = 0,
               @VovhdCost = 0,
               @OutCost = 0,
               @SetPermFlag = 0,
               @RowPointer = @ItemlocRowPointer OUTPUT,
               @Infobar = @Infobar OUTPUT

            IF @Severity <> 0
                   GOTO ERROR_RETURN
         END

         SET @ItemlocRowPointer = NULL

         --If the from loc does not exist for this item and whse, add it.
         SELECT @ItemlocRowPointer = itemloc.RowPointer
         FROM itemloc
         WHERE whse = @RPWhse
            AND item = @PickItem
            AND loc = @RPPackLoc

         -- Add location if it does not exist
         IF @ItemlocRowPointer IS NULL
         BEGIN
            EXEC @Severity = dbo.ItemLocAddSp @Whse = @RPWhse,
               @Item = @PickItem,
               @Loc = @RPPackLoc,
               @UcFlag = 0,
               @UnitCost = 0,
               @MatlCost = 0,
               @LbrCost = 0,
               @FovhdCost = 0,
               @VovhdCost = 0,
               @OutCost = 0,
               @SetPermFlag = 0,
               @RowPointer = @ItemlocRowPointer OUTPUT,
               @Infobar = @Infobar OUTPUT

            IF @Severity <> 0
               GOTO ERROR_RETURN
         END

         -- Check for Serials - If exists then
         IF ISNULL(@PickSerTracked, 0) = 1
         BEGIN
            IF NOT EXISTS (
                  SELECT *
                  FROM pick_list_serial
                  WHERE pick_list_serial.pick_list_id = @PickListID
                     AND pick_list_serial.sequence = @PickListSeq
                     AND pick_list_serial.loc = @PickLoc
                     AND isnull(pick_list_serial.lot, dbo.LowInt()) = isnull(@PickLot, dbo.LowInt())
                     AND pick_list_serial.ser_num = @PickSerial
                  )
            BEGIN

               INSERT INTO pick_list_serial (
                  pick_list_id,
                  sequence,
                  loc,
                  lot,
                  ser_num
                  )
               SELECT @PickListID,
                  @PickListSeq,
                  @PickLoc,
                  @PickLot,
                  @PickSerial
            END

            SELECT @PickSerRowPointer = pick_list_serial.RowPointer
            FROM pick_list_serial WITH (READUNCOMMITTED)
            WHERE pick_list_serial.pick_list_id = @PickListID
               AND pick_list_serial.sequence = @PickListSeq
               AND pick_list_serial.loc = @PickLoc
               AND isnull(pick_list_serial.lot, dbo.LowInt()) = isnull(@PickLot, dbo.LowInt())
               AND pick_list_serial.ser_num = @PickSerial

            -- Remove tmp_ser for this session
            SET @TmpSerID = dbo.TmpSerId() -- Needed to create new ID make serials work

            DELETE tmp_ser
            WHERE tmp_ser.SessionID = @TmpSerID

            -- Populate the tmp_ser to move serial
            EXEC dbo.SerialSaveSp @PickSerial,
               @TmpSerID,
               NULL,
               @Infobar
            IF @Severity <> 0
               GOTO ERROR_RETURN

         END -- Serials Section

         SET @AddQty = @PQty
         SET @SubQty = @PQty

         -- Do Inventory and Reserved qty checks and throw error if not enough available
         -- Check Reservations

         SELECT @PResNum = NULL,
               @PResQty = 0

         SELECT @PResNum = rsvd_inv.rsvd_num,
                  @PResQty = ISNULL(rsvd_inv.qty_rsvd,0)
         FROM rsvd_inv
         WHERE rsvd_inv.item = @PickItem
                  AND rsvd_inv.loc = @PickLoc
               AND ISNULL(rsvd_inv.lot, 0) = ISNULL(@PickLot, 0)
               AND rsvd_inv.ref_num =     @PickRefNum
               AND rsvd_inv.ref_line =    @PickRefLine
               AND rsvd_inv.ref_release = @PickRefRelease

         IF @PickSerTracked = 1
         BEGIN
            SELECT @PResNum = rsvd_num
            FROM serial
            WHERE ser_num = @PickSerial and item = @PickItem

            IF @PResNum IS NOT NULL
              SELECT @AddQty = 0,
                     @SubQty = 0
         END

  
         -- Check On Hand Qty
         IF @PickLotTracked = 1
         BEGIN

            SELECT @PQtyOnHand = qty_on_hand,
                @PTotalQtyRes = qty_rsvd
            FROM lot_loc
            WHERE item = @PickItem
                AND loc = @PickLoc
                and whse = @RPWhse
                AND lot = @PickLot
                
            SET @PQtyOnHand = ISNULL(@PQtyOnHand,0)
            SET @PTotalQtyRes = ISNULL(@PTotalQtyRes,0)                
            SELECT @NegFlag = neg_flag from invparms 
            IF (@PQtyOnHand - @PTotalQtyRes) + @PResQty < @PQty And @NegFlag <> 1
            BEGIN
                EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT, 'E=IsCompareCantSet4'
                          , '@lot_loc.qty_on_hand'
                          , @PQtyOnHand
                          , @PQty
                          , '@lot_loc'
                          , '@lot_loc.whse'
                          , @RPWhse
                          , '@lot_loc.item'
                          , @PickItem
                          , '@lot_loc.loc'
                          , @PickLoc
                          , '@lot_loc.lot'
                          , @PickLot 

            END
         END
         ELSE
         BEGIN
            SELECT @PQtyOnHand = qty_on_hand,
                @PTotalQtyRes = qty_rsvd
            FROM itemloc
            WHERE item = @PickItem
                AND loc = @PickLoc
                and whse = @RPWhse
            SELECT @NegFlag = neg_flag from invparms 
            IF (@PQtyOnHand - @PTotalQtyRes) + @PResQty < @PQty And @NegFlag <> 1
            BEGIN
                EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT, 'E=IsCompareCantSet3'
                          , '@itemloc.qty_on_hand'
                          , @PQtyOnHand
                          , @PQty
                          , '@itemloc'
                          , '@itemloc.whse'
                          , @RPWhse
                          , '@itemloc.item'
                          , @PickItem
                          , '@itemloc.loc'
                          , @PickLoc
     
            END
         END                          

         IF @Severity <> 0
            GOTO ERROR_RETURN

 -- Deal with inventory reservations
         SELECT TOP 1 @PickResFlag= (CASE WHEN inventory_reservation_process_step ='P' Then 1 ELSE 0 END)
         FROM invparms with (readuncommitted)
-- ISSUE 162915 move the reserved quantity before move the inventory
         IF @PResNum IS NOT NULL
         BEGIN 
           EXEC @Severity = dbo.MvRsvdCoSp
                           @PResQty, --@PQty
                           @PickItem,--@PItem
                           @RPWhse,--@PWhse
                           @PickLoc,--@FrLoc
                           @PickLot,--@FrLot
                           @RPPackLoc,--@ToLoc
                           @PickLot,--@ToLot
                           NULL,--@PWorkkey
                           @Infobar OUTPUT,--@Infobar
                           NULL,--@FrImportDocId
                           NULL,--@ToImportDocId
                           @PickRefNum,--@PRsvdInvRefNum
                           @PickRefLine,--@PRsvdInvRefLine
                           @PickRefRelease,--@PRsvdInvRefRelease
                           NULL -- @PRsvdInvRsvdNum

           IF @Severity <> 0
               GOTO ERROR_RETURN
           IF  @PickSerTracked = 0
           BEGIN
               IF ISNULL(@PResQty,0) > @PQty
               BEGIN
                 SET @AddQty = 0
                 SET @SubQty = 0
               END
               ELSE
               BEGIN
                 SET @AddQty = @PQty - ISNULL(@PResQty,0)
                 SET @SubQty = @PQty - ISNULL(@PResQty,0)
               END
           END
         END
         
         EXEC @Severity = dbo.MvPostSp @PType, --@PType
            @PDate, --@PDate
            @PQty, --@PQty
            @PickItem, --@PItem
            @RPWhse, --@FromWhse
            @PickLoc, --@FromLoc
            @PickLot, --@FromLot
            @RPWhse, --@ToWhse
            @RPPackLoc, --@ToLoc
            @PickLot, --@ToLot
            1, --@PZeroCost
            NULL, --@PTrnNum
            NULL, --@PTrnLine
            NULL, --@PTransNum
            NULL, --@PRsvdNum
            'I', --@PStat
            NULL, --@PRefNum
            NULL, --@PRefLineSuf
            NULL, --@PRefRelease
            NULL, --@RefStr
            NULL, --@PUnitCost
            NULL, --@PMatlCost
            NULL, --@PLbrCost
            NULL, --@PFovhdCost
            NULL, --@PVovhdCost
            NULL, --@POutCost
            NULL, --@PTotCost
            @Infobar OUTPUT --@Infobar
            --END

         IF @Severity <> 0
            GOTO ERROR_RETURN

         IF @PResNum IS NOT NULL OR @PickResFlag = 1
         BEGIN
            -- Remove tmp_ser for this session
            SET @TmpSerID = dbo.TmpSerId() -- Needed to create new ID make serials work

            DELETE tmp_ser
            WHERE tmp_ser.SessionID = @TmpSerID

            IF @PickSerTracked = 1
            BEGIN
               -- Populate the tmp_ser to move serial
               EXEC dbo.SerialSaveSp @PickSerial,
                   @TmpSerID,
                   NULL,
                   @Infobar
               IF @Severity <> 0
                  GOTO ERROR_RETURN
            END /*  IF @PickSerTracked = 1 */
        
		IF @ItemReservable = 1
            BEGIN
               IF @PickResFlag = 1 AND (ISNULL(@PResQty,0) < @PQty OR (ISNULL(@PickSerTracked, 0) = 1) AND @PResNum IS NULL)-- Add on to reservations if not enough was reserved
               BEGIN
                  IF @PLRefType = 'T'
	    		  BEGIN
					  SELECT @trnitemUM = trnitem.u_m 
					  FROM trnitem  
					  WHERE trn_num = @PickRefNum AND trn_line = @PickRefLine --AND co_release = @PickRefRelease
                  END--@PLRefType = 'T'
                     
                  SET @PResQty = @PQty - ISNULL(@PResQty,0)
                  IF ISNULL(@PickSerTracked, 0) = 1
                     SET @PResQty = 1

                  EXEC  @Severity = dbo.ZWM_AddResvSp
                                    @PickItem,-- @Item
                                    @RPWhse,-- @Whse
                                    @PickRefNum,-- @RefNum
                                    @PickRefLine,-- @RefLine
                                    @PickRefRelease,-- @RefRelease
                                    @RPPackLoc,-- @Loc
                                    @PickLot,-- @Lot
                                    @PResQty, -- @Qty
                                    NULL,-- @ConvFactor
                                    @trnitemUM,-- @UM
                                    0,-- @AutoRsvd
                                    NULL,-- @ProgramName
                                    @PResNum OUTPUT,-- @RsvdNum    OUTPUT
                                    @Infobar OUTPUT,-- @Infobar   OUTPUT
                                    @TmpSerID,-- @SessionID NULL
                                    NULL,-- @ImportDocId
                                    NULL,-- @ParmsSite SiteType
                                    'T'
                                    

                  IF @Severity <> 0
                     GOTO ERROR_RETURN
                  SET @AddQty = 0
               END
            END  -- @ItemReservable
            DELETE FROM tmp_ser WHERE tmp_ser.SessionID = @TmpSerID
         END


         -- -------------------------------------
         -- Cleanup and Recalc of Qty's
         -- -------------------------------------
         -- Update the pick_list_loc and pick_list_ref to add the posted pick
         UPDATE pick_list_loc
         SET pick_list_loc.qty_picked = pick_list_loc.qty_picked + @PQty
         --SET pick_list_loc.qty_picked = @RPQtyPicked + @PQty
         WHERE pick_list_loc.RowPointer = @RPPickRowPointer

         UPDATE pick_list_ref
         SET pick_list_ref.qty_picked = pick_list_ref.qty_picked + @PQty
         --SET pick_list_ref.qty_picked = @RPRefQtyPicked + @PQty
         WHERE pick_list_ref.RowPointer = @RPRefRowPointer


             -- Update itemloc and lot_loc
            IF @SubQty > 0
            BEGIN
                -- decrease original locs
                update itemloc
                set assigned_to_be_picked_qty = assigned_to_be_picked_qty - @SubQty
                where whse = @RPWhse
                  AND item = @PickItem
                  AND loc = @PickLoc
                  AND assigned_to_be_picked_qty > 0

                if @Picklot is not null
                update lot_loc
                set assigned_to_be_picked_qty = assigned_to_be_picked_qty - @SubQty
                where whse = @RPWhse
                  AND item = @PickItem
                  AND loc = @PickLoc
                  and lot = @PickLot
                  AND assigned_to_be_picked_qty > 0
            END
        IF @ItemReservable = 0
        BEGIN              
            IF @AddQty > 0
            BEGIN
                -- increase new locs
                update itemloc
                set assigned_to_be_picked_qty = assigned_to_be_picked_qty + @AddQty
                where whse = @RPWhse
                  AND item = @PickItem
                  AND loc = @RPPackLoc

                if @Picklot is not null
                update lot_loc
                set assigned_to_be_picked_qty = assigned_to_be_picked_qty + @AddQty
                where whse = @RPWhse
                  AND item = @PickItem
                  AND loc = @RPPackLoc
                  and lot = @PickLot
            END
        END
             IF ISNULL(@PickSerTracked, 0) = 1
             BEGIN
                UPDATE pick_list_serial
                SET pick_list_serial.picked = 1
                WHERE pick_list_serial.RowPointer = @PickSerRowPointer
                UPDATE Serial
                   SET assigned_to_be_picked = CASE WHEN  rsvd_num IS NULL THEN 1 ELSE 0 END
                 FROM serial
                WHERE item = @PickItem and ser_num = @PickSerial
             END


         -- Get trnitem RowPointer
         IF @PLRefType = 'T'
	     BEGIN
			 SELECT TOP 1 @trnitemUM = trnitem.u_m,
				@trnitemRowPointer = trnitem.RowPointer
			 FROM trnitem
			 INNER JOIN pick_list_ref ON trnitem.trn_num = pick_list_ref.ref_num
				AND trnitem.trn_line = pick_list_ref.ref_line_suf
				--AND trnitem.co_release = pick_list_ref.ref_release
			 WHERE pick_list_ref.RowPointer = @RPRefRowPointer
		 END--@PLRefType = 'T'

		/*
         -- Update trnitem pick_date and qty_picked
         UPDATE trnitem
         SET trnitem.pick_date = @PDate,
            trnitem.qty_picked = trnitem.qty_picked + @PQty
         WHERE trnitem.RowPointer = @trnitemRowPointer	
		*/--Transfer does not have qty_picked column


            -- End of cleanup
      END -- End of loop through pick_list_loc

      -- Nothing left to do Break out of big loop and continue to next record
      IF @QtyRemain = 0
         BREAK

      -- Check pick_list_loc to see if there are available recs to OverPick
      IF @PLRefType = 'T'
      BEGIN
		  SELECT TOP 1 @RPPickRowPointer = pick_list_loc.RowPointer
		  FROM pick_list_ref
		  RIGHT OUTER JOIN pick_list_loc
		  LEFT OUTER JOIN pick_list ON pick_list_loc.pick_list_id = pick_list.pick_list_id ON pick_list_ref.pick_list_id = pick_list_loc.pick_list_id
			 AND pick_list_ref.sequence = pick_list_loc.sequence LEFT OUTER JOIN item
		  RIGHT OUTER JOIN trnitem ON item.item = trnitem.item ON pick_list_ref.ref_num = trnitem.trn_num
			 AND pick_list_ref.ref_line_suf = trnitem.trn_line
			 --AND pick_list_ref.ref_release = trnitem.co_release 
			 WHERE pick_list_loc.pick_list_id = @PickListID
			 AND trnitem.item = @PickItem
			 AND (
				(
				   pick_list_loc.loc = @PickLoc
				   AND @PickLotTracked = 0
				   )
				OR (
				   pick_list_loc.loc = @PickLoc
				   AND pick_list_loc.lot = @PickLot
				   AND @PickLotTracked = 1
				   )
				)
      END--@PLRefType = 'T'

      IF @RPPickRowPointer IS NOT NULL
      BEGIN
         -- If we make it to the bottom of here there are remaining unpicked qty's.
         -- We will set an Overpick flag to loop back and over pick the remaining qty.
         SET @POverPick = 1
      END
      ELSE
      BEGIN
         -- Continue if Remaining Qty > 0 and no more available pick_list_loc records
         -- Look for a pick_list_ref record with remaining qtys
         IF @PLRefType = 'T'
         BEGIN
			 SELECT TOP 1 @RPRefPickSeq = pick_list_ref.sequence,
				@RPRefRowPointer = pick_list_ref.RowPointer,
				@RPRefQtyToPick = pick_list_ref.qty_to_pick,
				@RPRefQtyPicked = pick_list_ref.qty_picked,
				@RPRefRemToPick = (pick_list_ref.qty_to_pick - pick_list_ref.qty_picked)
			 FROM item
			 RIGHT OUTER JOIN trnitem ON item.item = trnitem.item
			 RIGHT OUTER JOIN pick_list_ref ON trnitem.trn_num = pick_list_ref.ref_num
				AND trnitem.trn_line = pick_list_ref.ref_line_suf
				--AND trnitem.co_release = pick_list_ref.ref_release
				--AND trnitem.co_release = pick_list_ref.ref_release
			 WHERE pick_list_ref.pick_list_id = @PickListID
				AND trnitem.item = @PickItem
				AND (
				   (
					  (pick_list_ref.qty_to_pick - pick_list_ref.qty_picked) > 0
					  AND @POverPick = 0
					  )
				   OR (@POverPick = 1)
				   )
         END --@PLRefType = 'T'

         -- If a pick_list_ref record is found
         IF @RPRefRowPointer IS NOT NULL
         BEGIN
            -- Check for existing records and remove from qty
            SET @PickLocTotal = @RPRefRemToPick - ISNULL((
                     SELECT SUM(pick_list_loc.qty_to_pick)
                     FROM pick_list_loc
                     WHERE pick_list_loc.pick_list_id = @PickListID
                        AND pick_list_loc.sequence = @RPRefPickSeq
                     ), 0)

            IF @RPRefRemToPick < 0
               SET @RPRefRemToPick = 0

            -- Insert a new pick_list_loc to be processed on the next round based on Unpicked Refs
            INSERT INTO pick_list_loc (
               pick_list_id,
               sequence,
               loc,
               lot,
               qty_to_pick,
               qty_picked
               )
            SELECT @PickListID,
               @RPRefPickSeq,
               @PickLoc,
               @PickLot,
               @RPRefRemToPick,
               0
         END -- End of Pick List Ref Record
      END -- END OF OVERPICK
   END -- End of Large Loop

END -- End of Cursor Loop


CLOSE TMP_PickCurs
DEALLOCATE TMP_PickCurs

-- Update pick_list status to 'P'icked if all qty picked
UPDATE pick_list
   SET pick_list.STATUS = 'P',
      pick_list.pick_date = @PDate
WHERE pick_list.pick_list_id = @PickListID
   AND NOT EXISTS (
               SELECT *
               FROM pick_list_loc
               WHERE pick_list_loc.pick_list_id = @PickListID
                  AND (qty_to_pick - qty_picked) > 0
               )
   AND NOT EXISTS (
               SELECT *
               FROM pick_list_ref
               WHERE pick_list_ref.pick_list_id = @PickListID
                  AND qty_picked = 0
               )

UPDATE pick_list
   SET authorizer = @UserName
WHERE pick_list.pick_list_id = @PickListID



-- Build Message to return
ERROR_RETURN:

IF ISNULL(@Severity,0) < 1
BEGIN
  EXEC dbo.MsgAppSp @Infobar OUTPUT
      , 'I=CmdSucceeded'
      , '@!process'
  COMMIT TRANSACTION
END
ELSE
   ROLLBACK TRANSACTION


RETURN ISNULL(@Severity,0)

GO


