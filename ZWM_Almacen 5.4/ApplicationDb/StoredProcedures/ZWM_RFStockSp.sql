/****** Object:  StoredProcedure [dbo].[ZWM_RFStockSp]    Script Date: 01/20/2015 15:16:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_RFStockSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_RFStockSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_RFStockSp]    Script Date: 01/20/2015 15:16:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ZWM_RFStockSp] (
     @Site				SiteType
	,@UserName			UserNameType	= NULL
	,@item				ItemType		= NULL
    ,@whse				WhseType		= NULL
    ,@loc				LocType			= NULL
    ,@Type				char(1)
    ,@Infobar			InfobarType     = NULL OUTPUT
)
AS

   -- Check fOR existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp AND inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_RFStockSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_RFStockSp'
      -- Invoke the ETP routine, passing in (AND out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
			@Site
		  , @UserName
		  , @item
		  , @Whse
		  , @loc
		  , @Type
		  , @Infobar         OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this stANDard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.

--Inicio de Sesion
DECLARE	@return_value int,
		@sessionId            RowPointerType

SET @UserName = isnull(@UserName,'sa')

EXEC	@return_value = [dbo].[InitSessionContextWithUserSp]
		@ContextName = 'ZWM',
		@UserName = @UserName,
		@SessionID = @SessionID OUTPUT,
		@Site = @Site

--Solo para implementacion Barugel Azulay
DECLARE @BAR FlagNyTYpe
IF (SELECT count(*) FROM zwm_parms WHERE customer = 'BAR') > 0
	Set @BAR = 1 

DECLARE 
	@Severity int
	,@ExisteReg int
	,@LotTracked int
	
SET @Severity = 0

------------------------------ SET NULLs
IF LEN(LTRIM(@item)) = 0 SET @item = NULL
IF LEN(LTRIM(@Whse)) = 0 SET @Whse = NULL
IF LEN(LTRIM(@loc)) = 0 SET @loc = NULL
------------------------------ SET NULLs

-- Si el parámetro de depósito es NULL, tomar el depósito principal, sino verifica que exista
IF @Whse IS NULL
		SELECT @Whse = def_whse FROM invparms
ELSE IF(SELECT Whse FROM Whse WHERE whse = @Whse) IS NULL
BEGIN
	SET @Infobar = 'El almacén no existe'
	SET @Severity = 16
	RETURN @severity
END

-- Si el parámetro de ubicación es NULL, tomar la ubicación de recepcion; caso contrario verificar que la ubicación exista
IF @Loc IS NOT NULL AND (SELECT loc FROM location WHERE loc = @Loc) IS NULL
	BEGIN
		SET @Infobar = 'La ubicación no existe'
		SET @Severity = 16
		RETURN @severity
END

-- Si el parámetro de ubicación es NULL, tomar la ubicación de recepcion; caso contrario verificar que la ubicación exista
IF @Item IS NOT NULL AND (SELECT item FROM item WHERE item = @item) IS NULL
	BEGIN
		SET @Infobar = 'La artículo no existe'
		SET @Severity = 16
		RETURN @severity
END

--devolucion de stock para RF Barugel
IF @Type = '1' AND @BAR = 1
	SELECT LTRIM(RTRIM(b.item)) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(b.item)))) + LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull((c.qty_on_hAND - c.qty_rsvd ),(b.qty_on_hAND - b.qty_rsvd)) AS DECIMAL(18,2)) as CHAR(10)) + a.u_m  FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.loc = @loc AND b.whse = @whse AND (b.qty_on_hAND - b.qty_rsvd) > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND  a.u_m IS NOT NULL
IF @Type = '2' AND @BAR = 1
	SELECT LTRIM(RTRIM(b.item)) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(b.item)))) + LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull(c.qty_on_hAND,b.qty_on_hAND) AS DECIMAL(18,2)) as CHAR(10)) + a.u_m  FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.loc = @loc AND b.whse = @whse AND b.qty_on_hAND > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND  a.u_m IS NOT NULL
IF @Type = '3' AND @BAR = 1
	SELECT LTRIM(RTRIM(b.item)) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(b.item)))) + LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull(dbo.ZWM_UmToStk012ConvQty(b.item,(c.qty_on_hAND - c.qty_rsvd ),1),dbo.ZWM_UmToStk012ConvQty(b.item,(b.qty_on_hAND - b.qty_rsvd),1)) AS DECIMAL(18,2)) as CHAR(10)) + a.ZWM_UmStock1 FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.loc = @loc AND b.whse = @whse AND (b.qty_on_hAND - b.qty_rsvd) > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND a.ZWM_UmStock1 IS NOT NULL
IF @Type = '4' AND @BAR = 1
	SELECT LTRIM(RTRIM(b.item)) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(b.item)))) + LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull(dbo.ZWM_UmToStk012ConvQty(b.item,(c.qty_on_hAND),1),dbo.ZWM_UmToStk012ConvQty(b.item,b.qty_on_hAND,1)) AS DECIMAL(18,2)) as CHAR(10)) + a.ZWM_UMStock1  FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.loc = @loc AND b.whse = @whse AND b.qty_on_hAND > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND a.ZWM_UmStock1 IS NOT NULL
IF @Type = '5' AND @BAR = 1
	SELECT l.loc + replicate(' ' , 11 - LEN(LTRIM(RTRIM(l.loc)))) +  LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull((c.qty_on_hAND - c.qty_rsvd ),(b.qty_on_hAND - b.qty_rsvd)) AS DECIMAL(18,2)) as CHAR(10)) + a.u_m FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.item = @item AND b.whse = @whse AND (b.qty_on_hAND - b.qty_rsvd) > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND  a.u_m IS NOT NULL
IF @Type = '6' AND @BAR = 1
	SELECT l.loc + replicate(' ' , 11 - LEN(LTRIM(RTRIM(l.loc))))  +   LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull(c.qty_on_hAND,b.qty_on_hAND) AS DECIMAL(18,2)) as CHAR(10)) + a.u_m  FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.item = @item AND b.whse = @whse AND b.qty_on_hAND > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND  a.u_m IS NOT NULL
IF @Type = '7' AND @BAR = 1
	SELECT l.loc + replicate(' ' , 11 - LEN(LTRIM(RTRIM(l.loc))))  +   LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull(dbo.ZWM_UmToStk012ConvQty(b.item,(c.qty_on_hAND - c.qty_rsvd ),1),dbo.ZWM_UmToStk012ConvQty(b.item,(b.qty_on_hAND - b.qty_rsvd),1)) AS DECIMAL(18,2)) as CHAR(10)) + a.ZWM_UmStock1  FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.item = @item AND b.whse = @whse AND (b.qty_on_hAND - b.qty_rsvd) > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND a.ZWM_UmStock1 IS NOT NULL
IF @Type = '8' AND @BAR = 1
	SELECT l.loc + replicate(' ' , 11 - LEN(LTRIM(RTRIM(l.loc))))  +  LTRIM(RTRIM(isnull(c.lot,''))) + replicate(' ' , 10 - LEN(LTRIM(RTRIM(isnull(c.lot,''))))) + CAST(CAST(isnull(dbo.ZWM_UmToStk012ConvQty(b.item,(c.qty_on_hAND),1),dbo.ZWM_UmToStk012ConvQty(b.item,b.qty_on_hAND,1)) AS DECIMAL(18,2)) as CHAR(10)) + a.ZWM_UMStock1  FROM ITEMLOC_MST b INNER JOIN ITEM_MST a on b.item = a.item LEFT JOIN lot_loc_MST c on b.whse = c.whse AND b.loc = c.loc AND b.item = c.item LEFT JOIN location_mst l on b.loc = l.loc WHERE b.item = @item AND b.whse = @whse AND b.qty_on_hAND > 0 AND (b.mrb_flag = 0 AND l.mrb_flag = 0) AND a.ZWM_UmStock1 IS NOT NULL 

--Casos restantes
IF @Type = 'L'
BEGIN
	SELECT 
	'item: '+LTRIM(itemloc.item)
	--+' '+item.description
	+' cant: '+LTRIM(Str(ISNULL(lot_loc.qty_on_hAND,itemloc.qty_on_hAND)))
	+' lote: '+LTRIM(isnull(lot_loc.lot,''))
	FROM itemloc
	INNER JOIN item on itemloc.item = item.item
	LEFT JOIN lot_loc ON lot_loc.item = itemloc.item AND lot_loc.whse = lot_loc.whse AND itemloc.loc = lot_loc.loc
	WHERE itemloc.qty_on_hAND > 0
	AND itemloc.whse = @whse AND itemloc.loc = @loc
END 
ELSE IF @Type = 'I'
BEGIN
	SELECT 
	'loc: '+LTRIM(itemloc.loc)
	+' cant: '+LTRIM(Str(ISNULL(lot_loc.qty_on_hAND,itemloc.qty_on_hAND)))
	+' lote: '+LTRIM(isnull(lot_loc.lot,''))
	FROM itemloc
	INNER JOIN item on itemloc.item = item.item
	LEFT JOIN lot_loc ON lot_loc.item = itemloc.item AND lot_loc.whse = lot_loc.whse AND itemloc.loc = lot_loc.loc
	WHERE itemloc.qty_on_hAND > 0
	AND itemloc.whse = @whse AND itemloc.item = @item
END 

EXEC dbo.CloseSessionContextSp @SessionID = @SessionID

RETURN @Severity
GO


