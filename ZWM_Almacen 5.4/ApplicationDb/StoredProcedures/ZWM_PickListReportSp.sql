/****** Object:  StoredProcedure [dbo].[ZWM_PickListReportSp]    Script Date: 01/09/2015 14:46:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_PickListReportSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_PickListReportSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_PickListReportSp]    Script Date: 01/09/2015 14:46:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ZWM_PickListReportSp] (
    --@Site				SiteType
  --, @UserName			UserNameType = NULL
   @RouteStarting		ZwmIdRouteMapType = NULL
  , @RouteEnding		ZwmIdRouteMapType = NULL
  , @PickListStarting	PickListIDType = NULL
  , @PickListEnding		PickListIDType = NULL
  --, @Infobar			InfobarType      = NULL OUTPUT
)
AS

 -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_PickListReportSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_PickListReportSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
		--@Site				
	  --, @UserName			
	   @RouteStarting		
	  , @RouteEnding		
	  , @PickListStarting	
	  , @PickListEnding		
	  --, @Infobar			OUTPUT		
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.



DECLARE	@return_value int,
		@sessionId            RowPointerType
		,@Site				SiteType
		,@UserName			UserNameType = NULL

SET @UserName = isnull(@UserName,'sa')

EXEC	@return_value = [dbo].[InitSessionContextWithUserSp]
		@ContextName = 'ZWM',
		@UserName = @UserName,
		@SessionID = @SessionID OUTPUT,
		@Site = @Site

---------------------------------------------------------------

SET @RouteStarting = ISNULL(@RouteStarting, dbo.LowString('ZwmIdRouteMapType'))
SET @RouteEnding = ISNULL(@RouteEnding, dbo.HighString('ZwmIdRouteMapType'))
SET @PickListStarting = ISNULL(@PickListStarting, dbo.LowDecimal('PickListIDType'))
SET @PickListEnding = ISNULL(@PickListEnding, dbo.HighDecimal('PickListIDType'))


SELECT 
cusa.zwm_route,
pl.ZWM_IdRouteMap,
i.item,i.description, i.u_m, i.unit_weight, i.unit_cost,
plr.qty_to_pick, plr.qty_picked, plr.ref_num, plr.ref_line_suf, plr.ref_release,
[dbo].[Zwm_UmToStk1Stk2ConvQty](i.item,plr.qty_to_pick) as Qtys,
pll.loc, pll.lot, pll.qty_to_pick as qty_to_pick_loc, pll.qty_picked as qty_picked_loc
from pick_list pl
join pick_list_ref plr
on pl.pick_list_id = plr.pick_list_id
join coitem coi
on plr.ref_num = coi.co_num and plr.ref_line_suf = coi.co_line and plr.ref_release = coi.co_release
join item i
on coi.item = i.item
join custaddr cusa
on pl.cust_num = cusa.cust_num and pl.cust_seq = cusa.cust_seq
left join pick_list_loc pll
on pll.pick_list_id = plr.pick_list_id and pll.sequence = plr.sequence
where pl.ZWM_IdRouteMap between @RouteStarting and @RouteEnding
and pl.pick_list_id between @PickListStarting and @PickListEnding
order by cusa.zwm_route

GO


