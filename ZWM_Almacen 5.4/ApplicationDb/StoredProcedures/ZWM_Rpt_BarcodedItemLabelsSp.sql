/****** Object:  StoredProcedure [dbo].[Zwm_Rpt_BarcodedItemLabelsSp]    Script Date: 01/09/2015 14:56:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Zwm_Rpt_BarcodedItemLabelsSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Zwm_Rpt_BarcodedItemLabelsSp]
GO

/****** Object:  StoredProcedure [dbo].[Zwm_Rpt_BarcodedItemLabelsSp]    Script Date: 01/09/2015 14:56:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Zwm_Rpt_BarcodedItemLabelsSp] (
    @LabelSets         smallint        = 1
   ,@DisplayLot        ListYesNoType   = 0
   ,@WarehouseStarting WhseType        = null
   ,@WarehouseEnding   WhseType        = null
   ,@ItemStarting      ItemType        = null
   ,@ItemEnding        ItemType        = null
   ,@LotStarting       LotType         = null
   ,@LotEnding         LotType         = null
   ,@GrnStarting	   GrnNumType	   = null
   ,@GrnEnding   	   GrnNumType	   = null
   ,@PoStarting	       PoNumType	   = null
   ,@PoEnding	       PoNumType	   = null
   ,@ZwmFrom		   nchar(1)		   = null
   ,@ZwmRP			   FlagNyType	   = 0		   
   ,@LabelType	       nchar(1)		   = null --Este campo no se usa en la actualidad, sirve para definir diferente formato de reporte para pallet y cajas
   ,@QtyConvType	   smallint		   = 0 --Este campo no se usa en la actualidad, sirve para definir la cantidad a imprimir para pallet y cajas
   ,@pSite             SiteType        = NULL
)
AS

-- A session context is created so session variables can be used.
DECLARE
  @RptSessionID RowPointerType

   EXEC InitSessionContextSp
     @ContextName = 'Zwm_Rpt_BarcodedItemLabelsSp'
   , @SessionID   = @RptSessionID OUTPUT
   , @Site        = @pSite



/* Section to setup for the number of times a label will print */

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_Zwm_Rpt_BarcodedItemLabelsSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_Zwm_Rpt_BarcodedItemLabelsSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      EXEC @EXTGEN_SpName
		@LabelSets         
	   ,@DisplayLot        
	   ,@WarehouseStarting 
	   ,@WarehouseEnding   
	   ,@ItemStarting      
	   ,@ItemEnding        
	   ,@LotStarting       
	   ,@LotEnding         
	   ,@GrnStarting	   
	   ,@GrnEnding   	   
	   ,@PoStarting	       
	   ,@PoEnding	       
	   ,@ZwmFrom		   
	   ,@ZwmRP			   
	   ,@LabelType	       
	   ,@QtyConvType	   
	   ,@pSite             
 
      IF @@TRANCOUNT > 0
         COMMIT TRANSACTION
      EXEC dbo.CloseSessionContextSp @SessionID = @RptSessionID
      -- ETP routine must take over all desired functionality of this standard routine:
      RETURN
   END
   -- End of Generic External Touch Point code.

DECLARE
@return_value	int
,@Severity		int
,@Infobar InfobarType

DECLARE @LotGenExp As Smallint

SELECT @LotGenExp = invparms.lot_gen_exp
From invparms

SET @LabelSets = ISNULL(@LabelSets, 1)
SET @DisplayLot = ISNULL(@DisplayLot, 0)
SET @WarehouseStarting = ISNULL(@WarehouseStarting, dbo.LowString('WhseType'))
SET @WarehouseEnding = ISNULL(@WarehouseEnding, dbo.HighString('WhseType'))
SET @ItemStarting = ISNULL(@ItemStarting, dbo.LowString('ItemType'))
SET @ItemEnding = ISNULL(@ItemEnding, dbo.HighString('ItemType'))

SET @LotStarting = Case @LotGenExp
   WHEN 0 THEN ISNULL(@LotStarting, dbo.LowString('LotType'))
   else ISNULL(dbo.ExpandKyByType('LotType', @LotStarting), dbo.LowString('LotType'))
   END
SET @LotEnding = Case @LotGenExp
   WHEN 0 THEN ISNULL(@LotEnding, dbo.HighString('LotType'))
   else ISNULL(dbo.ExpandKyByType('LotType', @LotEnding), dbo.HighString('LotType'))
   END
   
----- nuevo
SET @GrnStarting = ISNULL(@GrnStarting, dbo.LowString('GrnNumType'))
SET @GrnEnding = ISNULL(@GrnEnding, dbo.HighString('GrnNumType'))
SET @PoStarting = ISNULL(@PoStarting, dbo.LowString('PoNumType'))
SET @PoEnding = ISNULL(@PoEnding, dbo.HighString('PoNumType'))

DECLARE @ReportSet TABLE(
Item			ItemType
,Description	descriptionType
,LotTracked		FlagNyType
,iLCount		smallint
,Lot			LotType NULL
,rdate			DateType NULL
,rPo			PoNumType NULL
,rPol			PoLineType NULL
,rPor			PoReleaseType NULL
,rGrn			GrnNumType NULL
,rGrnl			GrnLineType NULL
)

Declare @iCount as smallint
Declare @CountTable TABLE (iLCount smallint NOT NULL)

Declare
@item		ItemType
, @lot		LotType
, @qty		QtyUnitNoNegType
, @tdate	DateType
, @Po		PoNumType
, @Pol		PoLineType
, @Por		PoReleaseType
, @Grn		GrnNumType
, @Grnl		GrnLineType

DECLARE
 @QtyStk2	QtyUnitType
, @UMStk2	UMType
, @QtyStk1	QtyUnitType
, @UMStk1	UMType
, @QtyStkStd QtyUnitType
, @UMStd	UMType
, @ixLabelSets   smallint

IF @ZwmFrom = 'W'
BEGIN
	Set @iCount = 1
	DELETE FROM @CountTable

	While @iCount <= @LabelSets
	Begin
	  INSERT INTO @CountTable (iLCount) Values (@iCount)
	  Set @iCount = @iCount + 1
	End
	
	Insert into @ReportSet (item,description,lottracked,iLCount,Lot)
	SELECT item.item, item.description, item.lot_tracked, iLCount, NULL as Lot
	FROM item JOIN itemloc ON itemloc.item = item.item CROSS JOIN @CountTable
	WHERE
	  item.item BETWEEN @ItemStarting AND @ItemEnding
	  AND itemloc.whse BETWEEN @WarehouseStarting and @WarehouseEnding
	  AND (item.lot_tracked = 0 or @DisplayLot = 0)
	  AND itemloc.qty_on_hand > 0
	
	Insert into @ReportSet (item,description,lottracked,iLCount,Lot)
	select item.item, item.description, item.lot_tracked, iLCount, lot_loc.lot
	FROM item
	  JOIN itemloc ON itemloc.item = item.item AND itemloc.whse BETWEEN @WarehouseStarting and @WarehouseEnding
	  LEFT OUTER JOIN lot_loc ON lot_loc.item = item.item
	                             AND lot_loc.loc = itemloc.loc
	                             AND lot_loc.whse BETWEEN @WarehouseStarting and @WarehouseEnding
	                             AND lot_loc.lot BETWEEN @LotStarting AND @LotEnding
	  CROSS JOIN @CountTable
	WHERE
	  item.item BETWEEN @ItemStarting AND @ItemEnding
	  AND (item.lot_tracked = 1 AND @DisplayLot = 1)
	  AND itemloc.qty_on_hand > 0
	  AND lot_loc.qty_on_hand > 0
END
ELSE IF @ZwmFrom = 'I'
BEGIN

	Set @iCount = 1
	DELETE FROM @CountTable

	While @iCount <= @LabelSets
	Begin
	  INSERT INTO @CountTable (iLCount) Values (@iCount)
	  Set @iCount = @iCount + 1
	End
	
	Insert into @ReportSet (item,description,lottracked,iLCount,Lot)
	SELECT item.item, item.description, item.lot_tracked, iLCount, NULL as Lot
	FROM item 
		CROSS JOIN @CountTable
	WHERE
	  item.item BETWEEN @ItemStarting AND @ItemEnding
	  AND (item.lot_tracked = 0 or @DisplayLot = 0)
	
	Insert into @ReportSet (item,description,lottracked,iLCount,Lot)
	select item.item, item.description, item.lot_tracked, iLCount, lot.lot
	FROM item JOIN lot ON lot.item = item.item
		CROSS JOIN @CountTable
	WHERE
	  item.item BETWEEN @ItemStarting AND @ItemEnding
	  AND lot.lot BETWEEN @LotStarting AND @LotEnding
	  AND (item.lot_tracked = 1 AND @DisplayLot = 1)
END
--Recepcion desde GRN, posterior a recepcion
ELSE IF @ZwmFrom = 'G' AND @ZwmRP = 1
BEGIN
	
	DECLARE LabelCursor CURSOR LOCAL STATIC FOR

	Select mt.item, mt.lot, mt.qty, mt.trans_date, poi.po_num, poi.po_line, poi.po_release, grnl.grn_num, grnl.grn_line
	from matltran mt
	join poitem poi on poi.po_num = mt.ref_num and poi.po_line = mt.ref_line_suf and poi.po_release = mt.ref_release
	join po po on poi.po_num = po.po_num
	join grn_line grnl on grnl.po_num = poi.po_num and grnl.po_line = poi.po_line and grnl.po_release = poi.po_release
	where mt.trans_type = 'R' and mt.ref_type = 'P'
	and grnl.grn_num BETWEEN @GrnStarting AND @GrnEnding
	and mt.whse BETWEEN @WarehouseStarting and @WarehouseEnding
	and mt.item BETWEEN @ItemStarting AND @ItemEnding
	and ((mt.lot BETWEEN @LotStarting AND @LotEnding) OR mt.lot is null)

	OPEN LabelCursor

	WHILE 1=1
	BEGIN

	FETCH LabelCursor INTO 
				@item
				, @lot
				, @qty
				, @tdate
				, @Po
				, @Pol
				, @Por
				, @Grn
				, @Grnl

		IF @@FETCH_STATUS <> 0 -- El valor cero es cuando pudo leer un registro, cuando es EOF regresa <> 0
          BREAK      -- Para salir del While BEGIN END
          
        SET @ixLabelSets = 0

		IF @LabelType is null
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		ELSE IF @LabelType = 'B'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		ELSE IF @LabelType = 'P'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTagPallet) from item where item = @item and ZWM_UMQtyByTagPallet > 0

		IF @ixLabelSets = 0
		BEGIN
			EXEC 	@return_value = [dbo].[ZWM_UmToStk1Stk2ConvQtySp]
				@Item = @item,
				@QtyToBeConverted = @qty,
				@Type = @QtyConvType,
				@QtyStk2 = @QtyStk2 OUTPUT,
				@UMStk2 = @UMStk2 OUTPUT,
				@QtyStk1 = @QtyStk1 OUTPUT,
				@UMStk1 = @UMStk1 OUTPUT,
				@QtyStkStd = @QtyStkStd OUTPUT,
				@UMStd = @UMStd OUTPUT,
				@Infobar = @Infobar OUTPUT
				
				IF @LabelType is null
					SET @ixLabelSets = @QtyStk2 + @QtyStk1 + @QtyStkStd
				IF @LabelType = 'P'
					SET @ixLabelSets = @QtyStk2
				ELSE IF @LabelType = 'B'
					SET @ixLabelSets = @QtyStk1
		END
			
		Set @iCount = 1
		DELETE FROM @CountTable

		While @iCount <= @LabelSets * @ixLabelSets
		Begin
		  INSERT INTO @CountTable (iLCount) Values (@iCount)
		  Set @iCount = @iCount + 1
		End
		
		Insert into @ReportSet (item,description,lottracked,iLCount,Lot,rdate,rPo,rPol,rPor,rGrn,rGrnl)	
		SELECT item.item, item.description, item.lot_tracked, iLCount, NULL as Lot,@tdate,@Po,@Pol,@Por,@Grn,@Grnl
		FROM item 
			CROSS JOIN @CountTable
		WHERE
		  item.item = @item
		  AND (item.lot_tracked = 0 or @DisplayLot = 0)
	
		Insert into @ReportSet (item,description,lottracked,iLCount,Lot,rdate,rPo,rPol,rPor,rGrn,rGrnl)
		select item.item, item.description, item.lot_tracked, iLCount, @lot,@tdate,@Po,@Pol,@Por,@Grn,@Grnl
		FROM item
			CROSS JOIN @CountTable
		WHERE
		  item.item = @item
		  AND (item.lot_tracked = 1 AND @DisplayLot = 1)
		  
	END
	CLOSE LabelCursor
	DEALLOCATE LabelCursor	
END
--Recepcion desde PO, posterior a recepcion
ELSE IF @ZwmFrom = 'P' AND @ZwmRP = 1
BEGIN

	DECLARE LabelCursor CURSOR LOCAL STATIC FOR

	Select mt.item, mt.lot, mt.qty, mt.trans_date, poi.po_num, poi.po_line, poi.po_release
	from matltran mt
	join poitem poi on poi.po_num = mt.ref_num and poi.po_line = mt.ref_line_suf and poi.po_release = mt.ref_release
	join po po on poi.po_num = po.po_num
	where mt.trans_type = 'R' and mt.ref_type = 'P'
	and poi.po_num BETWEEN @PoStarting AND @PoEnding
	and mt.whse BETWEEN @WarehouseStarting and @WarehouseEnding
	and mt.item BETWEEN @ItemStarting AND @ItemEnding
	and ((mt.lot BETWEEN @LotStarting AND @LotEnding) OR mt.lot is null)

	OPEN LabelCursor

	WHILE 1=1
	BEGIN

	FETCH LabelCursor INTO 
				@item
				, @lot
				, @qty
				, @tdate
				, @Po
				, @Pol
				, @Por

		IF @@FETCH_STATUS <> 0 -- El valor cero es cuando pudo leer un registro, cuando es EOF regresa <> 0
          BREAK      -- Para salir del While BEGIN END
          
        SET @ixLabelSets = 0

		IF @LabelType is null
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		IF @LabelType = 'B'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		ELSE IF @LabelType = 'P'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTagPallet) from item where item = @item and ZWM_UMQtyByTagPallet > 0

		IF @ixLabelSets = 0
		BEGIN
			EXEC 	@return_value = [dbo].[ZWM_UmToStk1Stk2ConvQtySp]
				@Item = @item,
				@QtyToBeConverted = @qty,
				@type =  @QtyConvType,
				@QtyStk2 = @QtyStk2 OUTPUT,
				@UMStk2 = @UMStk2 OUTPUT,
				@QtyStk1 = @QtyStk1 OUTPUT,
				@UMStk1 = @UMStk1 OUTPUT,
				@QtyStkStd = @QtyStkStd OUTPUT,
				@UMStd = @UMStd OUTPUT,
				@Infobar = @Infobar OUTPUT
				
				IF @LabelType is null
					SET @ixLabelSets = @QtyStk2 + @QtyStk1 + @QtyStkStd
				IF @LabelType = 'P'
					SET @ixLabelSets = @QtyStk2
				ELSE IF @LabelType = 'B'
					SET @ixLabelSets = @QtyStk1
		END
			
		Set @iCount = 1
		DELETE FROM @CountTable

		While @iCount <= @LabelSets * @ixLabelSets
		Begin
		  INSERT INTO @CountTable (iLCount) Values (@iCount)
		  Set @iCount = @iCount + 1
		End
		
		Insert into @ReportSet (item,description,lottracked,iLCount,Lot,rdate,rPo,rPol,rPor)	
		SELECT item.item, item.description, item.lot_tracked, iLCount, NULL as Lot,@tdate,@Po,@Pol,@Por
		FROM item 
			CROSS JOIN @CountTable
		WHERE
		  item.item = @item
		  AND (item.lot_tracked = 0 or @DisplayLot = 0)
	
		Insert into @ReportSet (item,description,lottracked,iLCount,Lot,rdate,rPo,rPol,rPor,rGrn,rGrnl)
		select item.item, item.description, item.lot_tracked, iLCount, @lot,@tdate,@Po,@Pol,@Por,@Grn,@Grnl
		FROM item
			CROSS JOIN @CountTable
		WHERE
		  item.item = @item
		  AND (item.lot_tracked = 1 AND @DisplayLot = 1)
		  
	END
	CLOSE LabelCursor
	DEALLOCATE LabelCursor	
END
--Recepcion desde GRN, anterior a recepcion
ELSE IF @ZwmFrom = 'G' AND @ZwmRP = 0
BEGIN

	DECLARE LabelCursor CURSOR LOCAL STATIC FOR

	Select poi.item, grnl.qty_shipped_conv*(poi.qty_ordered/poi.qty_ordered_conv), poi.po_num, poi.po_line, poi.po_release, grnl.grn_num, grnl.grn_line
	from poitem poi
	join po po on poi.po_num = po.po_num
	join grn_line grnl on grnl.po_num = poi.po_num and grnl.po_line = poi.po_line and grnl.po_release = poi.po_release
	where grnl.grn_num BETWEEN @GrnStarting AND @GrnEnding
	and isnull(poi.whse,po.whse) BETWEEN @WarehouseStarting and @WarehouseEnding
	and poi.item BETWEEN @ItemStarting AND @ItemEnding

	OPEN LabelCursor

	WHILE 1=1
	BEGIN

	FETCH LabelCursor INTO 
				@item
				, @qty
				, @Po
				, @Pol
				, @Por
				, @Grn
				, @Grnl

		IF @@FETCH_STATUS <> 0 -- El valor cero es cuando pudo leer un registro, cuando es EOF regresa <> 0
          BREAK      -- Para salir del While BEGIN END
          
        SET @ixLabelSets = 0

		IF @LabelType is null
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		IF @LabelType = 'B'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		ELSE IF @LabelType = 'P'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTagPallet) from item where item = @item and ZWM_UMQtyByTagPallet > 0

		IF @ixLabelSets = 0
		BEGIN
			EXEC 	@return_value = [dbo].[ZWM_UmToStk1Stk2ConvQtySp]
				@Item = @item,
				@QtyToBeConverted = @qty,
				@type =  @QtyConvType,
				@QtyStk2 = @QtyStk2 OUTPUT,
				@UMStk2 = @UMStk2 OUTPUT,
				@QtyStk1 = @QtyStk1 OUTPUT,
				@UMStk1 = @UMStk1 OUTPUT,
				@QtyStkStd = @QtyStkStd OUTPUT,
				@UMStd = @UMStd OUTPUT,
				@Infobar = @Infobar OUTPUT
				
				IF @LabelType is null
					SET @ixLabelSets = @QtyStk2 + @QtyStk1 + @QtyStkStd
				IF @LabelType = 'P'
					SET @ixLabelSets = @QtyStk2
				ELSE IF @LabelType = 'B'
					SET @ixLabelSets = @QtyStk1
		END
			
		Set @iCount = 1
		DELETE FROM @CountTable

		While @iCount <= @LabelSets * @ixLabelSets
		Begin
		  INSERT INTO @CountTable (iLCount) Values (@iCount)
		  Set @iCount = @iCount + 1
		End
		
		Insert into @ReportSet (item,description,lottracked,iLCount,Lot,rPo,rPol,rPor,rGrn,rGrnl)	
		SELECT item.item, item.description, item.lot_tracked, iLCount, NULL as Lot,@Po,@Pol,@Por,@Grn,@Grnl
		FROM item 
			CROSS JOIN @CountTable
		WHERE
		  item.item = @item		  

	END
	CLOSE LabelCursor
	DEALLOCATE LabelCursor	
END
--Recepcion desde PO, anterior a recepcion
ELSE IF @ZwmFrom = 'P' AND @ZwmRP = 0
BEGIN

	DECLARE LabelCursor CURSOR LOCAL STATIC FOR

	Select poi.item, poi.qty_ordered, poi.po_num, poi.po_line, poi.po_release
	from poitem poi
	join po po on poi.po_num = po.po_num
	where po.po_num BETWEEN @PoStarting AND @PoEnding
	and isnull(poi.whse,po.whse) BETWEEN @WarehouseStarting and @WarehouseEnding
	and poi.item BETWEEN @ItemStarting AND @ItemEnding

	OPEN LabelCursor

	WHILE 1=1
	BEGIN

	FETCH LabelCursor INTO 
				@item
				, @qty
				, @Po
				, @Pol
				, @Por

		IF @@FETCH_STATUS <> 0 -- El valor cero es cuando pudo leer un registro, cuando es EOF regresa <> 0
          BREAK      -- Para salir del While BEGIN END
          
        SET @ixLabelSets = 0

		IF @LabelType is null
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		IF @LabelType = 'B'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTag) from item where item = @item and ZWM_UMQtyByTag > 0
		ELSE IF @LabelType = 'P'
			Select @ixLabelSets = Ceiling(@qty/ZWM_UMQtyByTagPallet) from item where item = @item and ZWM_UMQtyByTagPallet > 0

		IF @ixLabelSets = 0
		BEGIN
			EXEC 	@return_value = [dbo].[ZWM_UmToStk1Stk2ConvQtySp]
				@Item = @item,
				@QtyToBeConverted = @qty,
				@type =  @QtyConvType,
				@QtyStk2 = @QtyStk2 OUTPUT,
				@UMStk2 = @UMStk2 OUTPUT,
				@QtyStk1 = @QtyStk1 OUTPUT,
				@UMStk1 = @UMStk1 OUTPUT,
				@QtyStkStd = @QtyStkStd OUTPUT,
				@UMStd = @UMStd OUTPUT,
				@Infobar = @Infobar OUTPUT
				
				IF @LabelType is null
					SET @ixLabelSets = @QtyStk2 + @QtyStk1 + @QtyStkStd
				IF @LabelType = 'P'
					SET @ixLabelSets = @QtyStk2
				ELSE IF @LabelType = 'B'
					SET @ixLabelSets = @QtyStk1
		END

		Set @iCount = 1
		DELETE FROM @CountTable

		While @iCount <= @LabelSets * @ixLabelSets
		Begin
		  INSERT INTO @CountTable (iLCount) Values (@iCount)
		  Set @iCount = @iCount + 1
		End
		
		Insert into @ReportSet (item,description,lottracked,iLCount,Lot,rPo,rPol,rPor)	
		SELECT item.item, item.description, item.lot_tracked, iLCount, NULL as Lot,@Po,@Pol,@Por
		FROM item 
			CROSS JOIN @CountTable
		WHERE
		  item.item = @item		  

	END
	CLOSE LabelCursor
	DEALLOCATE LabelCursor	
END



Select * from @ReportSet

EXEC CloseSessionContextSp @SessionID = @RptSessionID


GO


