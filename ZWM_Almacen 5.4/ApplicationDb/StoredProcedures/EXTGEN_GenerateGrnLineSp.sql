IF (EXISTS(SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[EXTGEN_GenerateGrnLineSp]') AND [type]='P'))
DROP PROCEDURE [dbo].[EXTGEN_GenerateGrnLineSp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_GenerateGrnLineSp]    Script Date: 10/01/2014 17:49:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/* $Header: /ApplicationDB/Stored Procedures/EXTGEN_GenerateGrnLineSp.sp 13    1/25/13 2:11p Dmcwhorter $ */
/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2010 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
*************************************************************** 
*/
/* $Archive: /ApplicationDB/Stored Procedures/EXTGEN_GenerateGrnLineSp.sp $
 *
 * SL8.04 13 157687 Dmcwhorter Fri Jan 25 14:11:44 2013
 * System is allowed to generate GRN lines into an Approved GRN in Generate Goods Receiving Note Lines
 * 157687 - A GRN Line can only be generated for a GRN with a status of In Process.
 *
 * SL8.04 12 151685 Cjin2 Tue Aug 28 03:28:14 2012
 * Cannot Generate GRN Lines for Non Inventory Item
 * 151685: For Non-inventory Items, it still used the UM set in PO line
 *
 * SL8.02 11 rs4588 Dahn Thu Mar 04 13:13:14 2010
 * RS4588 Copyright header changes.
 *
 * SL8.01 10 rs3953 Vlitmano Tue Aug 26 16:53:10 2008
 * RS3953 - Changed a Copyright header?
 *
 * SL8.01 9 rs3953 Vlitmano Mon Aug 18 15:15:31 2008
 * Changed a Copyright header information(RS3959)
 *
 * SL8.00 8 RS2968 nkaleel Fri Feb 23 02:42:17 2007
 * changing copyright information
 *
 * SL8.00 7 98069 hcl-jmishra Tue Jan 30 07:07:04 2007
 * Display incorrect Shipped Q'ty in Goods Receiving Note Lines when there is UM conversion for Item
 * Issue 97857
 * Modified the code of SP so as to get correct shipped quantity after UM conversion
 *
 * SL8.00 6 RS2968 prahaladarao.hs Thu Jul 13 03:01:12 2006
 * RS 2968, Name change CopyRight Update.
 *
 * SL8.00 5 RS2968 prahaladarao.hs Tue Jul 11 07:56:59 2006
 * RS 2968
 * Name change CopyRight Update.
 *
 * SL7.05 4 91818 NThurn Fri Jan 06 15:21:55 2006
 * Inserted standard External Touch Point call.  (RS3177)
 *
 * SL7.04 3 91150 hcl-singind Wed Dec 28 00:15:25 2005
 * Issue #: 91150.
 * Added "WITH (READUNCOMMITTED)" to item Select Statement.
 *
 * $NoKeywords: $
 */
CREATE PROCEDURE [dbo].[EXTGEN_GenerateGrnLineSp] (
     @VendNum      VendNumType
   , @GrnNum       GrnNumType
   , @PoNum        PoNumType
   , @PoLine       PoLineType
   , @PoRelease    PoReleaseType
   , @RcvdDate     DateType
   , @DateSeq      DateSeqType
   , @FromPo       FlagNyType
   , @Infobar      InfobarType OUTPUT
   ) AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_GenerateGrnLineSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_GenerateGrnLineSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @VendNum
         , @GrnNum
         , @PoNum
         , @PoLine
         , @PoRelease
         , @RcvdDate
         , @DateSeq
         , @FromPo
         , @Infobar OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
 
/* Create from as/rules/grn-line.p create-grn-line procedure */

DECLARE
     @Severity                INT
   , @LastGrnLine             GrnLineType
   , @TItemUM                 UMType
   , @UomConvFactor           UMConvFactorType

SET @Infobar = NULL
SET @Severity    = 0
SET @LastGrnLine = 0

DECLARE
     @PoitemRowPointer        RowPointerType
   , @PoitemUM                UMType
   , @PoitemItem              ItemType
   , @PoitemQtyOrdered        QtyUnitNoNegType
   , @PoitemQtyReceived       QtyUnitNoNegType
   , @ItemRowPointer          RowPointerType
   , @ItemUM                  UMType
   , @GrnLineRowPointer       RowPointerType
   , @GrnLineVendNum          VendNumType
   , @GrnLineGrnNum           GrnNumType
   , @GrnLineGrnLine          GrnLineType
   , @GrnLineQtyRec           QtyUnitType
   , @GrnLineQtyShippedConv   QtyUnitType
   , @PoRcptRowPointer        RowPointerType
   , @PoRcptQtyReceived       QtyUnitType

IF EXISTS (SELECT TOP 1 * FROM grn_hdr 
           WHERE grn_hdr.grn_num = @GrnNum AND
                 grn_hdr.vend_num = @VendNum AND
                 grn_hdr.stat <> 'I')
BEGIN
   EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
      , 'E=MustCompare1'
      , '@grn_hdr.stat'
      , '@:GrnStatus:I'
      , '@grn_hdr'
      , '@grn_hdr.grn_num'
      ,  @GrnNum

   RETURN @Severity
END

--Modificado por Leandro Silva y Martin Ferrari
--DECLARE @GRNLineExists FlagNyType
--SET @GRNLineExists = 0
--select @GRNLineExists = 1 from grn_line where grn_line.grn_num = @GrnNum
--IF @GRNLineExists = 1
--	BEGIN
--		set @Infobar = 'Ya existen líneas de GRN, no se permite procesar'
--		set @Severity = 1
--	END

WHILE @Severity = 0
BEGIN
   DECLARE EXTGEN_GenerateGrnLineSpCrs CURSOR LOCAL STATIC FOR
   SELECT
        grn_line.RowPointer
      , grn_line.vend_num
      , grn_line.grn_num
      , grn_line.grn_line
   FROM grn_line
   WHERE grn_line.grn_num = @GrnNum AND
         grn_line.vend_num = @VendNum
   OPEN EXTGEN_GenerateGrnLineSpCrs
   WHILE @Severity = 0
   BEGIN /* DEPTH:1 */
      FETCH EXTGEN_GenerateGrnLineSpCrs INTO
        @GrnLineRowPointer
      , @GrnLineVendNum
      , @GrnLineGrnNum
      , @GrnLineGrnLine
      IF @@FETCH_STATUS = -1
          BREAK

      SET @LastGrnLine = @GrnLineGrnLIne
   END
   CLOSE      EXTGEN_GenerateGrnLineSpCrs
   DEALLOCATE EXTGEN_GenerateGrnLineSpCrs

   SET @GrnLineGrnLine = @LastGrnLine + 1

   IF @GrnLineGrnLine = 10000
   BEGIN
      EXEC @Severity = MsgAppSp @Infobar OUTPUT
         , 'E=CmdFailed3'
         , '@%generate'
         , '@grn_line'
         , '@grn_line.vend_num'
         , @GrnLineVendNum
         , '@grn_line.grn_num'
         , @GrnLineGrnNum
         , '@grn_line.grn_line'
         , @GrnLineGrnLine
      BREAK
   END

   SET @PoitemRowPointer  = NULL
   SET @PoitemUM          = NULL
   SET @TItemUM           = NULL
   SET @PoitemItem        = NULL
   SET @PoitemQtyOrdered  = 0
   SET @PoitemQtyReceived = 0
   SET @GrnLineQtyRec     = 0
   SET @GrnLineQtyShippedConv = 0

   SELECT
        @PoitemRowPointer  = poitem.RowPointer
      , @PoitemUM          = poitem.u_m
      , @PoitemItem        = poitem.item
      , @PoitemQtyOrdered  = poitem.qty_ordered
      , @PoitemQtyReceived = poitem.qty_received
   FROM poitem
   WHERE poitem.po_num = @PoNum
     AND poitem.po_line = @PoLine
     AND poitem.po_release = @PoRelease

   IF @PoitemRowPointer IS NULL
   BEGIN
      SET @Severity = 16
      BREAK
   END

   INSERT INTO grn_line (
      vend_num,
      grn_num,
      grn_line,
      po_num,
      po_line,
      po_release,
      u_m)
   VALUES (
      /* vend_num   */ @VendNum,
      /* grn_num    */ @GrnNum,
      /* grn_line   */ @GrnLineGrnLine,
      /* po_num     */ @PoNum,
      /* po_line    */ @PoLine,
      /* po_release */ @PoRelease,
      /* u_m        */ @PoitemUM
      )

   IF @FromPo <> '1'
   BEGIN
      SET @PoRcptRowPointer = NULL
      SET @PoRcptQtyReceived = 0

      SELECT
           @PoRcptRowPointer = po_rcpt.RowPointer,
           @PoRcptQtyReceived = po_rcpt.qty_received
      FROM po_rcpt
      WHERE po_rcpt.po_num = @PoNum
        AND po_rcpt.po_line = @PoLine
        AND po_rcpt.po_release = @PoRelease
        AND po_rcpt.rcvd_date = @RcvdDate
        AND po_rcpt.date_seq = @DateSeq

      IF @PoRcptRowPointer IS NULL
      BEGIN
         SET @Severity = 16
         BREAK
      END

      SET @ItemRowPointer = NULL
      SET @ItemUM         = NULL

      SELECT
           @ItemRowPointer = item.RowPointer
         , @ItemUM         = item.u_m
      FROM item WITH (READUNCOMMITTED)
      WHERE item.item = @PoitemItem
      IF @ItemRowPointer IS NOT NULL
         SET @TItemUM = @ItemUM
      ELSE
         SET @TItemUM = @PoitemUM

      EXEC @Severity = GetumcfSp
           @TItemUM
         , @PoitemItem
         , @VendNum
         , 'P'
         , @UomConvFactor OUTPUT
         , @Infobar       OUTPUT

      IF @Severity <> 0
         BREAK

      SET @GrnLineQtyRec =
         dbo.UomConvQty(@PoRcptQtyReceived, @UomConvFactor, 'From Base')
   END
   ELSE
   BEGIN
      IF @PoitemRowPointer IS NOT NULL
      BEGIN
         SET @ItemRowPointer = NULL    
         SET @ItemUM         = NULL    
              
         SELECT     
           @ItemRowPointer = poitem.RowPointer    
         , @ItemUM         = poitem.u_m    
         FROM poitem    
         WHERE poitem.item = @PoitemItem   
         select @itemum  ,@PoitemItem   
         IF @ItemRowPointer IS NOT NULL     
            SET @TItemUM = @ItemUM    
    
         EXEC @Severity = GetumcfSp    
               @TItemUM  
             , @PoitemItem    
             , @VendNum    
             , 'P'    
             , @UomConvFactor OUTPUT    
             , @Infobar       OUTPUT    

      IF @Severity <> 0    
         BREAK    
         SET @GrnLineQtyShippedConv = @PoitemQtyOrdered - @PoitemQtyReceived    
         SET @GrnLineQtyShippedConv =     
         dbo.UomConvQty(@GrnLineQtyShippedConv,@UomConvFactor, 'From Base')    
         SET @TItemUM = @PoitemUM 
      END
      IF @GrnLineQtyShippedConv < 0
         SET @GrnLineQtyShippedConv = 0
   END

   UPDATE grn_line
   SET grn_line.u_m = @TItemUM,
       grn_line.qty_shipped_conv = @GrnLineQtyShippedConv,
       grn_line.qty_rec = @GrnLineQtyRec
   WHERE grn_line.vend_num = @VendNum AND
         grn_line.grn_num = @GrnNum AND
         grn_line.grn_line = @GrnLineGrnLine

   IF @FromPo <> '1'
   BEGIN
      UPDATE po_rcpt
      SET po_rcpt.grn_num = @GrnNum,
          po_rcpt.grn_line = @GrnLineGrnLine
      WHERE po_rcpt.RowPointer = @PoRcptRowPointer
   END

-- Modificado por Martin Ferrari y Leandro Silva
   UPDATE grn_line
   SET grn_line.qty_shipped_conv = poitem.ZWM_QtyShipped
   FROM poitem
   WHERE grn_line.vend_num = @VendNum AND
         grn_line.grn_num = @GrnNum AND
         grn_line.grn_line = @GrnLineGrnLine
         AND grn_line.po_num = poitem.po_num
         AND grn_line.po_line = poitem.po_line
         AND grn_line.po_release = poitem.po_release

   UPDATE poitem
   SET ZWM_QtyShipped = 0
   FROM grn_line
   WHERE grn_line.vend_num = @VendNum AND
         grn_line.grn_num = @GrnNum AND
         grn_line.grn_line = @GrnLineGrnLine
         AND grn_line.po_num = poitem.po_num
         AND grn_line.po_line = poitem.po_line
         AND grn_line.po_release = poitem.po_release
         
   BREAK
END

RETURN @Severity

GO


