/****** Object:  StoredProcedure [dbo].[EXTGEN_PickConfirmationSp]    Script Date: 01/09/2015 15:02:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXTGEN_PickConfirmationSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXTGEN_PickConfirmationSp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_PickConfirmationSp]    Script Date: 01/09/2015 15:02:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[EXTGEN_PickConfirmationSp] (
	@ProcessId RowpointerType,
	@PPickListID PickListIDType,
	@RecordDiff SMALLINT,
	@Infobar InfoBarType OUTPUT
	)
AS
-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_PickConfirmationSp') IS NOT NULL
BEGIN
	DECLARE @EXTGEN_SpName SYSNAME

	SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_PickConfirmationSp'

	-- Invoke the ETP routine, passing in (and out) this routine's parameters:
	DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
	    @ProcessId,
		@PPickListID,
		@RecordDiff,
		@Infobar OUTPUT

	-- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
END
-- End of Generic External Touch Point code.

-- Si el ZWM_RefType is null, significa que el pick list es de pedido, por lo cual sale del EXTGEN y ejecuta el 
--SP estandar
DECLARE 
@Severity int,
@PLRefType char(1)

SET @Severity = 0

SELECT @PLRefType = ZWM_RefType FROM pick_list WHERE pick_list_id = @PPickListID
IF @PLRefType is null OR @PLRefType = 'O'
BEGIN
	SET @Severity = 1
	RETURN @Severity
END


DECLARE @PickListID PickListIDtype,
	@PickListSeq PickListSequenceType,
	@PRefNum CoJobProjTrnNumType,
	@PRefLine CoLineSuffixProjTaskTrnLineType,
	@PRefRelease CoReleaseOperNumType,
	@PItem itemtype,
	@PItemDesc descriptiontype,
	@PItemUm umtype,
	@PQtyToPick qtyunittype,
	@PQtyPicked qtyunittype,
	@PLoc loctype,
	@PLot lottype,
	@PSerItemQty qtyunittype,
	@PSerItemExist qtyunittype,
	@PSerTracked SMALLINT,
	@PLotTracked SMALLINT,
	@Counter qtyunittype,
	@DefLoc loctype
	
-- Setup temp table
DECLARE @Pick TABLE (
	PickListID PickListIDtype,
	PickListSeq PickListSequenceType,
	PickRefNum CoJobProjTrnNumType,
	PickRefLine CoLineSuffixProjTaskTrnLineType,
	PickRefRelease CoReleaseOperNumType,
	PickItem itemtype,
	PickItemDesc descriptiontype,
	PickItemUm umtype,
	PickQtyToPick qtyunittype,
	PickQtyPicked qtyunittype,
	PickLoc loctype,
	PickLot lottype,
	PickSerial sernumtype,
	PickSerialized SMALLINT,
	PickLotTracked SMALLINT
	)

-- Clear all entries for this session        
DELETE tmp_pick_list_loc
WHERE process_id = @ProcessId



-- Insert the values into the routine temp picklist that are NOT serialized
IF @PLRefType = 'T'
BEGIN
	INSERT INTO @Pick
	SELECT pick_list_loc.pick_list_id,
		pick_list_loc.sequence,
		trnitem.trn_num,
		trnitem.trn_line,
		0,
		trnitem.item,
		item.description,
		item.u_m,
		pick_list_loc.qty_to_pick,
		pick_list_loc.qty_picked,
		pick_list_loc.loc,
		pick_list_loc.lot,
		'',
		item.serial_tracked,
		item.lot_tracked
	FROM item
	RIGHT OUTER JOIN trnitem ON item.item = trnitem.item
	RIGHT OUTER JOIN pick_list_loc
	LEFT OUTER JOIN pick_list_ref 
	ON pick_list_loc.pick_list_id = pick_list_ref.pick_list_id
	AND pick_list_loc.sequence = pick_list_ref.sequence 
	ON trnitem.trn_num = pick_list_ref.ref_num
	AND trnitem.trn_line = pick_list_ref.ref_line_suf
	--AND 0 = pick_list_ref.ref_release 
	WHERE pick_list_loc.pick_list_id = @PPickListID
	AND item.serial_tracked = 0
	AND pick_list_loc.qty_to_pick > pick_list_loc.qty_picked
END--@PLRefType = 'T'
    
-- Insert all pre-serialized items
IF @PLRefType = 'T'
BEGIN
	INSERT INTO @Pick
	SELECT pick_list_serial.pick_list_id,
		pick_list_serial.sequence,
		trnitem.trn_num,
		trnitem.trn_line,
		/*trnitem.co_release,*/ 0,
		trnitem.item,
		item.description,
		item.u_m,
		1,
		0,
		pick_list_serial.loc,
		pick_list_serial.lot,
		pick_list_serial.ser_num,
		item.serial_tracked,
		item.lot_tracked
	FROM pick_list_serial
	LEFT OUTER JOIN pick_list_ref ON pick_list_serial.pick_list_id = pick_list_ref.pick_list_id
		AND pick_list_serial.sequence = pick_list_ref.sequence
	LEFT OUTER JOIN item
	RIGHT OUTER JOIN trnitem ON item.item = trnitem.item ON pick_list_ref.ref_num = trnitem.trn_num
		AND pick_list_ref.ref_line_suf = trnitem.trn_line
		--AND pick_list_ref.ref_release = trnitem.trn_release 
		WHERE pick_list_serial.pick_list_id = @PPickListID
		AND ISNULL(pick_list_serial.picked, 0) = 0
END --@PLRefType = 'T'


-- Insert all refs that do not have a pick_list_loc record
IF @PLRefType = 'T'
BEGIN
	DECLARE TMP_PickRefCurs CURSOR LOCAL STATIC
	FOR
	SELECT pick_list_ref.pick_list_id,
		pick_list_ref.sequence,
		trnitem.trn_num,
		trnitem.trn_line,
		0,
		trnitem.item,
		item.description,
		item.u_m,
		pick_list_ref.qty_to_pick,
		pick_list_ref.qty_picked,
		item.serial_tracked,
		item.lot_tracked
	FROM item
	RIGHT OUTER JOIN trnitem ON item.item = trnitem.item
	RIGHT OUTER JOIN pick_list_ref ON trnitem.trn_num = pick_list_ref.ref_num
		AND trnitem.trn_line = pick_list_ref.ref_line_suf
		--AND coitem.co_release = pick_list_ref.ref_release
	WHERE pick_list_ref.pick_list_id = @PPickListID
		AND item.serial_tracked = 0
		AND ((pick_list_ref.qty_to_pick - pick_list_ref.qty_picked) > 0)
		AND NOT EXISTS (
			SELECT *
			FROM pick_list_loc
			WHERE pick_list_loc.pick_list_id = @PPickListID
				AND pick_list_loc.sequence = pick_list_ref.sequence
			)
END--@PLRefType = 'T'

-- Step through cursor and add those recs that don't exist
OPEN TMP_PickRefCurs

WHILE 1 = 1
BEGIN
	FETCH TMP_PickRefCurs
	INTO @PickListID,
		@PickListSeq,
		@PRefNum,
		@PRefLine,
		@PRefRelease,
		@PItem,
		@PItemDesc,
		@PItemUm,
		@PQtyToPick,
		@PQtyPicked,
		@PSerTracked,
		@PLotTracked

	IF @@FETCH_STATUS <> 0
		BREAK
	
	INSERT INTO @Pick
	SELECT @PPickListID,
		@PickListSeq,
		@PRefNum,
		@PRefLine,
		@PRefRelease,
		@PItem,
		@PItemDesc,
		@PItemUm,
		@PQtyToPick,
		@PQtyPicked,
		@PLoc,
		'',
		'',
		@PSerTracked,
		@PLotTracked
END
close TMP_PickRefCurs
deallocate TMP_PickRefCurs

--------- These need to be added in summary at this point 
INSERT INTO tmp_pick_list_loc (
	process_id,
	pick_list_id,
	pick_group,
	ref_num,
	ref_line_suf,
	ref_release,
	item,
	description,
	u_m,
	loc,
	qty_pick,
	qty_to_pick,
	lot,
	ser_num,
	ser_tracked,
	lot_tracked,
	selected,
	rank
	)
SELECT @ProcessId,
	PickListID,
	PickListSeq,
	PickRefNum,
	PickRefLine,
	PickRefRelease,
	PickItem,
	PickItemDesc,
	PickItemUm,
	PickLoc,
	SUM((PickQtyToPick - PickQtyPicked)),
	SUM(PickQtyToPick),
	PickLot,
	PickSerial,
	PickSerialized,
	PickLotTracked,
	1,
	1
FROM @Pick
GROUP BY PickListID,
	PickListSeq,	
	PickRefNum,
	PickRefLine,
	PickRefRelease,
	PickItem,
	PickItemDesc,
	PickItemUm,
	PickLoc,
	PickLot,
	PickSerial,
	PickSerialized,
	PickLotTracked

-- Clear @Pick
DELETE @Pick


-- define cursor for serialized items
IF @PLRefType = 'T'
BEGIN
	DECLARE TMP_PickCurs CURSOR LOCAL STATIC
	FOR
	SELECT pick_list_loc.pick_list_id,
		pick_list_loc.sequence,
		trnitem.trn_num,
		trnitem.trn_line,
		0,
		trnitem.item,
		item.description,
		item.u_m,
		pick_list_loc.qty_to_pick,
		pick_list_loc.qty_picked,
		pick_list_loc.loc,
		pick_list_loc.lot,
		item.serial_tracked,
		item.lot_tracked
	FROM item
	RIGHT OUTER JOIN trnitem ON item.item = trnitem.item
	RIGHT OUTER JOIN pick_list_loc
	LEFT OUTER JOIN pick_list_ref ON pick_list_loc.pick_list_id = pick_list_ref.pick_list_id
		AND pick_list_loc.sequence = pick_list_ref.sequence ON trnitem.trn_num = pick_list_ref.ref_num
		AND trnitem.trn_line = pick_list_ref.ref_line_suf
		--AND coitem.co_release = pick_list_ref.ref_release 
		WHERE pick_list_loc.pick_list_id = @PPickListID
		AND item.serial_tracked = 1
END--@PLRefType = 'T'

-- Step through cursor and add those recs that don't exist
OPEN TMP_PickCurs

WHILE 1 = 1
BEGIN
	FETCH TMP_PickCurs
	INTO @PickListID,
		@PickListSeq,
		@PRefNum,
		@PRefLine,
		@PRefRelease,
		@PItem,
		@PItemDesc,
		@PItemUm,
		@PQtyToPick,
		@PQtyPicked,
		@PLoc,
		@PLot,
		@PSerTracked,
		@PLotTracked

	IF @@FETCH_STATUS <> 0
		BREAK

	-- Find Qty of serials for this line that exist
	SET @PSerItemExist = 0
	SET @PSerItemQty = @PQtyToPick - @PQtyPicked

	SELECT @PSerItemExist = COUNT(tmp_pick_list_loc.ser_num)
	FROM tmp_pick_list_loc
	WHERE tmp_pick_list_loc.pick_list_id = @PPickListID
		AND tmp_pick_list_loc.ser_tracked = 1
		AND tmp_pick_list_loc.item = @PItem
        AND tmp_pick_list_loc.process_id = @ProcessId
        
	IF @PSerItemExist < @PSerItemQty
	BEGIN
		SET @Counter = 1

		WHILE (@Counter < = (@PSerItemQty - @PSerItemExist))
		BEGIN
			INSERT INTO @Pick
			SELECT @PPickListID,
				@PickListSeq,
				@PRefNum,
				@PRefLine,
				@PRefRelease,
				@PItem,
				@PItemDesc,
				@PItemUm,
				1,
				0,
				@PLoc,
				@PLot,
				'',
				@PSerTracked,
				@PLotTracked

			SET @Counter += 1
		END
	END
END
CLOSE TMP_PickCurs
DEALLOCATE TMP_PickCurs

-- Insert the values into the temp picklist table
INSERT INTO tmp_pick_list_loc (
	process_id,
	pick_list_id,
	pick_group,
	ref_num,
	ref_line_suf,
	ref_release,
	item,
	description,
	u_m,
	loc,
	qty_pick,
	qty_to_pick,
	lot,
	ser_num,
	ser_tracked,
	lot_tracked,
	selected,
	rank
	)
SELECT @ProcessId,
	@PPickListID,
	PickListSeq,
	PickRefNum,
	PickRefLine,
	PickRefRelease,
	PickItem,
	PickItemDesc,
	PickItemUm,
	PickLoc,
	(PickQtyToPick - PickQtyPicked),
	PickQtyToPick,
	PickLot,
	PickSerial,
	PickSerialized,
	PickLotTracked,
	1,
	0
FROM @Pick

-- If RecordDiff is unchecked update all qtys to 0 OR if Qtys are negative
UPDATE tmp_pick_list_loc
SET tmp_pick_list_loc.qty_pick = 0
WHERE (
		ISNULL(@RecordDiff, 1) = 0
		OR tmp_pick_list_loc.qty_pick < 0
		)
	AND tmp_pick_list_loc.process_id = @ProcessId

RETURN @Severity


GO


