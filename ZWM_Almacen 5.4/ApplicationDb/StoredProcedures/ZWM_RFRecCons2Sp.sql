/****** Object:  StoredProcedure [dbo].[ZWM_RFRecCons2Sp]    Script Date: 01/20/2015 15:14:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_RFRecCons2Sp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_RFRecCons2Sp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_RFRecCons2Sp]    Script Date: 01/20/2015 15:14:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ZWM_RFRecCons2Sp] (
  @Site				SiteType
  ,@UserName		UserNameType		= NULL
  ,@Id	            ZwmIdRFCONsType		= NULL
  ,@Whse            WhSEType			= NULL
  ,@Item            ItemType			= NULL
  ,@QtyUMStd        QtyUnitType			= NULL
  ,@QtyUMStock1     QtyUnitType			= NULL
  ,@QtyUMStock2     QtyUnitType			= NULL
  ,@Loc             LocType				= NULL
  ,@Lot             LotType				= NULL
  ,@CONtNumber      ZwmCONtNumberType	= NULL
  ,@CONum			CONumType			= NULL
  ,@CoLine			CoLineType			= NULL
  ,@CoRelease		CoReleaSEType		= NULL
  ,@DA1				UserDeciFldType		= NULL
  ,@DA2				UserDeciFldType		= NULL
  ,@DA3				UserDeciFldType		= NULL
  ,@DA4				UserDeciFldType		= NULL
  ,@DA5				UserDeciFldType		= NULL
  ,@DA6				UserDeciFldType		= NULL
  ,@DA7				UserDeciFldType		= NULL
  ,@DA8				UserDeciFldType		= NULL
  ,@DA9				UserDeciFldType		= NULL
  ,@DA10			UserDeciFldType		= NULL
  ,@CA1				UserCharFldType		= NULL
  ,@CA2				UserCharFldType		= NULL
  ,@CA3				UserCharFldType		= NULL
  ,@CA4				UserCharFldType		= NULL
  ,@CA5				UserCharFldType		= NULL
  ,@CA6				UserCharFldType		= NULL
  ,@CA7				UserCharFldType		= NULL
  ,@CA8				UserCharFldType		= NULL
  ,@CA9				UserCharFldType		= NULL
  ,@CA10			UserCharFldType		= NULL
  ,@Emp				EmpNumType			= NULL
  ,@Infobar		    InfobarType			= NULL OUTPUT
)
AS

   -- Check for existence of Generic External Touch Point routine (this sectiON was generated by SpETPCodeSp AND inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_RFRecCONs2Sp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_RFRecCONs2Sp'
      -- Invoke the ETP routine, passing in (AND out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
		  @Site
		  ,@UserName
		  ,@Id
		  ,@Whse
		  ,@Item
		  ,@QtyUMStd
		  ,@QtyUMStock1
		  ,@QtyUMStock2
		  ,@Loc
		  ,@Lot
		  ,@CONtNumber
		  ,@CONum
		  ,@CoLine
		  ,@CoRelease
		  ,@DA1
		  ,@DA2
		  ,@DA3
		  ,@DA4
		  ,@DA5
		  ,@DA6
		  ,@DA7
		  ,@DA8
		  ,@DA9
		  ,@DA10
		  ,@CA1
		  ,@CA2
		  ,@CA3
		  ,@CA4
		  ,@CA5
		  ,@CA6
		  ,@CA7
		  ,@CA8
		  ,@CA9
		  ,@CA10
		  ,@Emp
		  ,@Infobar		    OUTPUT
 
   -- ETP routine can RETURN 1 to signal that the remainder of this stANDard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.


--Inicio de SesiON
DECLARE	@return_value int,
		@sessiONId            RowPointerType

SET @UserName = isnull(@UserName,'sa')

EXEC	@return_value = [dbo].[InitSessiONCONtextWithUserSp]
		@CONtextName = 'ZWM',
		@UserName = @UserName,
		@SessiONID = @SessiONID OUTPUT,
		@Site = @Site

--Solo para implementaciON Barugel Azulay
DECLARE @BAR FlagNyTYpe
IF (SELECT count(*) FROM zwm_parms WHERE customer = 'BAR') > 0
	SET @BAR = 1 

DECLARE @Severity int
SET @Severity = 0

-- CONtrola si el artículo tienen atributos de lote
DECLARE 
@LotAttrGroup AttributeGroupType
,@LotRowPointer RowPointerType

SET @Lot = dbo.ExpANDKyByType('LotType',@Lot)
SET @CONum = dbo.ExpANDKyByType('CONumType',@CONum)
SET @Emp = dbo.ExpANDKyByType('EmpNumType',@Emp)

------------------------------ SET NULLs
If (len(ltrim(@Id)) = 0) SET @Id = null
If (len(ltrim(@Whse)) = 0) SET @Whse = null
If (len(ltrim(@Item)) = 0) SET @Item = null
If (len(ltrim(@QtyUMStd)) = 0) SET @QtyUMStd = null
If (len(ltrim(@QtyUMStock1)) = 0) SET @QtyUMStock1 = null
If (len(ltrim(@QtyUMStock2)) = 0) SET @QtyUMStock2 = null
If (len(ltrim(@Loc)) = 0) SET @Loc = null
If (len(ltrim(@Lot)) = 0) SET @Lot = null
If (len(ltrim(@CONtNumber)) = 0) SET @CONtNumber = null
If (len(ltrim(@CONum)) = 0) SET @CONum = null
If (len(ltrim(@CoLine)) = 0) SET @CoLine = null
If (len(ltrim(@CoRelease)) = 0) SET @CoRelease = null
------------------------------ SET NULLs

IF (SELECT count(item) FROM item WHERE item = @Item) = 0
BEGIN
	SET @Infobar = 'No existe el artículo'
	SET @Severity = 16
	RETURN @severity
END

SELECT @LotAttrGroup = lot_attr_group FROM item WHERE item = @Item

IF (@LotAttrGroup) IS NOT NULL
BEGIN
-- El articulo tiene atributos de lote

	DECLARE	
	   @tDA1	AttributeLabelType
	  ,@tDA2	AttributeLabelType
	  ,@tDA3	AttributeLabelType
	  ,@tDA4	AttributeLabelType
	  ,@tDA5	AttributeLabelType
	  ,@tDA6	AttributeLabelType
	  ,@tDA7	AttributeLabelType
	  ,@tDA8	AttributeLabelType
	  ,@tDA9	AttributeLabelType
	  ,@tDA10	AttributeLabelType
	  ,@tCA1	AttributeLabelType
	  ,@tCA2	AttributeLabelType
	  ,@tCA3	AttributeLabelType
	  ,@tCA4	AttributeLabelType
	  ,@tCA5	AttributeLabelType
	  ,@tCA6	AttributeLabelType
	  ,@tCA7	AttributeLabelType
	  ,@tCA8	AttributeLabelType
	  ,@tCA9	AttributeLabelType
	  ,@tCA10	AttributeLabelType
  
	SELECT 
	@tDA1 = deci_attr1_label
	,@tDA2 = deci_attr2_label
	,@tDA3 = deci_attr3_label
	,@tDA4 = deci_attr4_label
	,@tDA5 = deci_attr5_label
	,@tDA6 = deci_attr6_label
	,@tDA7 = deci_attr7_label
	,@tDA8 = deci_attr8_label
	,@tDA9 = deci_attr9_label
	,@tDA10 = deci_attr10_label
	,@tCA1 = char_attr1_label
	,@tCA2 = char_attr2_label
	,@tCA3 = char_attr3_label
	,@tCA4 = char_attr4_label
	,@tCA5 = char_attr5_label
	,@tCA6 = char_attr6_label
	,@tCA7 = char_attr7_label
	,@tCA8 = char_attr8_label
	,@tCA9 = char_attr9_label
	,@tCA10 = char_attr10_label
	FROM attribute_group
	WHERE attr_group_class = 'LotAttr' AND attr_group = @LotAttrGroup

	DECLARE @Dif FlagNyType
	SET @Dif = 0
	
	-- valida que los atributos de lote asignado al articulo tengan el mismo orden a los que se reciban
	IF (@tDA1 IS NOT NULL) AND (@DA1 IS NULL) SET @Dif = 1
	IF (@tDA2 IS NOT NULL) AND (@DA2 IS NULL) SET @Dif = 1
	IF (@tDA3 IS NOT NULL) AND (@DA3 IS NULL) SET @Dif = 1
	IF (@tDA4 IS NOT NULL) AND (@DA4 IS NULL) SET @Dif = 1
	IF (@tDA5 IS NOT NULL) AND (@DA5 IS NULL) SET @Dif = 1
	IF (@tDA6 IS NOT NULL) AND (@DA6 IS NULL) SET @Dif = 1
	IF (@tDA7 IS NOT NULL) AND (@DA7 IS NULL) SET @Dif = 1
	IF (@tDA8 IS NOT NULL) AND (@DA8 IS NULL) SET @Dif = 1
	IF (@tDA9 IS NOT NULL) AND (@DA9 IS NULL) SET @Dif = 1
	IF (@tDA10 IS NOT NULL) AND (@DA10 IS NULL) SET @Dif = 1
	
	IF (@tCA1 IS NOT NULL) AND (@tCA1 IS NULL) SET @Dif = 1
	IF (@tCA2 IS NOT NULL) AND (@tCA2 IS NULL) SET @Dif = 1
	IF (@tCA3 IS NOT NULL) AND (@tCA3 IS NULL) SET @Dif = 1
	IF (@tCA4 IS NOT NULL) AND (@tCA4 IS NULL) SET @Dif = 1
	IF (@tCA5 IS NOT NULL) AND (@tCA5 IS NULL) SET @Dif = 1
	IF (@tCA6 IS NOT NULL) AND (@tCA6 IS NULL) SET @Dif = 1
	IF (@tCA7 IS NOT NULL) AND (@tCA7 IS NULL) SET @Dif = 1
	IF (@tCA8 IS NOT NULL) AND (@tCA8 IS NULL) SET @Dif = 1
	IF (@tCA9 IS NOT NULL) AND (@tCA9 IS NULL) SET @Dif = 1
	IF (@tCA10 IS NOT NULL) AND (@tCA10 IS NULL) SET @Dif = 1

	-- cONtrola que los atributos de lote sean iguales a los atributos ya leidos y guardados en la tabla zwm_tmp_rf_rec_cONs2_mst para ese articulo y ese lote
	
	SELECT @Dif = 2
	FROM zwm_tmp_rf_rec_cONs2_mst 
	WHERE item = @Item AND lot = @Lot
	AND 
	(@DA1 <> deci_attribute1
		or @DA2 <> deci_attribute2
		or @DA3 <> deci_attribute3
		or @DA4 <> deci_attribute4
		or @DA5 <> deci_attribute5
		or @DA6 <> deci_attribute6
		or @DA7 <> deci_attribute7
		or @DA8 <> deci_attribute8
		or @DA9 <> deci_attribute9
		or @DA10 <> deci_attribute10
		or @CA1 <> char_attribute1
		or @CA2 <> char_attribute2
		or @CA3 <> char_attribute3
		or @CA4 <> char_attribute4
		or @CA5 <> char_attribute5
		or @CA6 <> char_attribute6
		or @CA7 <> char_attribute7
		or @CA8 <> char_attribute8
		or @CA9 <> char_attribute9
		or @CA10 <> char_attribute10)
			
	IF @Dif = 1
	BEGIN
		SET @Infobar = 'Los atributos de lote no coinciden cON los requeridos por el articulo'
		SET @Severity = 16
		RETURN @severity
	END
	
	IF @Dif = 2
	BEGIN
		SET @Infobar = 'Los atributos de lote no coinciden cON los atributos ya leidos para qel articulo'
		SET @Severity = 16
		RETURN @severity
	END
		
END
ELSE
BEGIN
-- Si el articulo no tiene atributos de lote, éstos se SETean en NULL para evitar que se guarden si vienen por error
	SET @DA1 = NULL SET @DA2 = NULL SET @DA3 = NULL SET @DA4 = NULL SET @DA5 = NULL SET @DA6 = NULL SET @DA7 = NULL
	SET @DA8 = NULL SET @DA9 = NULL SET @DA10 = NULL SET @CA1 = NULL SET @CA2 = NULL SET @CA3 = NULL
	SET @CA4 = NULL SET @CA5 = NULL SET @CA6 = NULL SET @CA7 = NULL
	SET @CA8 = NULL SET @CA9 = NULL SET @CA10 = NULL
END

  
-- si el articulo cONtrola lote, debe verificar que el lote no sea nulo
	DECLARE @tracked ListYesNoType
	
	SELECT @tracked = lot_tracked 
	FROM item
	WHERE item = @Item 

	IF (@tracked = 1 AND @Lot IS NULL)
	BEGIN
		SET @Infobar = 'Se debe ingresar un lote'
		SET @Severity = 16
		RETURN @severity
	END


-- Si el parámetro de depósito es NULL, tomar el depósito principal, sino verifica que exista
IF @Whse IS NULL
		SELECT @Whse = def_whse FROM invparms
ELSE IF(SELECT Whse FROM Whse WHERE whse = @Whse) IS NULL
BEGIN
	SET @Infobar = 'El almacén no existe'
	SET @Severity = 16
	RETURN @severity
END

--El whse debe estar asociado al Id
	IF(SELECT whse FROM zwm_tmp_rf_cONs1_mst WHERE whse = @Whse AND id_rec_cONs = @Id)IS NULL
	BEGIN
		SET @Infobar = 'El almacen no correspONde cON la recepciON cONsolidada'
		SET @Severity = 16
		RETURN @severity
	END


-- Si el parámetro de ubicación es NULL, tomar la ubicación de recepciON; caso cONtrario verificar que la ubicación exista
	IF @Loc IS NULL
		SELECT @Loc = loc FROM zwm_parms
	ELSE IF(SELECT loc FROM locatiON WHERE loc = @Loc) IS NULL
		BEGIN
			SET @Infobar = 'La ubicación no existe'
			SET @Severity = 16
			RETURN @severity
		END
		
/* 16.2 */		
-- Si al recibir el artículo asociado a un ID o GRN, el artículo tuviera asociación (pedido de ventas) debe verificar que el dato del pedido sea válido y que la cantidad no supere la asociada para cada pedido o a stock.

DECLARE 
@RefUnica FlagNyTYpe
,@ExisteRef FlagNyTYpe
,@RefNum	CoJobProjTrnNumType
,@RefLine	CoLineSuffixProjTaskTrnLineType
,@RefRel	CoReleaseOperNumType

SET @ExisteRef = 0
SET @RefUnica = 0

SELECT @RefUnica = Count(*)
FROM poitem poi
JOIN grn_line grn
ON poi.po_num = grn.po_num AND poi.po_line = grn.po_line AND poi.po_release = grn.po_release
JOIN zwm_tmp_rf_cONs1_mst rf
ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
WHERE rf.id_rec_cONs = @Id
AND poi.item = @Item

If @RefUnica = 1 AND @CONum IS NULL AND @CoLine IS NULL AND @CoRelease IS NULL
BEGIN
	SELECT @CONum = poi.ref_num, @CoLine = poi.ref_line_suf, @CoRelease = poi.ref_release, @ExisteRef = 1
	FROM poitem poi
	JOIN grn_line grn
	ON poi.po_num = grn.po_num AND poi.po_line = grn.po_line AND poi.po_release = grn.po_release
	JOIN zwm_tmp_rf_cONs1_mst rf
	ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
	WHERE rf.id_rec_cONs = @Id
	AND poi.ref_num IS NOT NULL AND poi.ref_line_suf IS NOT NULL AND poi.ref_release IS NOT NULL
END
ELSE
BEGIN
	SELECT @ExisteRef = 1
	FROM poitem poi
	JOIN grn_line grn
	ON poi.po_num = grn.po_num AND poi.po_line = grn.po_line AND poi.po_release = grn.po_release
	JOIN zwm_tmp_rf_cONs1_mst rf
	ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
	WHERE rf.id_rec_cONs = @Id
	AND 
	(@CONum + cast(@CoLine as nvarchar(10)) + cast(@CoRelease as nvarchar(10)) 
	= poi.ref_num + cast(poi.ref_line_suf as nvarchar(10)) + cast(poi.ref_release as nvarchar(10)))
END

IF (@ExisteRef = 0 AND (@CONum IS NOT NULL or @CoLine IS NOT NULL or @CoRelease IS NOT NULL))
	BEGIN 
		SET @Severity = 16
		SET @Infobar = 'Referencia a pedido incorrecta'
		RETURN @severity
	END

-- Verifica si el articulo esta asociado al GRN.

DECLARE @ExisteItem FlagNyTYpe

SET @ExisteItem = 0

SELECT top 1 @ExisteItem = 1
FROM poitem poi
JOIN grn_line grn
ON poi.po_num = grn.po_num AND poi.po_line = grn.po_line AND poi.po_release = grn.po_release
JOIN zwm_tmp_rf_cONs1_mst rf
ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
WHERE rf.id_rec_cONs = @Id
AND @Item = poi.item

IF (@ExisteItem = 0)
	BEGIN 
		SET @Severity = 16
		SET @Infobar = 'El item no existe en el NRM'
		RETURN @severity
	END


/* la suma de las cantidades correspONdientes al mismo artículo y mismo ID superan la cantidad indicada como despachada en los GRN asociados al mismo ID y mismo item */
DECLARE 
 @cantidad             decimal(19,8)
,@cantidad_grn         decimal(19,8)
,@cantidad_grn_cONv    decimal(19,8)
,@cantidad_grn_tol	   decimal(19,8)
,@cantidadrec_grn	   decimal(19,8)
,@UM_grn			   UMType
,@UMItem               UMType
,@QtyBoxCONverted      QtyUnitType
,@QtyPalletCONverted   QtyUnitType
,@OutQty               int
,@UMStk1			   UMType
,@UMStk2			   UMType
,@RcvdUnderTol		   TolerancePercentType
,@RcvdOverTol		   TolerancePercentType
,@RcvdUnderTolGen	   TolerancePercentType
,@RcvdOverTolGen	   TolerancePercentType

SELECT @RcvdOverTol = rcvd_over_po_qty_tolerance, @RcvdUnderTol = rcvd_under_po_qty_tolerance FROM item WHERE item.item = @Item
SELECT @RcvdOverTolGen = rcvd_over_po_qty_tolerance,@RcvdUnderTolGen = rcvd_under_po_qty_tolerance FROM poparms
SET @RcvdOverTol = ISNULL(ISNULL(@RcvdOverTol,@RcvdOverTolGen),0)
SET @RcvdUnderTol = ISNULL(ISNULL(@RcvdUnderTol,@RcvdUnderTolGen),0)

SET @QtyBoxCONverted = 0
SET @QtyPalletCONverted = 0

SET @QtyUMStd = isnull(@QtyUMStd,0)
SET @QtyUMStock1 = isnull(@QtyUMStock1,0) 
SET @QtyUMStock2 = isnull(@QtyUMStock2,0) 

IF @QtyUMStock1 > 0
BEGIN
	--cONvierte las cantidades de cajas a UM estANDar
	SET @UMStk1 = ( SELECT ZWM_UMStock1 FROM item WHERE item = @Item )
	EXEC @Severity = dbo.UMCONvQtySp
		@UM               = @UMStk1
	  , @Item             = @Item
	  , @VendNum          = NULL
	  , @Area             = NULL
	  , @CONvertToBase    = 1
	  , @QtyToBeCONverted = @QtyUMStock1 
	  , @OutQty           = @QtyBoxCONverted OUTPUT --devuelve la cantidad cONvertida
	  , @Infobar          = @Infobar       OUTPUT
END

IF @QtyUMStock2 > 0
BEGIN
	--cONvierte las cantidades de pallets a UM estANDar
	SET @UMStk2 = ( SELECT ZWM_UMStock2 FROM item WHERE item = @Item )
	EXEC @Severity = dbo.UMCONvQtySp
		@UM               = @UMStk2
	  , @Item             = @Item
	  , @VendNum          = NULL
	  , @Area             = NULL
	  , @CONvertToBase    = 1
	  , @QtyToBeCONverted = @QtyUMStock2 
	  , @OutQty           = @QtyPalletCONverted OUTPUT --devuelve la cantidad cONvertida
	  , @Infobar          = @Infobar       OUTPUT
END

--cantidad rf 
SET @cantidad = (SELECT SUM(ISNULL(rf.qty_um_std,0)+ISNULL(rf.qty_um_stk1,0)+ISNULL(rf.qty_um_stk2,0))
FROM zwm_tmp_rf_rec_cONs2_mst rf 
WHERE rf.item = @Item AND rf.id = @Id
AND ((@CONum IS NULL AND rf.co_num IS NULL) or @CONum = rf.co_num)
AND ((@CoLine IS NULL AND rf.co_line IS NULL) or @CoLine = rf.co_line)
AND ((@CoRelease IS NULL AND rf.co_release IS NULL) or @CoRelease = rf.co_release)
)

SET @cantidad = ISNULL(@Cantidad, 0)

--ESTO TIENE UN ERROR, UNA OC PUEDE TENER VARIAS LINEAS PARA EL MISMO ITEM CON UM DIFERENTES, CALCULA INCORRECTAMENTE EN ESE CASO
--cantidad del grn
SET @cantidad_grn = (SELECT SUM(grn.qty_shipped_cONv)
FROM grn_line grn
INNER JOIN zwm_tmp_rf_cONs1_mst rf
ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
INNER JOIN poitem poi
ON grn.po_num = poi.po_num AND grn.po_line = poi.po_line AND grn.po_release = poi.po_release
WHERE rf.id_rec_cONs = @Id AND poi.item = @Item
AND ((@CONum IS NULL AND poi.ref_num IS NULL)or @CONum = poi.ref_num)
AND ((@CoLine IS NULL AND poi.ref_line_suf = 0)or @CoLine = poi.ref_line_suf)
AND ((@CoRelease IS NULL AND poi.ref_release = 0)or @CoRelease = poi.ref_release)
)

SET @cantidad_grn = ISNULL(@Cantidad_grn, 0)

--cantidad recibida del grn
SET @cantidadrec_grn = (SELECT SUM(grn.qty_rec)
FROM grn_line grn
INNER JOIN zwm_tmp_rf_cONs1_mst rf
ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
INNER JOIN poitem poi
ON grn.po_num = poi.po_num AND grn.po_line = poi.po_line AND grn.po_release = poi.po_release
WHERE rf.id_rec_cONs = @Id AND poi.item = @Item
AND ((@CONum IS NULL AND poi.ref_num IS NULL)or @CONum = poi.ref_num)
AND ((@CoLine IS NULL AND poi.ref_line_suf = 0)or @CoLine = poi.ref_line_suf)
AND ((@CoRelease IS NULL AND poi.ref_release = 0)or @CoRelease = poi.ref_release)
)

SET @cantidadrec_grn = ISNULL(@cantidadrec_grn,0)

--UM del grn
SET @um_grn = (SELECT TOP 1 grn.u_m
FROM grn_line grn
INNER JOIN zwm_tmp_rf_cONs1_mst rf
ON grn.grn_num = rf.grn_num AND grn.vend_num = rf.vend_num
INNER JOIN poitem poi
ON grn.po_num = poi.po_num AND grn.po_line = poi.po_line AND grn.po_release = poi.po_release
WHERE rf.id_rec_cONs = @Id AND poi.item = @Item
AND ((@CONum IS NULL AND poi.ref_num IS NULL)or @CONum = poi.ref_num)
AND ((@CoLine IS NULL AND poi.ref_line_suf = 0)or @CoLine = poi.ref_line_suf)
AND ((@CoRelease IS NULL AND poi.ref_release = 0)or @CoRelease = poi.ref_release)
)

IF @cantidad_grn > 0
BEGIN
	--cONvierte las cantidades de grn a UM estANDar
	EXEC @Severity = dbo.UMCONvQtySp
		@UM               = @UM_grn
	  , @Item             = @Item
	  , @VendNum          = NULL
	  , @Area             = NULL
	  , @CONvertToBase    = 1
	  , @QtyToBeCONverted = @cantidad_grn 
	  , @OutQty           = @cantidad_grn_cONv OUTPUT --devuelve la cantidad cONvertida
	  , @Infobar          = @Infobar       OUTPUT
END

SET @cantidad = @cantidad + @QtyUMStd + @QtyBoxCONverted + @QtyPalletCONverted

DECLARE @RowPointer RowPointerType
SET @RowPointer = newid()
IF @cantidad > (@cantidad_grn_cONv - @cantidadrec_grn)
	BEGIN 
		SET @Severity = 16
		SET @Infobar = 'Cantidad mayor a la indicada en grn'
		RETURN @severity
	END
ELSE
	BEGIN
		INSERT INTO zwm_tmp_rf_rec_cONs2_mst
		([id],[item],[qty_um_std],[qty_um_stk1],[qty_um_stk1_cONv],[qty_um_stk2],[qty_um_stk2_cONv],[whse],[loc],[lot],[cONt_number],[user_trans],[employee],[RowPointer],[co_num],[co_line],[co_release],[deci_attribute1],[deci_attribute2],[deci_attribute3],[deci_attribute4],[deci_attribute5],[deci_attribute6],[deci_attribute7],[deci_attribute8],[deci_attribute9],[deci_attribute10],[char_attribute1],[char_attribute2],[char_attribute3],[char_attribute4],[char_attribute5],[char_attribute6],[char_attribute7],[char_attribute8],[char_attribute9],[char_attribute10])
		VALUES
		-- las cantidades [qty_um_stk1_cONv] y [qty_um_stk2_cONv] no sON las cantidades cONvertidas, siguiendo la logica de SL
		(@Id,@Item,@QtyUMStd,@QtyBoxCONverted,@QtyUMStock1,@QtyPalletCONverted,@QtyUMStock2,@Whse,@Loc,@Lot,@CONtNumber,@UserName,@Emp,@RowPointer,@CONum,@CoLine,@CoRelease,@DA1,@DA2,@DA3,@DA4,@DA5,@DA6,@DA7,@DA8,@DA9,@DA10,@CA1,@CA2,@CA3,@CA4,@CA5,@CA6,@CA7,@CA8,@CA9,@CA10)
	END

EXEC dbo.CloseSessiONCONtextSp @SessiONID = @SessiONID
	
RETURN @Severity
GO


