/****** Object:  StoredProcedure [dbo].[EXTGEN_UnpackInventorySp]    Script Date: 01/09/2015 15:04:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXTGEN_UnpackInventorySp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXTGEN_UnpackInventorySp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_UnpackInventorySp]    Script Date: 01/09/2015 15:04:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[EXTGEN_UnpackInventorySp] (
     @ProcessId				RowpointerType
   , @ReturnToPickList      ListYesNoType
   , @ReduceQuantityOnly	ListYesNoType
   , @Infobar				InfoBarType		OUTPUT
   , @DeleteEmptyShipment	ListYesNoType = 0
   )
AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_UnpackInventorySp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_UnpackInventorySp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @ProcessId
         , @ReturnToPickList
         , @ReduceQuantityOnly
         , @Infobar OUTPUT
         , @DeleteEmptyShipment 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
 
 
 
-- Si el ZWM_RefType is null, significa que el pick list es de pedido, por lo cual sale del EXTGEN y ejecuta el 
--SP estandar
DECLARE 
@Severity int,
@PLRefType char(1)

SET @Severity = 0

select @PLRefType = p.ZWM_RefType from tmp_ship_seq t
join shipment_mst s
on s.shipment_id = t.shipment_id
join shipment_line_mst sl
on sl.shipment_id = s.shipment_id
join pick_list_mst p
on p.pick_list_id = sl.pick_list_id
where t.process_id = @ProcessId

IF @PLRefType is null OR @PLRefType = 'O'
BEGIN
	SET @Severity = 1
	RETURN @Severity
END

 
 
 
 
BEGIN TRANSACTION
EXEC dbo.DefineVariableSp 'CalledFromUnpackInventory', 1, @Infobar OUTPUT
-- ---------------------------------------------------------------------
-- Initialize variables.
-- ---------------------------------------------------------------------
DECLARE @ShipmentId ShipmentIdType
   , @ShipmentLine ShipmentLineType
   , @ShipmentSeq ShipmentSequenceType
   , @QtyPicked QtyUnitNoNegType
   , @ToLoc LocType
   , @PickListPackLoc LocType
   , @ShipmentSeqLoc LocType
   , @ShipmentSeqLot LotType
   , @ShipmentSeqRsvdNum RsvdNumType
   , @PickListRefRefNum EmpJobCoPoRmaProjPsTrnNumType
   , @PickListRefRefLineSuf CoLineSuffixPolineProjTaskRmaTrnLineType
   , @PickListRefRefRelease CoReleaseOperNumPoReleaseType
   , @TrnitemItem ItemType
   , @ItemLotTracked ListYesNoType
   , @ItemSerialTracked ListYesNoType
   , @ItemReservable ListYesNoType
   , @PickListId PickListIDType
   , @PickListRefSequence PickListSequenceType
   , @TmpSerID UNIQUEIDENTIFIER
   , @PDate datetimetype
   , @PStat Nvarchar(1)
   , @ShipmentWhse WhseType
   , @RowPointer  RowPointerType
   , @Prompt            Infobar
   , @PromptButtons     Infobar
   , @ItemQtyOnHand     QtyUnitType

-- Set vars for routine
SET @PDate = dbo.GetSiteDate(getdate()) -- Posting Date
SET @Severity = 0

SET @TmpSerID = dbo.TmpSerId()

-- -------------------------------------
-- Define cursor for items in temp table
-- -------------------------------------
DECLARE TMP_ShipSeqCurs CURSOR LOCAL STATIC
FOR
SELECT shipment_id
   , shipment_line
   , shipment_seq
   , qty_picked
   , loc
FROM tmp_ship_seq
WHERE process_id = @ProcessId


-- -------------------------------------
-- Define and begin loop through cursor
-- -------------------------------------
OPEN TMP_ShipSeqCurs

WHILE 1 = 1
BEGIN
   FETCH TMP_ShipSeqcurs
   INTO @ShipmentId
      , @ShipmentLine
      , @ShipmentSeq
      , @QtyPicked
      , @ToLoc

   IF @@FETCH_STATUS != 0
      BREAK

    SELECT
       @PickListRefRefNum = null,
       @PickListRefRefLineSuf = null,
       @PickListRefRefRelease = null

   SELECT @ShipmentSeqLoc = shipment_seq.loc,
          @ShipmentSeqLot = shipment_seq.lot,
          @ShipmentSeqRsvdNum = shipment_seq.rsvd_num,
          @PickListId = shipment_line.pick_list_id,
          @PickListRefSequence = shipment_line.pick_list_ref_sequence,
          @PickListRefRefNum = pick_list_ref.ref_num,
          @PickListRefRefLineSuf = pick_list_ref.ref_line_suf,
          @PickListRefRefRelease = pick_list_ref.ref_release,
          @PickListPackLoc = pick_list.pack_loc,
          @TrnitemItem = trnitem.item,
          @ItemLotTracked = item.lot_tracked,
          @ItemSerialTracked = item.serial_tracked,
          @ItemReservable = item.reservable,
          @ShipmentWhse = shipment.whse
   FROM shipment_line
   JOIN shipment_seq ON shipment_seq.shipment_id = shipment_line.shipment_id AND
        shipment_seq.shipment_line = shipment_line.shipment_line and
        shipment_seq.shipment_seq = @ShipmentSeq
   JOIN pick_list ON pick_list.pick_list_id = shipment_line.pick_list_id
   JOIN pick_list_ref ON pick_list_ref.pick_list_id = shipment_line.pick_list_id AND
        pick_list_ref.sequence = shipment_line.pick_list_ref_sequence
   JOIN trnitem ON trnitem.trn_num = pick_list_ref.ref_num AND
        trnitem.trn_line = pick_list_ref.ref_line_suf
   JOIN item ON item.item = trnitem.item
   JOIN shipment on shipment.shipment_id = shipment_line.shipment_id
   WHERE shipment_line.shipment_id = @ShipmentId AND shipment_line.shipment_line = @ShipmentLine

   IF @ItemSerialTracked = 1
    BEGIN
        DELETE tmp_ser WHERE tmp_ser.SessionID = @TmpSerID

        INSERT INTO tmp_ser (sessionid, ser_num)
        SELECT @TmpSerID, ser_num
        FROM tmp_ship_seq_serial
        WHERE process_id = @processid AND
              shipment_id = @ShipmentId AND
              shipment_line = @ShipmentLine AND
              shipment_seq = @ShipmentSeq

    END

    SET @PStat = 'I'

    IF ISNULL(@ReturnToPickList,0) = 1
    BEGIN
       IF NOT EXISTS (Select 1 FROM itemloc WHERE itemloc.whse = @ShipmentWhse AND
                                                  itemloc.item = @TrnitemItem AND
                                                  itemloc.loc = @PickListPackLoc)
       BEGIN

          EXEC @Severity = ItemLocAddSp
               @ShipmentWhse,
               @TrnitemItem,
               @PickListPackLoc,
               0, --@UcFlag
               0, --@UnitCost
               0, --@MatlCost
               0, --@LbrCost,
               0, --@FovhdCost,
               0, --@VovhdCost,
               0, --@OutCost,
               0 , --@SetPermFlag,
               @RowPointer   OUTPUT,
               @Infobar   OUTPUT
         IF @Severity <> 0
         GOTO ERROR_RETURN
       END


       EXEC @Severity = MvPostSp
            'P' -- Regular Move Indicator --@PType
           , @PDate --@PDate
         , @QtyPicked --@PQty
          , @TrnitemItem --@PItem
         , @ShipmentWhse --@FromWhse
         , @ShipmentSeqLoc --@FromLoc
         , @ShipmentSeqLot --@FromLot
         , @ShipmentWhse --@ToWhse
         , @PickListPackLoc --@ToLoc
         , @ShipmentSeqLot --@ToLot
         , 1 --@PZeroCost
         , NULL --@PTrnNum
         , NULL --@PTrnLine
         , NULL --@PTransNum
         , @ShipmentSeqRsvdNum  --@PRsvdNum
         , @PStat  --@PStat
         , @PickListRefRefNum --@PRefNum
         , @PickListRefRefLineSuf --@PRefLineSuf
         , @PickListRefRefRelease --@PRefRelease
         , NULL --@RefStr
         , NULL --@PUnitCost
         , NULL --@PMatlCost
         , NULL --@PLbrCost
         , NULL --@PFovhdCost
         , NULL --@PVovhdCost
         , NULL --@POutCost
         , NULL --@PTotCost
         , @Infobar OUTPUT --@Infobar

      IF @Severity <> 0
         GOTO ERROR_RETURN

       IF ISNULL(@ItemReservable,0) = 1
       BEGIN
          IF @ShipmentSeqRsvdNum IS NOT NULL
           BEGIN
              DELETE FROM tmp_ser WHERE tmp_ser.SessionID = @TmpSerID

              INSERT INTO tmp_ser (sessionid, ser_num)
              SELECT @TmpSerID, ser_num
              FROM tmp_ship_seq_serial
              WHERE process_id = @processid AND
                    shipment_id = @ShipmentId AND
                    shipment_line = @ShipmentLine AND
                    shipment_seq = @ShipmentSeq

              EXEC @Severity = MvRsvdCoSp
                               @QtyPicked, --@PQty
                               @TrnitemItem,--@PItem
                               @ShipmentWhse,--@PWhse
                               @ShipmentSeqLoc,--@FrLoc
                               @ShipmentSeqLot,--@FrLot
                               @PickListPackLoc,--@ToLoc
                               @ShipmentSeqLot,--@ToLot
                               NULL,--@PWorkkey
                               @Infobar OUTPUT,--@Infobar
                               NULL,--@FrImportDocId
                               NULL,--@ToImportDocId
                               @PickListRefRefNum,--@PRsvdInvRefNum
                               @PickListRefRefLinesuf,--@PRsvdInvRefLine
                               @PickListRefRefRelease,--@PRsvdInvRefRelease
                               @ShipmentSeqRsvdNum --@PRsvdInvRsvdNum

              IF @Severity <> 0
                 GOTO ERROR_RETURN

          END
          DELETE FROM tmp_ser WHERE tmp_ser.SessionID = @TmpSerID

       END /* @ItemReservable = 1 */

       UPDATE shipment_seq
       SET shipment_seq.qty_picked = shipment_seq.qty_picked - @QtyPicked
       FROM shipment_seq
       WHERE shipment_seq.shipment_id = @ShipmentId AND shipment_seq.shipment_line = @ShipmentLine AND
             shipment_seq.shipment_seq = @ShipmentSeq

       IF @ShipmentSeqRsvdNum IS NULL
       BEGIN
          UPDATE itemloc
         SET Itemloc.assigned_to_be_picked_qty = itemloc.assigned_to_be_picked_qty - @QtyPicked
         FROM itemloc
         WHERE itemloc.whse = @ShipmentWhse AND itemloc.item = @TrnitemItem AND itemloc.loc = @ShipmentSeqLoc

            UPDATE itemloc
         SET Itemloc.assigned_to_be_picked_qty = itemloc.assigned_to_be_picked_qty + @QtyPicked
         FROM itemloc
         WHERE itemloc.whse = @ShipmentWhse AND itemloc.item = @TrnitemItem AND itemloc.loc = @PickListPackLoc

         IF @ItemLotTracked = 1
         BEGIN
            UPDATE lot_loc
            SET lot_loc.assigned_to_be_picked_qty = lot_loc.assigned_to_be_picked_qty - @QtyPicked
            FROM lot_loc
            WHERE lot_loc.whse = @ShipmentWhse AND lot_loc.item = @TrnitemItem AND
                  lot_loc.loc = @ShipmentSeqLoc AND lot_loc.lot = @ShipmentSeqLot

            UPDATE lot_loc
            SET lot_loc.assigned_to_be_picked_qty = lot_loc.assigned_to_be_picked_qty + @QtyPicked
            FROM lot_loc
            WHERE lot_loc.whse = @ShipmentWhse AND lot_loc.item = @TrnitemItem AND
                   lot_loc.loc = @PickListPackLoc AND lot_loc.lot = @ShipmentSeqLot
          END /* @ItemLotTracked = 1 */
      END /* @ShipmentSeqRsvdNum is null */

      UPDATE pick_list
      SET pick_list.status = 'P'
      FROM pick_list
      WHERE pick_list.pick_list_id = @PickListId

      /*issue 158432 update packed qty on coitem when unpack inventory*/
      -- no se usa para transferencias.
      /*
      UPDATE coitem
      SET coitem.qty_packed = case when (coitem.qty_packed - @QtyPicked)<0 then 0
                               else coitem.qty_packed - @QtyPicked
                               end
      WHERE coitem.co_num = @PickListRefRefNum and
           coitem.co_line = @PickListRefRefLineSuf and
           coitem.co_release = @PickListRefRefRelease
      */

    END /* Isnull(@ReturnToPickList,0) = 1 */
    ELSE
    IF ISNULL(@ReduceQuantityOnly, 0) = 1
    BEGIN
       UPDATE shipment_seq
       SET shipment_seq.qty_picked = shipment_seq.qty_picked - @QtyPicked
       FROM shipment_seq
       WHERE shipment_seq.shipment_id = @ShipmentId AND shipment_seq.shipment_line = @ShipmentLine AND
             shipment_seq.shipment_seq = @ShipmentSeq

       UPDATE pick_list_ref
       SET pick_list_ref.qty_picked = pick_list_ref.qty_picked - @QtyPicked
       FROM pick_list_ref
       WHERE pick_list_ref.pick_list_id = @PickListId AND pick_list_ref.sequence = @PickListRefSequence

       UPDATE itemloc
      SET Itemloc.assigned_to_be_picked_qty = itemloc.assigned_to_be_picked_qty - @QtyPicked
      FROM itemloc
      WHERE itemloc.whse = @ShipmentWhse AND itemloc.item = @TrnitemItem AND itemloc.loc = @ShipmentSeqLoc

      /*issue 158432 update packed qty on coitem when unpack inventory*/
      -- no se usa para transferencias
      /*UPDATE coitem
      SET coitem.qty_packed = case when (coitem.qty_packed - @QtyPicked)<0 then 0
                              else coitem.qty_packed - @QtyPicked
                              end
      WHERE coitem.co_num = @PickListRefRefNum and
           coitem.co_line = @PickListRefRefLineSuf and
           coitem.co_release = @PickListRefRefRelease
      */

      IF @ItemLotTracked = 1
      BEGIN
         UPDATE lot_loc
         SET lot_loc.assigned_to_be_picked_qty = lot_loc.assigned_to_be_picked_qty - @QtyPicked
         FROM lot_loc
         WHERE lot_loc.whse = @ShipmentWhse AND lot_loc.item = @TrnitemItem AND
               lot_loc.loc = @ShipmentSeqLoc AND lot_loc.lot = @ShipmentSeqLot
      END /* @ItemLotTracked = 1 */

      IF @ItemSerialTracked = 1
         UPDATE serial
             SET serial.assigned_to_be_picked = 0
             FROM tmp_ship_seq_serial
             Join serial on serial.ser_num = tmp_ship_seq_serial.ser_num
             WHERE process_id = @processid AND
                   tmp_ship_seq_serial.shipment_id = @ShipmentId AND
                   tmp_ship_seq_serial.shipment_line = @ShipmentLine AND
                   tmp_ship_seq_serial.shipment_seq = @ShipmentSeq

    END /* @ReduceQuantityOnly = 1 */
   ELSE  /* Niether field is Checked */
   BEGIN
      IF NOT EXISTS (Select 1 FROM itemloc WHERE itemloc.whse = @ShipmentWhse AND
                                                  itemloc.item = @TrnitemItem AND
                                                  itemloc.loc = @ToLoc)
       BEGIN
          EXEC @Severity = ItemlocValidateSp
               @TrnitemItem  -- @Item
             , @ShipmentWhse -- @Whse
             , @ToLoc  -- @Loc
             , 1 -- @VerifyAccounts
             , 0 -- @CheckUserAccount ListYesNoType = 0
             , null --@UserAcct AcctType = null
             , @Infobar output
             , @Prompt  OUTPUT --Return warning message if any (for validator prompting)
             , @PromptButtons OUTPUT
             , 0 --@Outgoing          ListYesNoType = 1
             , @ItemQtyOnHand  OUTPUT
             , null  --@OldLoc LocType = null
             , null -- @CoNum CoNumType = null
             , null --@CoLine CoLineType = null
             , null  --@CoRelease CoReleaseType = null
             , null -- @Lot LotType

          IF @Severity <> 0
           GOTO ERROR_RETURN

       END

      EXEC @Severity = MvPostSp
          'P' -- Regular Move Indicator --@PType
         , @PDate --@PDate
         , @QtyPicked --@PQty
         , @TrnitemItem --@PItem
         , @ShipmentWhse --@FromWhse
         , @ShipmentSeqLoc --@FromLoc
         , @ShipmentSeqLot --@FromLot
         , @ShipmentWhse --@ToWhse
         , @ToLoc --@ToLoc
         , @ShipmentSeqLot --@ToLot
         , 1 --@PZeroCost
         , NULL --@PTrnNum
         , NULL --@PTrnLine
         , NULL --@PTransNum
         , @ShipmentSeqRsvdNum  --@PRsvdNum
         , @PStat  --@PStat
         , @PickListRefRefNum --@PRefNum
         , @PickListRefRefLineSuf --@PRefLineSuf
         , @PickListRefRefRelease --@PRefRelease
         , NULL --@RefStr
         , NULL --@PUnitCost
         , NULL --@PMatlCost
         , NULL --@PLbrCost
         , NULL --@PFovhdCost
         , NULL --@PVovhdCost
         , NULL --@POutCost
         , NULL --@PTotCost
         , @Infobar OUTPUT --@Infobar

      IF @Severity <> 0
        GOTO ERROR_RETURN


      IF ISNULL(@ItemReservable,0) = 1
       BEGIN
          IF @ShipmentSeqRsvdNum  IS NOT NULL
           BEGIN

              DELETE FROM tmp_ser WHERE tmp_ser.SessionID = @TmpSerID

              INSERT INTO tmp_ser (sessionid, ser_num)
              SELECT @TmpSerID, ser_num
              FROM tmp_ship_seq_serial
              WHERE process_id = @processid AND
                    shipment_id = @ShipmentId AND
                    shipment_line = @ShipmentLine AND
                    shipment_seq = @ShipmentSeq

              EXEC @Severity = MvRsvdCoSp
                               @QtyPicked, --@PQty
                               @TrnitemItem,--@PItem
                               @ShipmentWhse,--@PWhse
                               @ShipmentSeqLoc,--@FrLoc
                               @ShipmentSeqLot,--@FrLot
                               @ToLoc,--@ToLoc
                               @ShipmentSeqLot,--@ToLot
                               NULL,--@PWorkkey
                               @Infobar OUTPUT,--@Infobar
                               NULL,--@FrImportDocId
                               NULL,--@ToImportDocId
                               @PickListRefRefNum,--@PRsvdInvRefNum
                               @PickListRefRefLinesuf,--@PRsvdInvRefLine
                               @PickListRefRefRelease,--@PRsvdInvRefRelease
                               @ShipmentSeqRsvdNum --@PRsvdInvRsvdNum

              IF @Severity <> 0
                 GOTO ERROR_RETURN

          END
          DELETE FROM tmp_ser WHERE tmp_ser.SessionID = @TmpSerID

       END /* @ItemReservable = 1 */

       UPDATE shipment_seq
       SET shipment_seq.qty_picked = shipment_seq.qty_picked - @QtyPicked
       FROM shipment_seq
       WHERE shipment_seq.shipment_id = @ShipmentId AND shipment_seq.shipment_line = @ShipmentLine AND
             shipment_seq.shipment_seq = @ShipmentSeq

       UPDATE pick_list_ref
       SET pick_list_ref.qty_picked = pick_list_ref.qty_picked - @QtyPicked
       FROM pick_list_ref
       WHERE pick_list_ref.pick_list_id = @PickListId AND pick_list_ref.sequence = @PickListRefSequence

       /*issue 158432 update packed qty on coitem when unpack inventory*/
       -- no se usa para transferencias
       /*
       UPDATE coitem
       SET coitem.qty_packed = case when (coitem.qty_packed - @QtyPicked)<0 then 0
                               else coitem.qty_packed - @QtyPicked
                               end
       WHERE coitem.co_num = @PickListRefRefNum and
           coitem.co_line = @PickListRefRefLineSuf and
           coitem.co_release = @PickListRefRefRelease
		*/

      IF @ShipmentSeqRsvdNum IS NULL
       BEGIN
         UPDATE itemloc
         SET Itemloc.assigned_to_be_picked_qty = itemloc.assigned_to_be_picked_qty - @QtyPicked
         FROM itemloc
         WHERE itemloc.whse = @ShipmentWhse AND itemloc.item = @TrnitemItem AND itemloc.loc = @ShipmentSeqLoc

         IF @ItemLotTracked = 1
         BEGIN
            UPDATE lot_loc
            SET lot_loc.assigned_to_be_picked_qty = lot_loc.assigned_to_be_picked_qty - @QtyPicked
            FROM lot_loc
            WHERE lot_loc.whse = @ShipmentWhse AND lot_loc.item = @TrnitemItem AND
                  lot_loc.loc = @ShipmentSeqLoc AND lot_loc.lot = @ShipmentSeqLot
         END /* @ItemLotTracked = 1 */

         IF @ItemSerialTracked = 1
            UPDATE serial
             SET serial.assigned_to_be_picked = 0
             FROM tmp_ship_seq_serial
             Join serial on serial.ser_num = tmp_ship_seq_serial.ser_num
             WHERE process_id = @processid AND
                   tmp_ship_seq_serial.shipment_id = @ShipmentId AND
                   tmp_ship_seq_serial.shipment_line = @ShipmentLine AND
                   tmp_ship_seq_serial.shipment_seq = @ShipmentSeq

      END /* @ShipmentSeqRsvdNum is null */

   END /* Neither field is Checked */

    DELETE shipment_seq_serial
    FROM tmp_ship_seq_serial
    Join shipment_seq_serial on tmp_ship_seq_serial.shipment_id = shipment_seq_serial.shipment_id AND
        tmp_ship_seq_serial.shipment_line = shipment_seq_serial.shipment_line AND
        tmp_ship_seq_serial.shipment_seq = shipment_seq_serial.shipment_seq AND
        tmp_ship_seq_serial.ser_num = shipment_seq_serial.ser_num
    WHERE tmp_ship_seq_serial .shipment_id = @ShipmentId AND
          tmp_ship_seq_serial .shipment_line = @ShipmentLine AND
          tmp_ship_seq_serial .shipment_seq = @ShipmentSeq AND
          tmp_ship_seq_serial.process_id = @processid

    DELETE shipment_seq
    FROM shipment_seq
    WHERE shipment_seq.shipment_id = @ShipmentId AND shipment_seq.shipment_line = @ShipmentLine AND
          shipment_seq.shipment_seq = @ShipmentSeq   AND shipment_seq.qty_picked = 0
          
    --ISSUE 165624 delete the shipment line if no refer shipment seq exist in shipment      
    IF NOT EXISTS(SELECT 1 FROM shipment_seq WHERE shipment_seq.shipment_id = @ShipmentId AND shipment_seq.shipment_line = @ShipmentLine)  
    BEGIN
        DELETE shipment_line
        FROM shipment_line
        WHERE shipment_line.shipment_id = @ShipmentId AND shipment_line.shipment_line = @ShipmentLine
    END
    --ISSUE 165624 delete the shipment if no refer shipment seq AND  shipment line exist in shipment and the delete flag is true
    IF @DeleteEmptyShipment = 1 
    BEGIN
      IF NOT EXISTS(SELECT 1 FROM shipment_seq WHERE shipment_seq.shipment_id = @ShipmentId) AND NOT EXISTS (SELECT 1 FROM shipment_line WHERE shipment_line.shipment_id = @ShipmentId)
      BEGIN
        DELETE shipment
        FROM shipment
        WHERE shipment.shipment_id = @ShipmentId
      END
    END
    
END -- End of Cursor Loop
CLOSE TMP_ShipSeqCurs
DEALLOCATE TMP_ShipSeqCurs



ERROR_RETURN:

-- Build Success Message to return
IF @Severity = 0
BEGIN
  EXEC dbo.MsgAppSp @Infobar OUTPUT
      , 'I=CmdSucceeded'
      , '@!process'
  COMMIT TRANSACTION

END
ELSE
BEGIN
  ROLLBACK TRANSACTION
END

DELETE FROM tmp_ship_seq
WHERE process_id = @ProcessId

DELETE FROM tmp_ship_seq_serial
WHERE process_id = @processid

DELETE tmp_ser
WHERE tmp_ser.SessionID = @TmpSerID

RETURN @Severity
GO


