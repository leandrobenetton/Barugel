/****** Object:  StoredProcedure [dbo].[ZWM_ItemCcPurgeSp]    Script Date: 01/09/2015 14:45:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_ItemCcPurgeSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_ItemCcPurgeSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_ItemCcPurgeSp]    Script Date: 01/09/2015 14:45:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/* $Header: /ApplicationDB/Stored Procedures/ZWM_ItemCcPurgeSp.sp 11    3/04/10 2:38p Dahn $ */
/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2010 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
*************************************************************** 
*/
/* $Archive: /ApplicationDB/Stored Procedures/ZWM_ItemCcPurgeSp.sp $
 *
 * SL8.02 11 rs4588 Dahn Thu Mar 04 14:38:01 2010
 * rs4588 copyright header changes
 *
 * SL8.01 10 109950 DPalmer Fri Aug 29 10:28:13 2008
 * Error in cycle count purge when submitted as a background task
 * Issue 109950 - Always use COMMIT TRANSACTION when @RollBackonProcessCount = 1
 *
 * SL8.01 9 rs3953 Vlitmano Tue Aug 26 17:05:35 2008
 * RS3953 - Changed a Copyright header?
 *
 * SL8.01 8 rs3953 Vlitmano Mon Aug 18 15:27:20 2008
 * Changed a Copyright header information(RS3959)
 *
 * SL8.00 7 RS2968 nkaleel Fri Feb 23 03:11:39 2007
 * changing copyright information
 *
 * SL8.00 6 RS3387 kdatla Tue Dec 12 09:21:03 2006
 *
 * SL8.00 4 RS2968 prahaladarao.hs Tue Jul 11 09:32:52 2006
 * RS 2968, Name change CopyRight Update.
 *
 * SL7.05 3 91818 NThurn Fri Jan 06 15:53:38 2006
 * Inserted standard External Touch Point call.  (RS3177)
 *
 * $NoKeywords: $
 */
CREATE PROCEDURE [dbo].[ZWM_ItemCcPurgeSp] (
   @RollBackonProcessCount flag,			
   @CurWhse         WhseType,
   @CycleStatus     NVARCHAR(3),  -- CycleStatusType UDDT can only store 1 character
   @AbcCode         NVARCHAR(3),  -- AbcCodeType UDDT can only store 1 character
   @BegItem         ItemType,
   @EndItem         ItemType,
   @BegLoc          LocType,
   @EndLoc          LocType,
   @BegZone         DescriptionType,
   @EndZone         DescriptionType,
   @BegCycleDate    DateType,
   @EndCycleDate    DateType,
   @BegProductCode  ProductCodeType,
   @EndProductCode  ProductCodeType,
   @BegFamCode		FamilyCodeType,
   @EndFamCode		FamilyCodeType,
   @BegPlanCode     UserCodeType,
   @EndPlanCode     UserCodeType,
   @ProcessCount    Int OUTPUT,
   @Infobar         InfobarType OUTPUT,
   @StartingDateOffset   DateOffsetType	= NULL,
   @EndingDateOffset   DateOffsetType	= NULL
)
AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_ItemCcPurgeSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_ItemCcPurgeSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @RollBackonProcessCount
	 ,  @CurWhse
         , @CycleStatus
         , @AbcCode
         , @BegItem
         , @EndItem
         , @BegLoc
         , @EndLoc
         , @BegZone
         , @EndZone
         , @BegCycleDate
         , @EndCycleDate
         , @BegProductCode
         , @EndProductCode
         , @BegFamCode
         , @EndFamCode
         , @BegPlanCode
         , @EndPlanCode
         , @ProcessCount OUTPUT
         , @Infobar OUTPUT
         , @StartingDateOffset
         , @EndingDateOffset
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
 
	IF @RollBackonProcessCount =1
		BEGIN TRANSACTION
	
DECLARE
   @Severity        Int,
   @CycWhse         WhseType,
   @CycItem         ItemType,
   @CycRowPointer   RowPointerType

declare @Itemwhse table (
  item nvarchar(80)
, whse nvarchar(80)
primary key(item, whse)
)

EXEC dbo.ApplyDateOffsetSp @BegCycleDate OUTPUT, @StartingDateOffset, 0
EXEC dbo.ApplyDateOffsetSp @EndCycleDate OUTPUT, @EndingDateOffset, 1

SET @Infobar = NULL
SET @Severity = 0

IF @CycleStatus IS NULL
   SET @CycleStatus = 'NCE'
IF @AbcCode IS NULL
   SET @AbcCode = 'ABC'

IF NOT EXISTS (
   SELECT 1 FROM whse WHERE whse = @CurWhse
)
BEGIN
   EXEC @Severity = MsgAppSp @Infobar OUTPUT, 'E=NoExist1', '@whse', '@whse.whse', @CurWhse
   GOTO ERROR_RETURN
END

set @BegItem = isnull(@BegItem, dbo.LowCharacter())
set @EndItem = isnull(@EndItem, dbo.HighCharacter())
set @BegLoc = isnull(@BegLoc, dbo.LowCharacter())
set @EndLoc = isnull(@EndLoc, dbo.HighCharacter())
set @BegZone = isnull(@BegZone, dbo.LowCharacter())
set @EndZone = isnull(@EndZone, dbo.HighCharacter())
set @BegCycleDate = isnull(@BegCycleDate, dbo.LowDate())
set @EndCycleDate = isnull(@EndCycleDate, dbo.HighDate())
set @BegProductCode = isnull(@BegProductCode, dbo.LowCharacter())
set @EndProductCode = isnull(@EndProductCode, dbo.HighCharacter())
set @BegFamCode = isnull(@BegFamCode, dbo.LowCharacter())
set @EndFamCode = isnull(@EndFamCode, dbo.HighCharacter())
set @BegPlanCode = isnull(@BegPlanCode, dbo.LowCharacter())
set @EndPlanCode = isnull(@EndPlanCode, dbo.HighCharacter())

insert into @Itemwhse
SELECT distinct cycle.item, cycle.whse
FROM cycle
   inner JOIN item ON
      item.item = cycle.item
      AND item.product_code BETWEEN @BegProductCode AND @EndProductCode
      AND ISNULL(item.family_code,dbo.LowCharacter())
          BETWEEN @BegFamCode AND @EndFamCode
      AND ISNULL(item.plan_code,dbo.LowString('UserCodeType'))
          BETWEEN @BegPlanCode AND @EndPlanCode
      AND CHARINDEX(item.abc_code, @AbcCode) > 0
   inner JOIN location ON
      location.loc = cycle.loc
      AND ISNULL(location.ZWM_Zone,dbo.LowCharacter())
          BETWEEN @BegZone AND @EndZone   
WHERE cycle.whse = @CurWhse
AND cycle.item         BETWEEN @BegItem AND @EndItem
AND cycle.loc          BETWEEN @BegLoc AND @EndLoc
AND cycle.cycle_date   BETWEEN @BegCycleDate AND @EndCycleDate
AND CHARINDEX(cycle.stat, @CycleStatus) > 0

delete cycle
FROM cycle
   inner JOIN item ON
      item.item = cycle.item
      AND item.product_code BETWEEN @BegProductCode AND @EndProductCode
      AND ISNULL(item.family_code,dbo.LowCharacter())
          BETWEEN @BegFamCode AND @EndFamCode
      AND ISNULL(item.plan_code,dbo.LowString('UserCodeType'))
          BETWEEN @BegPlanCode AND @EndPlanCode
      AND CHARINDEX(item.abc_code, @AbcCode) > 0
   inner JOIN location ON
      location.loc = cycle.loc
      AND ISNULL(location.ZWM_Zone,dbo.LowCharacter())
          BETWEEN @BegZone AND @EndZone   
WHERE cycle.whse = @CurWhse
AND cycle.item         BETWEEN @BegItem AND @EndItem
AND cycle.loc          BETWEEN @BegLoc AND @EndLoc
AND cycle.cycle_date   BETWEEN @BegCycleDate AND @EndCycleDate
AND CHARINDEX(cycle.stat, @CycleStatus) > 0

SET @ProcessCount = @@rowcount

UPDATE itemwhse
SET cnt_in_proc = 0
from itemwhse
   inner join @Itemwhse as iw on
      iw.item = itemwhse.item
      and iw.whse = itemwhse.whse
where itemwhse.cnt_in_proc = 1
and not exists (SELECT 1 FROM cycle WHERE cycle.whse = itemwhse.whse
                            AND cycle.item = itemwhse.item)

   IF @RollBackonProcessCount =1
      COMMIT TRANSACTION

ERROR_RETURN:
IF @Severity <> 0
   EXEC RaiseErrorSp @Infobar, @Severity, 1
RETURN @Severity

GO


