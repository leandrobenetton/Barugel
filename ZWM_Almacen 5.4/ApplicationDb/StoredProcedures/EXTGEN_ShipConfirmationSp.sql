/****** Object:  StoredProcedure [dbo].[EXTGEN_ShipConfirmationSp]    Script Date: 01/09/2015 15:04:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXTGEN_ShipConfirmationSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXTGEN_ShipConfirmationSp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_ShipConfirmationSp]    Script Date: 01/09/2015 15:04:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[EXTGEN_ShipConfirmationSp] (
 @ShipmentId      ShipmentIdType
,@Curdate         DateTime
,@IgnoreLCR       ListYesNoType = 1
,@IgnoreCount     ListYesNoType
,@InfoBar         InfobarType    output
)
as

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_ShipConfirmationSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_ShipConfirmationSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @ShipmentId
         , @Curdate
         , @IgnoreLCR
         , @IgnoreCount
         , @InfoBar OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
   
   

 
-- Si el ZWM_RefType is null, significa que el pick list es de pedido, por lo cual sale del EXTGEN y ejecuta el 
--SP estandar
DECLARE 
@Severity int,
@PLRefType char(1)

SET @Severity = 0

SELECT distinct ZWM_RefType FROM pick_list p
JOIN shipment_line s
ON p.pick_list_id = s.pick_list_id
WHERE s.shipment_id = @ShipmentId

IF @PLRefType is null OR @PLRefType = 'O'
BEGIN
	SET @Severity = 1
	RETURN @Severity
END
 
declare
@PromptMsg       InfobarType
,@PromptButtons   InfobarType
,@RefNum          CoNumType
,@RefLineSuf      CoLineType
,@RefRelease      CoReleaseType
,@Loc             LocType
,@Lot             LotType
,@Qty             QtyUnitType
,@ShipmentLine    ShipmentLineType
,@ShipmentSeq     ShipmentSequenceType
,@trnitemDate      DateTime
,@trnitemRowPointer   RowPointerType
,@ShipmentSeqRowPointer   RowPointerType
,@Um              UMtype
,@Seq             int
,@WorkKey         varchar(MAX)
,@TmpSerID        UNIQUEIDENTIFIER
,@SerNum          SerNumType
,@SerTracked      ListYesNoType
,@Whse            WhseType
,@Item            ItemType
,@ItemDescription    	DescriptionType
,@ItemSerialTracked  	ListYesNoType
,@ItemLotTracked     	ListYesNoType
,@QtyOnHand	      	   QtyUnitType


SET @IgnoreLCR = isnull(@IgnoreLCR, 0)
SET @IgnoreCount = isnull(@IgnoreCount, 0)
SET @CurDate = isnull(@CurDate, dbo.GetSiteDate(getdate()))
SET @Severity = 0
SET @Seq = 0


DECLARE curs CURSOR LOCAL STATIC FOR
SELECT shipment.shipment_id
, shipment_line.shipment_line
, shipment_seq.shipment_seq
, pick_list_ref.ref_num
, pick_list_ref.ref_line_suf
, shipment_seq.loc
, shipment_seq.lot
, shipment_seq.qty_picked
, trnitem.recorddate
, trnitem.u_m
, trnitem.rowpointer
, item.serial_tracked
, shipment_seq.rowpointer
, shipment.whse
, trnitem.item
FROM shipment
JOIN shipment_line ON shipment_line.shipment_id = shipment.shipment_id
JOIN shipment_seq ON shipment_seq.shipment_id = shipment_line.shipment_id AND shipment_seq.shipment_line = shipment_line.shipment_line
JOIN pick_list_ref ON pick_list_ref.pick_list_id = shipment_line.pick_list_id AND pick_list_ref.sequence = shipment_line.pick_list_ref_sequence
JOIN trnitem ON trnitem.trn_num = pick_list_ref.ref_num AND trnitem.trn_line = pick_list_ref.ref_line_suf
JOIN item ON item.item = trnitem.item
WHERE shipment.shipment_id = @ShipmentId
ORDER BY pick_list_ref.ref_num, pick_list_ref.ref_line_suf, pick_list_ref.ref_release

OPEN curs
WHILE 1 = 1
BEGIN
   FETCH curs INTO @ShipmentId, @ShipmentLine, @ShipmentSeq, @RefNum, @RefLineSuf, @Loc, @Lot, @Qty, @trnitemDate, @Um, @trnitemRowPointer, @SerTracked, @ShipmentSeqRowPointer, @Whse, @Item
   IF @@FETCH_STATUS <> 0 BREAK

/*
No se ejecuta para transferencias

   -- Check LCR
   select @Infobar = null
        , @PromptButtons = null
        , @PromptMsg = null
        , @Severity = 0

   exec @Severity =  ShipLcrSp
           @PCoNum        = @RefNum
         , @PTransDate    = @CurDate
         , @PMText        = 'Ship'
         , @PromptMsg     = @PromptMsg  OUTPUT
         , @PromptButtons = @PromptButtons OUTPUT
         , @Infobar       = @Infobar  OUTPUT

   if @Severity = 16
      return @Severity

   if @Severity = 0 and @PromptMsg is not null and @IgnoreLCR = 0
      return @Severity
*/



   -- Check cycle count
   select @Infobar = null
        , @PromptButtons = null
        , @PromptMsg = null
        , @Severity = 0

	EXEC @Severity = ItemwhseCheckCntInProcSp
	  @Whse
	, @Item
	, 0   --@CheckLotTracked
	, 0   --@CheckSerialTracked
	, ''  --@FormTitle
	, @ItemDescription OUTPUT
	, @UM OUTPUT
	, @ItemSerialTracked OUTPUT
	, @ItemLotTracked OUTPUT
	, @QtyOnHand OUTPUT
	, @Infobar OUTPUT
	, @PromptMsg OUTPUT
	, @PromptButtons OUTPUT	

   IF @Severity = 16
      RETURN @Severity

	IF @Severity = 0 and @PromptMsg is not null and @IgnoreCount = 0
	BEGIN
	   SET @Infobar = @PromptMsg
       IF EXISTS (SELECT 1 FROM tmp_ship WHERE SessionID = dbo.SessionIDSp()                        
                              AND shipment_id = @ShipmentId )
          BEGIN
             DELETE FROM tmp_ship  WHERE SessionID = dbo.SessionIDSp() AND shipment_id = @ShipmentId
          END  
	   RETURN @Severity
   END

		
   SET @WorkKey = null
   SET @WorkKey = 'ship' + cast(@ShipmentSeqRowPointer as varchar(MAX))
   SET @Severity = 0
--issue 164599 Set the MAX SEQ For ship same CO line but different shipment ID at one time.
   IF EXISTS (SELECT 1 FROM tmp_ship WHERE SessionID = dbo.SessionIDSp() 
                            AND co_num = @RefNum 
                            AND co_line = @RefLineSuf 
                            --AND co_release = @RefRelease 
                            AND sequence = @Seq 
                            AND shipment_id <> @ShipmentId )
       BEGIN
          SELECT @Seq = MAX(sequence)+1 FROM tmp_ship WHERE SessionID = dbo.SessionIDSp() 
                                                            AND co_num = @RefNum 
                                                            AND co_line = @RefLineSuf 
                                                            --AND co_release = @RefRelease
       END
       
   EXEC @Severity = COShippingPopulateTmpShpSP
        @CoNum              = @RefNum
      , @CoLine             = @RefLineSuf
      , @CoRelease          = 0
      , @UbDoNum            = null
      , @UbDoLine           = null
      , @UbQtyToShipConv    = @Qty
      , @UbQtyToShip        = @Qty
      , @UbLoc              = @Loc
      , @UbLot              = @Lot
      , @UbCrReturn         = 0
      , @UbRtnToStk         = 1
      , @UbByCons           = null
      , @UbReasonCode       = null
      , @UbWorkkey          = @WorkKey
      , @UbTransDate        = @CurDate
      , @RowPointer         = @trnitemRowPointer
      , @UbSequence         = @Seq
      , @UbOrigInvoice      = null
      , @UbReasonText       = null
      , @UbImportdocId      = null
      , @UbExportDocId      = null
      , @PackNum            = null
      , @ContainerNum       = null
      , @UM                 = @UM
      , @UbUserName         = null
      , @UbEsigReason       = null
      , @UbEsigRowPointer   = null
      , @UbEsigEncryptedPassword = null
      , @RecordDate         = @trnitemDate
      , @ShipmentId         = @ShipmentId

      IF @Severity <> 0
         RETURN @Severity

      SET @Seq = @seq + 1

      IF @SerTracked = 1
      BEGIN
         DECLARE ser_curs CURSOR LOCAL STATIC FOR
         SELECT ser_num
         FROM shipment_seq_serial ser
         WHERE ser.shipment_id = @ShipmentId
           AND ser.shipment_line = @ShipmentLine
           AND ser.shipment_seq  = @ShipmentSeq
         
         OPEN ser_curs
         WHILE 1 = 1
         BEGIN
            FETCH ser_curs INTO @SerNum
            IF @@FETCH_STATUS <> 0 BREAK

		      -- Populate the tmp_ser to ship serial
		      EXEC SerialSaveSp @SerNum
					      , @TmpSerID
					      , @WorkKey
					      , @Infobar
      			
		   end
		   close ser_curs
		   deallocate ser_curs
      end -- SerTracked				
      			
end
close curs
deallocate curs


RETURN @Severity
GO


