/****** Object:  StoredProcedure [dbo].[EXTGEN_UnpickPickListProcessSp]    Script Date: 01/09/2015 15:03:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXTGEN_UnpickPickListProcessSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXTGEN_UnpickPickListProcessSp]
GO

/****** Object:  StoredProcedure [dbo].[EXTGEN_UnpickPickListProcessSp]    Script Date: 01/09/2015 15:03:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[EXTGEN_UnpickPickListProcessSp] (
 @processid     RowPointerType
,@InfoBar       InfobarType output
)
as

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_EXTGEN_UnpickPickListProcessSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_EXTGEN_UnpickPickListProcessSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @processid
         , @InfoBar OUTPUT

      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.



-- Si el ZWM_RefType is null, significa que el pick list es de pedido, por lo cual sale del EXTGEN y ejecuta el 
--SP estandar
DECLARE 
@Severity int,
@PLRefType char(1)

SET @Severity = 0

select top 1 @PLRefType = pl.ZWM_RefType from pick_list pl
join tmp_pick_list_loc tpl
on pl.pick_list_id = tpl.pick_list_id
where tpl.process_id = @processid

IF @PLRefType is null OR @PLRefType = 'O'
BEGIN
	SET @Severity = 1
	RETURN @Severity
END




declare
 @picklist  PickListIDType
,@fromloc       LocType
,@fromlot       LotType
,@toloc       LocType
,@tolot       LotType
,@Qty       QtyUnitType

,@RefNum		CoJobProjTrnNumType
,@RefLine		CoLineSuffixProjTaskTrnLineType
,@RefRelease	CoReleaseOperNumType
	
/*,@conum     CoNumType
,@coline    CoLineType
,@corelease CoReleaseType*/
,@item      ItemType
,@whse      WhseType
,@PDate     DateType
,@PackLoc   LocType
,@OrigLoc   LocType
,@sertracked    ListYesNoType
,@ItemLocRowPointer RowPointerType
,@Status    PickListStatusType
,@Seq   PickListSequenceType
,@RefPointer RowPointerType
,@LocPointer    RowPointerType
,@TmpSerID  RowPointerType
,@RsvdNum RsvdNumType
,@RsvdQty QtyUnitType
,@AssignedQty QtyUnitType
,@PickLocQtyPicked QtyUnitType
,@RefStr      RefStrType     
,@QtyToShip      QtyUnitType
,@serial SerNumType
,@HadAddedToShip ListYesNoType
,@QtyAvailableToAddToShip      QtyUnitType
,@QtyPickRefQtyPicked QtyUnitType

SET @TmpSerID = dbo.TmpSerId()
SET @PDate = dbo.GetSiteDate(getdate())

declare curs cursor local static for
select tmp_pick_list_loc.pick_list_id, tmp_pick_list_loc.loc, tmp_pick_list_loc.lot, tmp_pick_list_loc.qty_pick, tmp_pick_list_loc.ref_num
      ,tmp_pick_list_loc.ref_line_suf, tmp_pick_list_loc.ref_release, orig_loc, ser_tracked
      ,pick_list_ref.sequence, pick_list_ref.rowpointer, pick_list_loc.rowpointer
      ,trnitem.item, pick_list.whse, pick_list.status, /*pick_list_loc.qty_picked*/ pick_list_ref.qty_picked
from tmp_pick_list_loc
join pick_list_ref on pick_list_ref.pick_list_id = tmp_pick_list_loc.pick_list_id
                  and pick_list_ref.ref_num = tmp_pick_list_loc.ref_num
                  and pick_list_ref.ref_line_suf = tmp_pick_list_loc.ref_line_suf
                  and pick_list_ref.ref_release = tmp_pick_list_loc.ref_release
left outer join pick_list_loc on pick_list_loc.pick_list_id = tmp_pick_list_loc.pick_list_id
                  and pick_list_loc.sequence = pick_list_ref.sequence
                  and pick_list_loc.loc = tmp_pick_list_loc.orig_loc
                  and (pick_list_loc.lot = tmp_pick_list_loc.lot or pick_list_loc.lot is null)
join pick_list on pick_list.pick_list_id = tmp_pick_list_loc.pick_list_id
join trnitem on trnitem.trn_num = tmp_pick_list_loc.ref_num
           and trnitem.trn_line = tmp_pick_list_loc.ref_line_suf
/*join coitem on coitem.co_num = tmp_pick_list_loc.ref_num
           and coitem.co_line = tmp_pick_list_loc.ref_line_suf
           and coitem.co_release = tmp_pick_list_loc.ref_release*/
WHERE process_id = @processid
  and selected = 1
ORDER BY tmp_pick_list_loc.ref_num, tmp_pick_list_loc.ref_line_suf, tmp_pick_list_loc.ref_release

OPEN curs
WHILE 1 = 1
BEGIN
    FETCH curs INTO @picklist, @toloc, @tolot, @qty, @RefNum
                   ,@RefLine, @RefRelease, @origloc, @sertracked
                   ,@seq, @refpointer, @locpointer, @item, @whse, @status,@PickLocQtyPicked
    IF @@FETCH_STATUS <> 0 BREAK

    IF charindex(@status, 'OP') = 0
    BEGIN
       SET @infobar = null
       EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT, 'E=MustCompareIsOrIs', '@pick_list.status', '@:PickListStatus:O', '@:PickListStatus:P'
       RETURN @severity
    END
    
    SET @RefStr = 'pick' + CONVERT(NVARCHAR(50),@processid) + CONVERT(NVARCHAR(10),@RefLine)
    select @FromLoc = pick_list.pack_loc
    from pick_list where pick_list.pick_list_id = @picklist

    /*SELECT @QtyPickRefQtyPicked = sum(pick_list_loc.qty_picked) from pick_list_ref 
                                        join pick_list_loc on pick_list_loc.pick_list_id = pick_list_ref.pick_list_id
                                                          and pick_list_loc.sequence = pick_list_ref.sequence
                                        WHERE pick_list_ref.pick_list_id = @picklist AND pick_list_ref.RowPointer = @refpointer
                                          AND ISNULL(pick_list_loc.lot,'') = ISNULL(@tolot,'')*/
                                          
	SELECT @QtyPickRefQtyPicked = sum(qty_picked) 
	from pick_list_ref 
	WHERE pick_list_ref.pick_list_id = @picklist AND pick_list_ref.RowPointer = @refpointer
          
          
    SET @QtyToShip = 0
    EXEC GetPickListDetailInformationSp   @picklist       
                                          ,@tolot        
                                          ,@FromLoc        
                                          ,@seq     
                                          ,@QtyPickRefQtyPicked
                                          ,@QtyToShip       OUTPUT
                                          ,@InfoBar         OUTPUT
    IF  @QtyToShip < @qty --No enough qty for unpick on pick list.
    BEGIN
       EXEC dbo.MsgAppSp @Infobar OUTPUT, 'E=NoCompare>', '@!Quantity', '@pick_list_ref.qty_picked'

       EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT, 'E=NoCompare4'
                                                    , '@!Quantity'
                                                    ,@qty
                                                    , '@!PickList'
                                                    ,'!PickList'
                                                    , @picklist 
                                                    , '@coitem.item'
                                                    ,@item
                                                    ,'@itemloc'
                                                    ,@toloc
                                                    ,'@lot.lot'
                                                    ,@tolot
       RETURN @severity
    END      
    
    -- Check if the serial number had been added to shipment
    IF @sertracked = 1
    BEGIN
       DECLARE serCurs CURSOR LOCAL STATIC FOR
       SELECT ser_num
       FROM tmp_pick_list_serial
       WHERE process_id = @processid 
         AND picked = 1
         AND ref_num = @RefNum   
         AND ref_line_suf = @RefLine 
         AND ref_release = @RefRelease      
         AND ISNULL(lot,'') = ISNULL(@tolot,'')
         
       OPEN serCurs
        WHILE 1 = 1
        BEGIN
            FETCH serCurs INTO @serial
            IF @@FETCH_STATUS <> 0 break 
            SET @HadAddedToShip = 0
            EXEC ValidateSerialonShipmentSp      @picklist   
                                                ,@seq
                                                ,@serial             
                                                ,@HadAddedToShip    OUTPUT
                                                ,@InfoBar           OUTPUT
            IF  @HadAddedToShip = 1
            BEGIN
               EXEC  @Severity = dbo.MsgAppSp @Infobar OUTPUT, 'E=ExistIn', '@!PickList', '@tmp_ser.ser_num',@serial,'@:Shipment'
               RETURN @severity
            END
        END 
        CLOSE serCurs
        DEALLOCATE serCurs
    END
    
    
    IF @toloc <> @OrigLoc
    BEGIN
        UPDATE pick_list_loc
        SET loc = @toloc
        WHERE pick_list_loc.rowpointer = @locpointer

        IF @sertracked = 1
            UPDATE pick_list_serial
            SET loc = @toloc
            WHERE pick_list_serial.pick_list_id = @picklist
              AND pick_list_serial.sequence = @seq
              AND pick_list_serial.loc = @origloc
              AND pick_list_serial.lot = @tolot
    end

    -- Check Reservations
    SET @RsvdNum = null
    SET @RsvdQty = 0
    SELECT @RsvdNum = rsvd_inv.rsvd_num,
           @RsvdQty = rsvd_inv.qty_rsvd
    FROM rsvd_inv
    WHERE rsvd_inv.item = @item
      AND rsvd_inv.loc = @fromloc
      AND isnull(rsvd_inv.lot, '') = isnull(@tolot, '')
      AND rsvd_inv.ref_num = @RefNum
      AND rsvd_inv.ref_line = @RefLine
      AND rsvd_inv.ref_release = @RefRelease

   --  If the from loc does not exist for this item and whse, add it.
   select @ItemLocRowPointer = NULL
   SELECT
   @ItemlocRowPointer = itemloc.RowPointer
   FROM itemloc
   WHERE whse = @Whse AND item = @Item AND loc = @ToLoc

    SET @AssignedQty = @Qty

    IF @ItemlocRowPointer IS NULL
   BEGIN
      EXEC @Severity = dbo.ItemLocAddSp
          @Whse        = @Whse
         , @Item        = @Item
         , @Loc         = @ToLoc
         , @UcFlag      = 0
         , @UnitCost    = 0
         , @MatlCost    = 0
           , @LbrCost     = 0
           , @FovhdCost   = 0
           , @VovhdCost   = 0
           , @OutCost     = 0
           , @SetPermFlag = 0
           , @RowPointer  = @ItemLocRowPointer OUTPUT
           , @Infobar     = @Infobar OUTPUT
       IF @Severity <> 0
         RETURN @Severity
   END

    IF @sertracked = 1
    BEGIN
       DELETE tmp_ser WHERE tmp_ser.SessionID = @TmpSerID AND ref_str = @RefStr

       INSERT INTO tmp_ser (sessionid, ser_num, ref_str)
       SELECT @TmpSerID, ser_num, ref_str
       FROM tmp_pick_list_serial
       WHERE process_id = @processid and picked = 1 AND ref_str = @RefStr
    END

   IF @RsvdNum IS NOT NULL
       BEGIN
          DELETE tmp_ser WHERE tmp_ser.SessionID = @TmpSerID AND ref_str = @RefStr
          IF @sertracked = 1
          BEGIN
             INSERT INTO tmp_ser (sessionid, ser_num, ref_str)
             SELECT @TmpSerID, ser_num, ref_str
             FROM tmp_pick_list_serial
             WHERE process_id = @processid and picked = 1  AND ref_str = @RefStr

             SELECT @Rsvdqty = COUNT(tmp_pick_list_serial.ser_num)
             FROM tmp_pick_list_serial
             join serial on serial.ser_num = tmp_pick_list_serial.ser_num and serial.rsvd_num = @RsvdNum
             WHERE process_id = @processid and picked = 1
          END
          ELSE
             IF @PickLocQtyPicked - @RsvdQty - @Qty > 0 SET @RsvdQty = 0
             ELSE SET @RsvdQty = @Qty - (@PickLocQtyPicked - @RsvdQty)


          IF @RsvdQty > 0
          BEGIN
              EXEC @Severity = dbo.MvRsvdCoSp
                               @RsvdQty,         --@PQty
                               @Item,        --@PItem
                               @Whse,        --@PWhse
                               @fromloc,     --@FrLoc
                               @Tolot,     --@FrLot
                               @toloc,       --@ToLoc
                               @tolot,       --@ToLot
                               @RefStr,         --@PWorkkey
                               @Infobar OUTPUT, --@Infobar
                               NULL,         --@FrImportDocId
                               NULL,         --@ToImportDocId
                               @RefNum,       --@PRsvdInvRefNum
                               @RefLine,      --@PRsvdInvRefLine
                               @RefRelease,   --@PRsvdInvRefRelease
                               null          --@PRsvdInvRsvdNum


                IF @Severity <> 0
                   return @severity
             END
           
             IF ISNULL(@RsvdQty,0) > @Qty
                SET @AssignedQty = 0
             ELSE
                 SET @AssignedQty = @Qty - ISNULL(@RsvdQty,0)

         END
         
            EXEC @Severity = dbo.MvPostSp
               'P'           --@PType
            , @PDate
            , @Qty
            , @Item
            , @Whse         -- from
            , @FromLoc      -- from
            , @ToLot        -- from
            , @Whse         -- to
            , @ToLoc        -- to
            , @ToLot        -- to
            , 1             --@PZeroCost
            , NULL
            , NULL
            , NULL
            , @RsvdNum     --@PRsvdNum
            , 'I'          --@PStat
            , @RefNum       --@PRefNum
            , @RefLine      --@PRefLineSuf
            , @RefRelease   --@PRefRelease
            , @RefStr
            , NULL
            , NULL
            , NULL
            , NULL
            , NULL
            , NULL
            , NULL
            , @Infobar OUTPUT

           IF @Severity <> 0
              RETURN @Severity
      
         DELETE FROM tmp_ser WHERE tmp_ser.SessionID = @TmpSerID AND ref_str = @RefStr




       update pick_list
       set status = 'O'
       where pick_list.pick_list_id = @picklist

       update pick_list_loc
       set qty_picked = qty_picked - @qty
       where pick_list_loc.rowpointer = @locpointer

       update pick_list_ref
       set qty_picked = qty_picked - @qty
       where pick_list_ref.rowpointer = @RefPointer

        if @sertracked = 1
            update pick_list_serial
            set picked = 0
            from tmp_pick_list_serial
            where pick_list_serial.pick_list_id = @picklist
              --and pick_list_serial.sequence = @seq
              and pick_list_serial.ser_num = tmp_pick_list_serial.ser_num
              and tmp_pick_list_serial.process_id = @processid
              and tmp_pick_list_serial.picked = 1
              AND ref_str = @RefStr
              
        SET @QtyAvailableToAddToShip = 0 
        SELECT @QtyAvailableToAddToShip  = SUM(ISNULL(pick_list_ref.qty_picked,0)) from pick_list_ref
            WHERE pick_list_ref.pick_list_id = @picklist
            
        IF ISNULL(@QtyAvailableToAddToShip,0) > 0
        BEGIN
            SET @QtyAvailableToAddToShip = 0 
            --update the status of pick list
            SELECT @QtyAvailableToAddToShip  = SUM(ISNULL(pick_list_ref.qty_picked,0) - ISNULL(qty_on_shipment,0)) from pick_list_ref 
              LEFT JOIN (SELECT SUM(ISNULL(shipment_seq.qty_picked,0)) qty_on_shipment,shipment_line.pick_list_id,shipment_line.pick_list_ref_sequence 
                   FROM shipment_line                 
                   JOIN shipment_seq 
                     ON shipment_seq.shipment_id = shipment_line.shipment_id
                    AND shipment_seq.shipment_line = shipment_line.shipment_line 
                    JOIN shipment ON shipment.shipment_id = shipment_line.shipment_id
                    WHERE shipment_line.pick_list_id = @picklist AND shipment.status = 'S'
                    GROUP BY shipment_line.pick_list_id,shipment_line.pick_list_ref_sequence) line
                      ON line.pick_list_id = pick_list_ref.pick_list_id
                     AND line.pick_list_ref_sequence = pick_list_ref.sequence
                     WHERE pick_list_ref.pick_list_id = @picklist
            IF  @QtyAvailableToAddToShip = 0
              update pick_list
               set status = 'S'
               where pick_list.pick_list_id = @picklist
            ELSE  
            BEGIN
                SET @QtyAvailableToAddToShip = 0  
                SELECT @QtyAvailableToAddToShip  = SUM(ISNULL(pick_list_ref.qty_picked,0) - ISNULL(qty_on_shipment,0)) from pick_list_ref 
                  LEFT JOIN (SELECT SUM(ISNULL(shipment_seq.qty_picked,0)) qty_on_shipment,shipment_line.pick_list_id,shipment_line.pick_list_ref_sequence 
                       FROM shipment_line                 
                       JOIN shipment_seq 
                         ON shipment_seq.shipment_id = shipment_line.shipment_id
                        AND shipment_seq.shipment_line = shipment_line.shipment_line 
                        JOIN shipment ON shipment.shipment_id = shipment_line.shipment_id
                        WHERE shipment_line.pick_list_id = @picklist 
                        GROUP BY shipment_line.pick_list_id,shipment_line.pick_list_ref_sequence) line
                          ON line.pick_list_id = pick_list_ref.pick_list_id
                         AND line.pick_list_ref_sequence = pick_list_ref.sequence
                         WHERE pick_list_ref.pick_list_id = @picklist
                IF  @QtyAvailableToAddToShip = 0
                  update pick_list
                   set status = 'A'
                   where pick_list.pick_list_id = @picklist
            END  
        END
              
         -- Update itemloc and lot_loc
         IF @AssignedQty <> 0
         BEGIN
             -- decrease original locs
            update itemloc
            set assigned_to_be_picked_qty = assigned_to_be_picked_qty - @AssignedQty
            where whse = @Whse
              AND item = @Item
              AND loc = @FromLoc

            if @tolot is not null
            update lot_loc
            set assigned_to_be_picked_qty = assigned_to_be_picked_qty - @AssignedQty
            where whse = @Whse
              AND item = @Item
              AND loc = @fromloc
              and lot = @tolot

            -- increase new locs
            update itemloc
            set assigned_to_be_picked_qty = assigned_to_be_picked_qty + @AssignedQty
            where whse = @Whse
              AND item = @item
              AND loc = @toLoc

            if @tolot is not null
            update lot_loc
            set assigned_to_be_picked_qty = assigned_to_be_picked_qty + @AssignedQty
            where whse = @Whse
              AND item = @Item
              AND loc = @toloc
              and lot = @tolot

         END  --  @AssignedQty <> 0

end
close curs
deallocate curs

IF @Severity = 0
   EXEC dbo.MsgAppSp @Infobar OUTPUT, 'I=CmdSucceeded', '@!process'

RETURN @Severity
GO


