/****** Object:  StoredProcedure [dbo].[ZWM_GenerateTransferPickListSp]    Script Date: 01/09/2015 14:42:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_GenerateTransferPickListSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_GenerateTransferPickListSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_GenerateTransferPickListSp]    Script Date: 01/09/2015 14:42:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Genera el Pick List para las ordenes de transferencias	
CREATE PROCEDURE [dbo].[ZWM_GenerateTransferPickListSp] (
 @ProcessId                 RowPointerType
,@PPicker                   UserNameType
,@PPackLoc                  LocType
,@RouteId					ZwmIdRouteMapType
,@LocFromRsvd				ListYesNoType= NULL	-- si viene en 1, carga las cantidades desde las reservas 
,@BGTaskProcessId1          RowPointerType  OUTPUT
,@BGTaskProcessId2          RowPointerType  OUTPUT
,@InfoBar                   InfoBarType     OUTPUT
)
as


 -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_GenerateTransferPickListSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_GenerateTransferPickListSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
			 @ProcessId
			,@PPicker
			,@PPackLoc
			,@RouteId
			,@LocFromRsvd
			,@BGTaskProcessId1  OUTPUT
			,@BGTaskProcessId2  OUTPUT
			,@InfoBar           OUTPUT	
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.

 
DECLARE
 @Severity      INT
,@PickListId    PickListIdType
,@group         smallint
,@Whse          WhseType
,@Picker        UserNameType
,@PackLoc       LocType
,@Reftype       RefTypeIJOPRSTType
,@Conum         CoNumType
,@Coline        CoLineType
,@corelease     CoReleaseType
,@item          ItemType
,@qtytopick     QtyUnitType
,@qtypicked     QtyUnitType
,@PickId        PickListIdType
,@Seq           smallint
,@lot           lottype
,@loc           loctype
,@sernum        sernumtype
,@picked        listyesnotype
,@Reserved      ListYesNoType
,@ItemWhseCntInProc      ListYesNoType
,@RsvdNum       RsvdNumType   
,@ToWhse		WhseType
,@CTrnNum		TrnNumType
,@CTrnLine		TrnLineType

DECLARE @LocalSite SiteType
SELECT @LocalSite = parms.site
from parms

SET @Severity = 0
set @BGTaskProcessId1 = NEWID()
set @BGTaskProcessId2 = NEWID()
-----------------------------------------------------
--SET IDENTITY_INSERT pick_list_mst ON
-----------------------------------------------------

declare @picks table(
 Grp        smallint
,PickListId PickListIdType
)

declare pick_curs cursor local static for
SELECT distinct pick_group, whse, pack_loc, picker, ZWM_ToWhse
from tmp_pick_list
where process_id = @ProcessId

open pick_curs
while 1 = 1
begin
    FETCH pick_curs INTO @group, @Whse, @PackLoc, @Picker, @ToWhse
    if @@FETCH_STATUS <> 0 break

    if @Picker is null set @Picker = @PPicker
    if @PPackLoc <> @PackLoc set @PackLoc = @PPackLoc

    insert into pick_list (whse, picker, pack_loc, pick_date,ZWM_IdRouteMap, ZWM_RefType, ZWM_ToWhse)
                   values (@Whse, @Picker, @PackLoc, dbo.GetSiteDate(getdate()),@RouteId, 'T', @ToWhse)
    set @PickListId = @@IDENTITY

    insert into @picks (grp, PickListId) values (@group, @PickListId)

    -- insert record for running reports
    insert into tmp_pick_list (process_id, pick_list_id, selected, RowPointer)
                       values (@BGTaskProcessId1, @PickListId, 1, NEWID())

    insert into tmp_pick_list (process_id, pick_list_id, selected, RowPointer)
                       values (@BGTaskProcessId2, @PickListId, 1, NEWID())
end
close pick_curs
deallocate pick_curs

DECLARE 
@CurTrnNum	TrnNumType
,@CurTrnLine	TrnLineType


declare ref_curs cursor local static for
select grp, PickListId, ref_num, ref_line_suf, qty_to_pick, whse, item
from tmp_pick_list
join @picks on grp = pick_group
where process_id = @ProcessId
order by grp

open ref_curs
while 1 = 1
begin
    FETCH ref_curs into @group, @PickId, @CurTrnNum, @CurTrnLine, @qtytopick, @whse, @item
    if @@FETCH_STATUS <> 0 break

    select
      @Seq = null
     ,@Reserved = 0

    select @seq = isnull(MAX(sequence), 0) + 1
    from pick_list_ref
    where pick_list_id = @PickId

    insert into pick_list_ref 
    (pick_list_id, sequence, ref_type, ref_num, ref_line_suf, ref_release, qty_to_pick, qty_picked)
	values (@PickId, @seq, 'T', @CurTrnNum, @CurTrnLine, 0, isnull(@qtytopick,0), 0)
	

    declare loc_curs cursor local static for
    select loc, lot, qty_to_pick, qty_pick, reserved
    from tmp_pick_list_loc
    where process_id = @processid
      and pick_group = @group
      and loc is not null
      and ref_num = @conum
      and ref_line_suf = @coline
      and ref_release = @corelease
      and qty_to_pick <> 0
    order by pick_group
    open loc_curs
    while 1 = 1
    begin
        fetch loc_curs into @loc, @lot, @qtytopick, @qtypicked, @reserved
        if @@FETCH_STATUS <> 0 break

        set @RsvdNum = null
        if @Reserved = 1
          SELECT TOP 1 @RsvdNum    = rsvd_inv.rsvd_num
          FROM rsvd_inv_mst rsvd_inv WITH (INDEX (IX_rsvd_inv_mst_ref_rsvd))
          WHERE rsvd_inv.site_ref = @LocalSite AND
	        rsvd_inv.ref_num     = @CoNum AND
                rsvd_inv.ref_line    = @CoLine AND
                rsvd_inv.ref_release = @CoRelease AND
                rsvd_inv.qty_rsvd    > 0.0

        if not exists (select 1 from pick_list_loc
                       where pick_list_id = @PickId                         
                         and sequence = @Seq
                         and loc = @loc
                         and isnull(lot,'') = isnull(@lot,'')) 
        insert into pick_list_loc (pick_list_id, sequence, loc, lot, qty_to_pick, qty_picked)
                           values (@PickId, @seq, @loc, @lot, 0, 0)
   
        update pick_list_loc
        set qty_to_pick = qty_to_pick + @qtytopick
        where pick_list_id = @PickId
                         and sequence = @Seq
                         and loc = @loc
                         and isnull(lot,'') = isnull(@lot,'')

        if @Reserved = 0        
        begin              
            update itemloc
            set assigned_to_be_picked_qty = assigned_to_be_picked_qty + @qtytopick
            where item = @item
              and whse = @Whse
              and loc = @loc
                  
            if @lot is not null
                update lot_loc
                set assigned_to_be_picked_qty = assigned_to_be_picked_qty + @qtytopick
                where whse = @Whse
                  and item = @item                 
                  and loc = @loc
                  and lot = @lot
        end

        declare ser_curs cursor local static for
        select ser_num
        from tmp_pick_list_serial
        where process_id = @processid
          and pick_group = @group
          and ref_num = @conum
          and ref_line_suf = @coline
          and ref_release = @corelease
          and loc = @loc
          and isnull(lot, '') = isnull(@lot, '')
          and picked = 1
          and reserved = @reserved
        order by pick_group
        open ser_curs
        while 1 = 1
        begin
            fetch ser_curs into @sernum
            if @@FETCH_STATUS <> 0 break

            insert into pick_list_serial (pick_list_id, sequence, loc, lot, ser_num, picked)
                           values (@PickId, @seq, @loc, @lot, @sernum, 0)

            if @Reserved = 0
               update serial
               set assigned_to_be_picked = 1
               where item = @item
                 and ser_num = @sernum

        end
        close ser_curs
        deallocate ser_curs
    end
    close loc_curs
    deallocate loc_curs
    

end
close ref_curs
deallocate ref_curs


SET @Severity = @@error

if @severity = 0
begin
   set @infobar = null   
	EXEC @Severity = MsgAppSp @Infobar OUTPUT, 'I=CmdSucceeded', '@%generate'
end
GO


