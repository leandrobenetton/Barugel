/****** Object:  StoredProcedure [dbo].[ZWM_UpdateItemsSp]    Script Date: 01/09/2015 15:01:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_UpdateItemsSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_UpdateItemsSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_UpdateItemsSp]    Script Date: 01/09/2015 15:01:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[ZWM_UpdateItemsSp] (
	@ProductStart   ProductCodeType 
	,@ProductEnd    ProductCodeType
	,@FamilyStart	FamilyCodeType
	,@FamilyEnd     FamilyCodeType
	,@Whse          WhseType
	,@Zone			DescriptionType = NULL
	,@Location		DescriptionType = NULL
	,@Rank			tinyint
	,@EmptyLoc		ListYesNoType
	,@Infobar		InfobarType = NULL OUTPUT
)
AS

DECLARE @Severity int
SET @Severity = 0


 -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_UpdateItemsSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_UpdateItemsSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
		@ProductStart    
		,@ProductEnd    
		,@FamilyStart	
		,@FamilyEnd     
		,@Whse          
		,@Zone			
		,@Location		
		,@Rank			
		,@EmptyLoc		
		,@Infobar		 OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
   

IF (@Whse IS NULL)
BEGIN
	SET @Infobar = 'Faltan parametros'
	SET @Severity = 16
	RETURN @Severity
END
ELSE IF (@ProductStart IS NULL and @ProductEnd IS NULL) and (@FamilyStart IS NULL and @FamilyEnd IS NULL)
BEGIN 
	SET @Severity = 16
	RETURN @Severity
END
      
DECLARE @item ItemType


-- 1. traigo los items que corresponden al rango de product_code y family_code.
-- 2. chequeo si ese item ya tiene relacion con un whse en la tabla zwm_itm_whse. Si tiene, la actualizo, sino la creo.
-- 3. actualizo la tabla itemwhse para que la relacion entre el item y el whse sea la misma que en la tabla zwm_itm_whse.
declare ZWMCursor CURSOR LOCAL STATIC FOR
	SELECT item FROM item
	WHERE product_code BETWEEN @ProductStart AND @ProductEnd
	OR family_code BETWEEN @FamilyStart AND @FamilyEnd
	
	OPEN ZWMCursor
	WHILE 1=1
	BEGIN
		FETCH ZWMCursor INTO @item
		
		IF @@FETCH_STATUS <> 0 
			  BREAK 

		--INSERT itemwhse
		if (select item from itemwhse where item = @item and whse = @Whse) is null
		begin
			insert into itemwhse
			(item,whse)
			values
			(@item,@Whse)
			declare @a int
		end

		--INSERT zwm_itm_whse
		if (select item from zwm_itm_whse where item = @item and whse = @Whse and ranking = @Rank) is null
		begin
			insert into zwm_itm_whse
			(item,whse,zone,location,ranking,empty_loc)
			values
			(@item,@Whse,@Zone,@Location,@Rank,isnull(@EmptyLoc,0))
		end
		else
		begin
			UPDATE zwm_itm_whse
			SET zone = @Zone, location = @Location, ranking = @Rank, empty_loc = isnull(@EmptyLoc,0)
			WHERE item = @item
			AND whse = @Whse
			AND ranking = @Rank
		end
		
		
	END --end while
CLOSE ZWMCursor
DEALLOCATE ZWMCursor

return @Infobar

GO


