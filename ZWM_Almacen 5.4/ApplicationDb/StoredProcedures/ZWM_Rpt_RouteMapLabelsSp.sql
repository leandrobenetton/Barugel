/****** Object:  StoredProcedure [dbo].[ZWM_Rpt_RouteMapLabelsSp]    Script Date: 01/09/2015 14:58:36 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZWM_Rpt_RouteMapLabelsSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZWM_Rpt_RouteMapLabelsSp]
GO

/****** Object:  StoredProcedure [dbo].[ZWM_Rpt_RouteMapLabelsSp]    Script Date: 01/09/2015 14:58:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ZWM_Rpt_RouteMapLabelsSp] (
	 @IdRouteMapStart	ZwmIdRouteMapType = NULL
	, @IdRouteMapEnd	ZwmIdRouteMapType = NULL
	, @ProdCodeStart	ProductCodeType = NULL
	, @ProdCodeEnd  	ProductCodeType = NULL
	, @FamilyCodeStart  FamilyCodeType = NULL
	, @FamilyCodeEnd    FamilyCodeType = NULL
	, @Criteria			TinyInt
    ,@pSite				SiteType
)
AS

-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZWM_GenerateTransferOrder') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZWM_GenerateTransferOrder'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
		@IdRouteMapStart	
		, @IdRouteMapEnd	
		, @ProdCodeStart	
		, @ProdCodeEnd  	
		, @FamilyCodeStart  
		, @FamilyCodeEnd    
		, @Criteria			
		,@pSite					
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.


-- A session context is created so session variables can be used.
DECLARE
     @RptSessionID RowPointerType

EXEC dbo.InitSessionContextSp
     @ContextName = 'ZWM'
   , @SessionID   = @RptSessionID    OUTPUT
   , @Site        = @pSite

Declare @infobar InfobarType
Declare @Severity int
Set @Severity = 0

SET @IdRouteMapStart = ISNULL(@IdRouteMapStart, dbo.LowString('ZwmIdRouteMapType'))
SET @IdRouteMapEnd = ISNULL(@IdRouteMapEnd, dbo.HighString('ZwmIdRouteMapType'))
SET @ProdCodeStart = ISNULL(@ProdCodeStart, dbo.LowString('ProductCodeType'))
SET @ProdCodeEnd = ISNULL(@ProdCodeEnd, dbo.HighString('ProductCodeType'))
SET @FamilyCodeStart = ISNULL(@FamilyCodeStart, dbo.LowString('FamilyCodeType'))
SET @FamilyCodeEnd = ISNULL(@FamilyCodeEnd, dbo.HighString('FamilyCodeType'))
SET @Criteria = ISNULL(@Criteria,1)

DECLARE @Resultados TABLE(
HojaDeRuta ZwmIdRouteMapType, PickListId PickListIDType, Secuencia int
, Articulo ItemType, Descripcion DescriptionType
, Pedido nvarchar(20), Linea smallint, Release smallint
, Zona nvarchar(40), Ubicacion nvarchar(15), Lote nvarchar(15)
, CantPick Decimal(18,8), UM UMType
, QtyTags int
)

INSERT INTO @Resultados
SELECT 
pl.ZWM_IdRouteMap
,pl.pick_list_id,plr.sequence
,coi.item, i.description
,plr.ref_num, plr.ref_line_suf, plr.ref_release
,loc.ZWM_Zone,pll.loc, pll.lot
,plr.qty_to_pick, i.u_m
,i.ZWM_PickQtyByTag
FROM
pick_list pl
JOIN pick_list_ref plr
ON pl.pick_list_id = plr.pick_list_id
JOIN pick_list_loc pll
ON pl.pick_list_id = pll.pick_list_id AND pll.sequence = plr.sequence
JOIN coitem coi
ON plr.ref_num = coi.co_num AND plr.ref_line_suf = coi.co_line AND plr.ref_release = coi.co_release
JOIN item i
ON coi.item = i.item
LEFT JOIN location loc
ON pll.loc = loc.loc
WHERE pl.ZWM_IdRouteMap BETWEEN @IdRouteMapStart AND @IdRouteMapEnd
AND i.product_code BETWEEN @ProdCodeStart AND @ProdCodeEnd
AND i.family_code BETWEEN @FamilyCodeStart AND @FamilyCodeEnd
AND pll.ZWM_Printed is null

DECLARE @ReportSet TABLE(
HojaDeRuta ZwmIdRouteMapType null, PickListId PickListIDType, Secuencia int
, Articulo ItemType, Descripcion DescriptionType
, Pedido nvarchar(20), Linea smallint, Release smallint
, Zona nvarchar(40), Ubicacion nvarchar(15), Lote nvarchar(15)
, CantPick Decimal(18,8), UM UMType
,iLCount smallint, UM_label UMType
,QtyStk2 QtyUnitType
,UMStk2 UmTYpe
,QtyStk1 QtyUnitType
,UMStk1 UmTYpe
,QtyStkStd QtyUnitType
,UMStd UmTYpe
)

Declare
@HojaDeRuta ZwmIdRouteMapType
, @PickListId PickListIDType
, @Secuencia int
, @Articulo ItemType
, @Descripcion DescriptionType
, @Pedido nvarchar(20)
, @Linea smallint
, @Release smallint
, @Zona nvarchar(40)
, @Ubicacion nvarchar(15)
, @Lote nvarchar(15)
, @CantPick Decimal(18,8)
, @UM UMType

Declare
@QtyStk2 QtyUnitType
,@UMStk2 UmTYpe
,@QtyStk1 QtyUnitType
,@UMStk1 UmTYpe
,@QtyStkStd QtyUnitType
,@UMStd UmTYpe
,@QtyTags int

DECLARE @iCount as smallint
DECLARE @CountTable TABLE (iLCount smallint NOT NULL, UM_label UMType)

IF @Criteria = 1
BEGIN
	DECLARE cur CURSOR LOCAL STATIC FOR
	SELECT * FROM @Resultados ORDER BY Zona,Articulo,HojaDeRuta,Pedido,Linea,Release
END
ELSE IF @Criteria = 2
BEGIN
	DECLARE cur CURSOR LOCAL STATIC FOR
	SELECT * FROM @Resultados ORDER BY HojaDeRuta,Zona,Articulo,Pedido,Linea,Release
END
ELSE IF @Criteria = 3
BEGIN
	DECLARE cur CURSOR LOCAL STATIC FOR
	SELECT * FROM @Resultados ORDER BY Zona,HojaDeRuta,Articulo,Pedido,Linea,Release
END

OPEN cur
WHILE 1=1
BEGIN

	FETCH cur INTO
	@HojaDeRuta, @PickListId, @Secuencia, 
	@Articulo, @Descripcion, 
	@Pedido, @Linea, @Release, 
	@Zona, @Ubicacion, @Lote, 
	@CantPick, @UM
	, @QtyTags

	IF @@FETCH_STATUS <> 0
		BREAK

	EXEC	@Severity = [dbo].[ZWM_UmToStk1Stk2ConvQtySp]
		@Item = @Articulo,
		@QtyToBeConverted = @CantPick,
		@QtyStk2 = @QtyStk2 OUTPUT,
		@UMStk2 = @UMStk2 OUTPUT,
		@QtyStk1 = @QtyStk1 OUTPUT,
		@UMStk1 = @UMStk1 OUTPUT,
		@QtyStkStd = @QtyStkStd OUTPUT,
		@UMStd = @UMStd OUTPUT,
		@Infobar = @Infobar OUTPUT
	
	DELETE FROM @CountTable
	SET @iCount = 1
	
	-- imprime la cantidad de etiquetas seteada en el campo ZWM_PickQtyByTag
	IF @QtyTags > 0
	BEGIN
		WHILE @iCount <= @QtyTags
		BEGIN
		  INSERT INTO @CountTable (iLCount, UM_label) VALUES (@iCount, null)
		  SET @iCount = @iCount + 1
		END
	END
	ELSE
	BEGIN
		-- calcula la cantidad de etiquetas a imprimir
		WHILE @iCount <= Ceiling(@QtyStk2)
		BEGIN
		  INSERT INTO @CountTable (iLCount, UM_label) VALUES (@iCount, @UMStk2)
		  SET @iCount = @iCount + 1
		END

		WHILE @iCount <= Ceiling(@QtyStk2) + Ceiling(@QtyStk1)
		BEGIN
		  INSERT INTO @CountTable (iLCount, UM_label) VALUES (@iCount, @UMStk1)
		  SET @iCount = @iCount + 1
		END

		WHILE @iCount <= Ceiling(@QtyStk2) + Ceiling(@QtyStk1)+ Ceiling(@QtyStkStd)
		BEGIN
		  INSERT INTO @CountTable (iLCount, UM_label) VALUES (@iCount, @UMStd)
		  SET @iCount = @iCount + 1
		END
	END
	
	INSERT INTO @ReportSet
	SELECT 
	@HojaDeRuta as HojadeRuta, @PickListId as PickListId, @Secuencia as Seq, 
	@Articulo as Articulo, @Descripcion as Descripcion, 
	@Pedido as Pedido, @Linea as Linea, @Release as Release, 
	@Zona as Zona, @Ubicacion as Ubicacion, @Lote as Lote, 
	@CantPick as CantPick, @UM as UM,
	iLCount, UM_label,
	@QtyStk2,@UMStk2,@QtyStk1,@UMStk1,@QtyStkStd,@UMStd
	FROM
	@CountTable
	
	
	insert into @ReportSet
	(HojaDeRuta, PickListId, Secuencia, Articulo, Descripcion, Pedido, Linea, Release, Zona, Ubicacion, Lote, CantPick, UM,iLCount, UM_label,QtyStk2 ,UMStk2 ,QtyStk1 ,UMStk1 ,QtyStkStd ,UMStd)
	values
	(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
	
	
	-- marca el pick_list como impreso
	update pick_list_loc set ZWM_Printed = 1
	where 
	pick_list_id = @PickListId
	and sequence = @Secuencia

	
END

CLOSE cur
DEALLOCATE cur

----------------------------------- marca printed el pick_list.printed
declare @ID nvarchar(15)
,@QtySeq int
,@QtySeqPrinted int

declare PrintedCur cursor local static for
select distinct pl.pick_list_id from pick_list pl
join pick_list_loc pll
on pl.pick_list_id = pll.pick_list_id
where pl.ZWM_IdRouteMap between @IdRouteMapStart and @IdRouteMapEnd
and pll.ZWM_Printed = 1

OPEN PrintedCur
WHILE 1=1
BEGIN

	FETCH PrintedCur INTO @ID

	IF @@FETCH_STATUS <> 0
		BREAK

	select @QtySeq = count(pick_list_id) from pick_list_loc where pick_list_id = @ID 
	select @QtySeqPrinted = count(pick_list_id) from pick_list_loc where ZWM_Printed = 1 and pick_list_id = @ID 
	
	if @QtySeq = @QtySeqPrinted
		update pick_list set printed = 1 where pick_list_id = @ID 
	
END
CLOSE PrintedCur
DEALLOCATE PrintedCur
/**/



SELECT * FROM @ReportSet

RETURN @Severity

EXEC dbo.CloseSessionContextSp @SessionID = @RptSessionID

GO


